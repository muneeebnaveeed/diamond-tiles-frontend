[{"/home/muneeb/dev/diamond-tiles-frontend/src/index.js":"1","/home/muneeb/dev/diamond-tiles-frontend/src/App.js":"2","/home/muneeb/dev/diamond-tiles-frontend/src/store/index.js":"3","/home/muneeb/dev/diamond-tiles-frontend/src/store/reducers.js":"4","/home/muneeb/dev/diamond-tiles-frontend/src/jsx/index.js":"5","/home/muneeb/dev/diamond-tiles-frontend/src/store/auth/reducer.js":"6","/home/muneeb/dev/diamond-tiles-frontend/src/jsx/pages/Error404.js":"7","/home/muneeb/dev/diamond-tiles-frontend/src/jsx/pages/employees/EmployeeActions.js":"8","/home/muneeb/dev/diamond-tiles-frontend/src/jsx/pages/Registration.js":"9","/home/muneeb/dev/diamond-tiles-frontend/src/jsx/pages/expenses/ExpenseActions.js":"10","/home/muneeb/dev/diamond-tiles-frontend/src/jsx/pages/purchase/AddPurchase.js":"11","/home/muneeb/dev/diamond-tiles-frontend/src/jsx/pages/sale/AddSale.js":"12","/home/muneeb/dev/diamond-tiles-frontend/src/jsx/pages/types/TypeActions.js":"13","/home/muneeb/dev/diamond-tiles-frontend/src/jsx/helpers/enums.js":"14","/home/muneeb/dev/diamond-tiles-frontend/src/jsx/pages/Login.js":"15","/home/muneeb/dev/diamond-tiles-frontend/src/jsx/pages/customers/CustomerActions.js":"16","/home/muneeb/dev/diamond-tiles-frontend/src/jsx/pages/products/ProductActions.js":"17","/home/muneeb/dev/diamond-tiles-frontend/src/jsx/pages/suppliers/SupplierActions.js":"18","/home/muneeb/dev/diamond-tiles-frontend/src/store/auth/actionTypes.js":"19","/home/muneeb/dev/diamond-tiles-frontend/src/jsx/pages/employees/index.js":"20","/home/muneeb/dev/diamond-tiles-frontend/src/jsx/pages/inventory/index.js":"21","/home/muneeb/dev/diamond-tiles-frontend/src/jsx/pages/dashboard/index.js":"22","/home/muneeb/dev/diamond-tiles-frontend/src/jsx/pages/khaata/index.js":"23","/home/muneeb/dev/diamond-tiles-frontend/src/jsx/layouts/index.js":"24","/home/muneeb/dev/diamond-tiles-frontend/src/jsx/pages/expenses/index.js":"25","/home/muneeb/dev/diamond-tiles-frontend/src/jsx/pages/customers/index.js":"26","/home/muneeb/dev/diamond-tiles-frontend/src/jsx/pages/products/index.js":"27","/home/muneeb/dev/diamond-tiles-frontend/src/jsx/pages/sale/index.js":"28","/home/muneeb/dev/diamond-tiles-frontend/src/jsx/pages/purchase/index.js":"29","/home/muneeb/dev/diamond-tiles-frontend/src/jsx/pages/suppliers/index.js":"30","/home/muneeb/dev/diamond-tiles-frontend/src/store/auth/actions.js":"31","/home/muneeb/dev/diamond-tiles-frontend/src/jsx/components/CreatableSelect.js":"32","/home/muneeb/dev/diamond-tiles-frontend/src/jsx/components/Select.js":"33","/home/muneeb/dev/diamond-tiles-frontend/src/jsx/components/Button.js":"34","/home/muneeb/dev/diamond-tiles-frontend/src/jsx/components/Pagination.js":"35","/home/muneeb/dev/diamond-tiles-frontend/src/jsx/components/SpinnerOverlay.js":"36","/home/muneeb/dev/diamond-tiles-frontend/src/jsx/components/ModalWrapper.js":"37","/home/muneeb/dev/diamond-tiles-frontend/src/jsx/layouts/PageTitle.js":"38","/home/muneeb/dev/diamond-tiles-frontend/src/jsx/components/invoice.js":"39","/home/muneeb/dev/diamond-tiles-frontend/src/jsx/layouts/Footer.js":"40","/home/muneeb/dev/diamond-tiles-frontend/src/jsx/helpers/index.js":"41","/home/muneeb/dev/diamond-tiles-frontend/src/jsx/pages/salaries/index.js":"42","/home/muneeb/dev/diamond-tiles-frontend/src/jsx/pages/units/index.js":"43","/home/muneeb/dev/diamond-tiles-frontend/src/jsx/pages/types/index.js":"44","/home/muneeb/dev/diamond-tiles-frontend/src/jsx/layouts/nav/index.js":"45","/home/muneeb/dev/diamond-tiles-frontend/src/jsx/pages/expenseTypes/index.js":"46","/home/muneeb/dev/diamond-tiles-frontend/src/jsx/helpers/useAlert.js":"47","/home/muneeb/dev/diamond-tiles-frontend/src/jsx/helpers/server.js":"48","/home/muneeb/dev/diamond-tiles-frontend/src/jsx/helpers/useQuery.js":"49","/home/muneeb/dev/diamond-tiles-frontend/src/jsx/layouts/ChatBox.js":"50","/home/muneeb/dev/diamond-tiles-frontend/src/jsx/layouts/nav/NavHader.js":"51","/home/muneeb/dev/diamond-tiles-frontend/src/jsx/layouts/nav/Header.js":"52","/home/muneeb/dev/diamond-tiles-frontend/src/jsx/layouts/nav/SideBar.js":"53","/home/muneeb/dev/diamond-tiles-frontend/src/jsx/pages/purchase/PurchaseInvoice.js":"54","/home/muneeb/dev/diamond-tiles-frontend/src/jsx/pages/sale/SaleInvoice.js":"55","/home/muneeb/dev/diamond-tiles-frontend/src/jsx/pages/purchase/RefundPurchase.js":"56","/home/muneeb/dev/diamond-tiles-frontend/src/jsx/helpers/getQuantity.js":"57","/home/muneeb/dev/diamond-tiles-frontend/src/jsx/pages/purchase/ClearPurchase.js":"58","/home/muneeb/dev/diamond-tiles-frontend/src/jsx/pages/sale/RefundSale.js":"59","/home/muneeb/dev/diamond-tiles-frontend/src/store/products/reducer.js":"60","/home/muneeb/dev/diamond-tiles-frontend/src/store/products/actionTypes.js":"61","/home/muneeb/dev/diamond-tiles-frontend/src/jsx/pages/products/AddNewProduct.js":"62","/home/muneeb/dev/diamond-tiles-frontend/src/store/actions.js":"63","/home/muneeb/dev/diamond-tiles-frontend/src/store/products/actions.js":"64","/home/muneeb/dev/diamond-tiles-frontend/src/store/types/actions.js":"65","/home/muneeb/dev/diamond-tiles-frontend/src/store/types/actionTypes.js":"66","/home/muneeb/dev/diamond-tiles-frontend/src/store/types/reducer.js":"67","/home/muneeb/dev/diamond-tiles-frontend/src/jsx/pages/types/AddNewType.js":"68","/home/muneeb/dev/diamond-tiles-frontend/src/store/units/actions.js":"69","/home/muneeb/dev/diamond-tiles-frontend/src/store/units/actionTypes.js":"70","/home/muneeb/dev/diamond-tiles-frontend/src/jsx/pages/units/AddNewUnit.js":"71","/home/muneeb/dev/diamond-tiles-frontend/src/store/units/reducer.js":"72","/home/muneeb/dev/diamond-tiles-frontend/src/store/suppliers/actions.js":"73","/home/muneeb/dev/diamond-tiles-frontend/src/store/suppliers/actionTypes.js":"74","/home/muneeb/dev/diamond-tiles-frontend/src/jsx/pages/suppliers/AddNewSupplier.js":"75","/home/muneeb/dev/diamond-tiles-frontend/src/store/suppliers/reducer.js":"76","/home/muneeb/dev/diamond-tiles-frontend/src/jsx/pages/sale/ClearSale.js":"77","/home/muneeb/dev/diamond-tiles-frontend/src/store/customers/actions.js":"78","/home/muneeb/dev/diamond-tiles-frontend/src/store/customers/actionTypes.js":"79","/home/muneeb/dev/diamond-tiles-frontend/src/store/customers/reducer.js":"80","/home/muneeb/dev/diamond-tiles-frontend/src/jsx/pages/customers/AddNewCustomer.js":"81","/home/muneeb/dev/diamond-tiles-frontend/src/jsx/pages/users/index.js":"82","/home/muneeb/dev/diamond-tiles-frontend/src/jsx/helpers/getSortingIcon.js":"83","/home/muneeb/dev/diamond-tiles-frontend/src/jsx/pages/purchase/ManagePurchase.js":"84"},{"size":269,"mtime":1628758796058,"results":"85","hashOfConfig":"86"},{"size":840,"mtime":1628678703694,"results":"87","hashOfConfig":"86"},{"size":373,"mtime":1628758796058,"results":"88","hashOfConfig":"86"},{"size":425,"mtime":1629982288700,"results":"89","hashOfConfig":"86"},{"size":4420,"mtime":1630229947210,"results":"90","hashOfConfig":"86"},{"size":499,"mtime":1628758796058,"results":"91","hashOfConfig":"86"},{"size":825,"mtime":1627653242443,"results":"92","hashOfConfig":"86"},{"size":14844,"mtime":1628933400484,"results":"93","hashOfConfig":"86"},{"size":5866,"mtime":1628674748634,"results":"94","hashOfConfig":"86"},{"size":9988,"mtime":1628621332292,"results":"95","hashOfConfig":"86"},{"size":15177,"mtime":1629924594009,"results":"96","hashOfConfig":"86"},{"size":14930,"mtime":1630007976389,"results":"97","hashOfConfig":"86"},{"size":12873,"mtime":1628520150388,"results":"98","hashOfConfig":"86"},{"size":88,"mtime":1628773267088,"results":"99","hashOfConfig":"86"},{"size":7014,"mtime":1628926981049,"results":"100","hashOfConfig":"86"},{"size":19117,"mtime":1628803768254,"results":"101","hashOfConfig":"86"},{"size":22894,"mtime":1628936442778,"results":"102","hashOfConfig":"86"},{"size":19817,"mtime":1628933186935,"results":"103","hashOfConfig":"86"},{"size":62,"mtime":1628758796058,"results":"104","hashOfConfig":"86"},{"size":15206,"mtime":1628520150388,"results":"105","hashOfConfig":"86"},{"size":8256,"mtime":1630007578655,"results":"106","hashOfConfig":"86"},{"size":4383,"mtime":1630151662504,"results":"107","hashOfConfig":"86"},{"size":13775,"mtime":1628939873011,"results":"108","hashOfConfig":"86"},{"size":1851,"mtime":1628773267088,"results":"109","hashOfConfig":"86"},{"size":12631,"mtime":1630230220422,"results":"110","hashOfConfig":"86"},{"size":12531,"mtime":1628803826630,"results":"111","hashOfConfig":"86"},{"size":8712,"mtime":1629827323804,"results":"112","hashOfConfig":"86"},{"size":17745,"mtime":1630011201768,"results":"113","hashOfConfig":"86"},{"size":1996,"mtime":1630151510783,"results":"114","hashOfConfig":"86"},{"size":13295,"mtime":1628773267092,"results":"115","hashOfConfig":"86"},{"size":303,"mtime":1628758796058,"results":"116","hashOfConfig":"86"},{"size":1083,"mtime":1628258686302,"results":"117","hashOfConfig":"86"},{"size":1233,"mtime":1628882102778,"results":"118","hashOfConfig":"86"},{"size":873,"mtime":1627665532994,"results":"119","hashOfConfig":"86"},{"size":3755,"mtime":1628520150388,"results":"120","hashOfConfig":"86"},{"size":469,"mtime":1627669025267,"results":"121","hashOfConfig":"86"},{"size":1449,"mtime":1629826371809,"results":"122","hashOfConfig":"86"},{"size":467,"mtime":1627653242443,"results":"123","hashOfConfig":"86"},{"size":4973,"mtime":1628773267088,"results":"124","hashOfConfig":"86"},{"size":452,"mtime":1627653887148,"results":"125","hashOfConfig":"86"},{"size":82,"mtime":1627893330692,"results":"126","hashOfConfig":"86"},{"size":3917,"mtime":1630231122984,"results":"127","hashOfConfig":"86"},{"size":7630,"mtime":1629827292044,"results":"128","hashOfConfig":"86"},{"size":7421,"mtime":1629827192659,"results":"129","hashOfConfig":"86"},{"size":800,"mtime":1627794881747,"results":"130","hashOfConfig":"86"},{"size":8752,"mtime":1628773267092,"results":"131","hashOfConfig":"86"},{"size":2568,"mtime":1629915252876,"results":"132","hashOfConfig":"86"},{"size":1809,"mtime":1630103755773,"results":"133","hashOfConfig":"86"},{"size":406,"mtime":1628258678049,"results":"134","hashOfConfig":"86"},{"size":1687,"mtime":1628678609350,"results":"135","hashOfConfig":"86"},{"size":1085,"mtime":1627655776225,"results":"136","hashOfConfig":"86"},{"size":3813,"mtime":1628773267088,"results":"137","hashOfConfig":"86"},{"size":4661,"mtime":1630229927134,"results":"138","hashOfConfig":"86"},{"size":4904,"mtime":1628928830104,"results":"139","hashOfConfig":"86"},{"size":4977,"mtime":1628862946401,"results":"140","hashOfConfig":"86"},{"size":6811,"mtime":1629978551403,"results":"141","hashOfConfig":"86"},{"size":243,"mtime":1630007225905,"results":"142","hashOfConfig":"86"},{"size":2324,"mtime":1628934666948,"results":"143","hashOfConfig":"86"},{"size":3280,"mtime":1628939077958,"results":"144","hashOfConfig":"86"},{"size":513,"mtime":1629819520234,"results":"145","hashOfConfig":"86"},{"size":116,"mtime":1629819436993,"results":"146","hashOfConfig":"86"},{"size":4746,"mtime":1629828474966,"results":"147","hashOfConfig":"86"},{"size":208,"mtime":1629982275984,"results":"148","hashOfConfig":"86"},{"size":268,"mtime":1629819447777,"results":"149","hashOfConfig":"86"},{"size":254,"mtime":1629819498698,"results":"150","hashOfConfig":"86"},{"size":108,"mtime":1629819461649,"results":"151","hashOfConfig":"86"},{"size":505,"mtime":1629819469477,"results":"152","hashOfConfig":"86"},{"size":2721,"mtime":1629826171901,"results":"153","hashOfConfig":"86"},{"size":254,"mtime":1629824071180,"results":"154","hashOfConfig":"86"},{"size":108,"mtime":1629823964512,"results":"155","hashOfConfig":"86"},{"size":4267,"mtime":1629826167109,"results":"156","hashOfConfig":"86"},{"size":505,"mtime":1629823996388,"results":"157","hashOfConfig":"86"},{"size":278,"mtime":1629827664149,"results":"158","hashOfConfig":"86"},{"size":124,"mtime":1629827516340,"results":"159","hashOfConfig":"86"},{"size":4085,"mtime":1629828012058,"results":"160","hashOfConfig":"86"},{"size":521,"mtime":1629827572824,"results":"161","hashOfConfig":"86"},{"size":2288,"mtime":1630011218004,"results":"162","hashOfConfig":"86"},{"size":278,"mtime":1629982251487,"results":"163","hashOfConfig":"86"},{"size":124,"mtime":1629982227827,"results":"164","hashOfConfig":"86"},{"size":521,"mtime":1629982263495,"results":"165","hashOfConfig":"86"},{"size":3383,"mtime":1629982568005,"results":"166","hashOfConfig":"86"},{"size":10444,"mtime":1630104037822,"results":"167","hashOfConfig":"86"},{"size":878,"mtime":1630151038850,"results":"168","hashOfConfig":"86"},{"size":10961,"mtime":1630151570175,"results":"169","hashOfConfig":"86"},{"filePath":"170","messages":"171","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"172"},"1ssctl6",{"filePath":"173","messages":"174","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"172"},{"filePath":"175","messages":"176","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"172"},{"filePath":"177","messages":"178","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"172"},{"filePath":"179","messages":"180","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"181","messages":"182","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"172"},{"filePath":"183","messages":"184","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"172"},{"filePath":"185","messages":"186","errorCount":0,"warningCount":14,"fixableErrorCount":0,"fixableWarningCount":0,"source":"187","usedDeprecatedRules":"172"},{"filePath":"188","messages":"189","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"190","usedDeprecatedRules":"172"},{"filePath":"191","messages":"192","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"193","usedDeprecatedRules":"172"},{"filePath":"194","messages":"195","errorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"196","usedDeprecatedRules":"172"},{"filePath":"197","messages":"198","errorCount":0,"warningCount":9,"fixableErrorCount":0,"fixableWarningCount":0,"source":"199","usedDeprecatedRules":"172"},{"filePath":"200","messages":"201","errorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":"202","usedDeprecatedRules":"172"},{"filePath":"203","messages":"204","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"172"},{"filePath":"205","messages":"206","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"207","usedDeprecatedRules":"172"},{"filePath":"208","messages":"209","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"210","usedDeprecatedRules":"172"},{"filePath":"211","messages":"212","errorCount":0,"warningCount":9,"fixableErrorCount":0,"fixableWarningCount":0,"source":"213","usedDeprecatedRules":"172"},{"filePath":"214","messages":"215","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"216","usedDeprecatedRules":"172"},{"filePath":"217","messages":"218","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"172"},{"filePath":"219","messages":"220","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"172"},{"filePath":"221","messages":"222","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"223","usedDeprecatedRules":"172"},{"filePath":"224","messages":"225","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"226","usedDeprecatedRules":"172"},{"filePath":"227","messages":"228","errorCount":0,"warningCount":14,"fixableErrorCount":0,"fixableWarningCount":0,"source":"229","usedDeprecatedRules":"172"},{"filePath":"230","messages":"231","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"232","usedDeprecatedRules":"172"},{"filePath":"233","messages":"234","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"235","messages":"236","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"172"},{"filePath":"237","messages":"238","errorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":"239","usedDeprecatedRules":"172"},{"filePath":"240","messages":"241","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"242","usedDeprecatedRules":"172"},{"filePath":"243","messages":"244","errorCount":0,"warningCount":37,"fixableErrorCount":0,"fixableWarningCount":0,"source":"245","usedDeprecatedRules":"172"},{"filePath":"246","messages":"247","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"172"},{"filePath":"248","messages":"249","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"172"},{"filePath":"250","messages":"251","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"252","usedDeprecatedRules":"172"},{"filePath":"253","messages":"254","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"255","usedDeprecatedRules":"172"},{"filePath":"256","messages":"257","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"172"},{"filePath":"258","messages":"259","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"260","usedDeprecatedRules":"172"},{"filePath":"261","messages":"262","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"172"},{"filePath":"263","messages":"264","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"172"},{"filePath":"265","messages":"266","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"172"},{"filePath":"267","messages":"268","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"269"},{"filePath":"270","messages":"271","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"172"},{"filePath":"272","messages":"273","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"172"},{"filePath":"274","messages":"275","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"276","messages":"277","errorCount":0,"warningCount":18,"fixableErrorCount":0,"fixableWarningCount":0,"source":"278","usedDeprecatedRules":"172"},{"filePath":"279","messages":"280","errorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":"281","usedDeprecatedRules":"172"},{"filePath":"282","messages":"283","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"284","usedDeprecatedRules":"172"},{"filePath":"285","messages":"286","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"287","usedDeprecatedRules":"172"},{"filePath":"288","messages":"289","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"290","usedDeprecatedRules":"172"},{"filePath":"291","messages":"292","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"172"},{"filePath":"293","messages":"294","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"172"},{"filePath":"295","messages":"296","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"297","usedDeprecatedRules":"172"},{"filePath":"298","messages":"299","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"300","usedDeprecatedRules":"172"},{"filePath":"301","messages":"302","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"303","usedDeprecatedRules":"172"},{"filePath":"304","messages":"305","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"306","messages":"307","errorCount":0,"warningCount":11,"fixableErrorCount":0,"fixableWarningCount":0,"source":"308","usedDeprecatedRules":"309"},{"filePath":"310","messages":"311","errorCount":0,"warningCount":9,"fixableErrorCount":0,"fixableWarningCount":0,"source":"312","usedDeprecatedRules":"269"},{"filePath":"313","messages":"314","errorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":"315","usedDeprecatedRules":"172"},{"filePath":"316","messages":"317","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"318","usedDeprecatedRules":"172"},{"filePath":"319","messages":"320","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"321","usedDeprecatedRules":"172"},{"filePath":"322","messages":"323","errorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":"324","usedDeprecatedRules":"172"},{"filePath":"325","messages":"326","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"172"},{"filePath":"327","messages":"328","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"172"},{"filePath":"329","messages":"330","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"331","usedDeprecatedRules":"172"},{"filePath":"332","messages":"333","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"172"},{"filePath":"334","messages":"335","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"172"},{"filePath":"336","messages":"337","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"172"},{"filePath":"338","messages":"339","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"172"},{"filePath":"340","messages":"341","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"172"},{"filePath":"342","messages":"343","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"344","usedDeprecatedRules":"172"},{"filePath":"345","messages":"346","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"172"},{"filePath":"347","messages":"348","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"172"},{"filePath":"349","messages":"350","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"351","usedDeprecatedRules":"172"},{"filePath":"352","messages":"353","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"172"},{"filePath":"354","messages":"355","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"172"},{"filePath":"356","messages":"357","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"172"},{"filePath":"358","messages":"359","errorCount":0,"warningCount":9,"fixableErrorCount":0,"fixableWarningCount":0,"source":"360","usedDeprecatedRules":"172"},{"filePath":"361","messages":"362","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"172"},{"filePath":"363","messages":"364","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"365","usedDeprecatedRules":"172"},{"filePath":"366","messages":"367","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"172"},{"filePath":"368","messages":"369","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"172"},{"filePath":"370","messages":"371","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"172"},{"filePath":"372","messages":"373","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"374","usedDeprecatedRules":"172"},{"filePath":"375","messages":"376","errorCount":0,"warningCount":16,"fixableErrorCount":0,"fixableWarningCount":0,"source":"377","usedDeprecatedRules":"172"},{"filePath":"378","messages":"379","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"172"},{"filePath":"380","messages":"381","errorCount":0,"warningCount":15,"fixableErrorCount":0,"fixableWarningCount":0,"source":"382","usedDeprecatedRules":"172"},"/home/muneeb/dev/diamond-tiles-frontend/src/index.js",[],["383","384","385","386","387"],"/home/muneeb/dev/diamond-tiles-frontend/src/App.js",[],"/home/muneeb/dev/diamond-tiles-frontend/src/store/index.js",[],"/home/muneeb/dev/diamond-tiles-frontend/src/store/reducers.js",[],"/home/muneeb/dev/diamond-tiles-frontend/src/jsx/index.js",["388","389","390","391","392"],"/home/muneeb/dev/diamond-tiles-frontend/src/store/auth/reducer.js",[],"/home/muneeb/dev/diamond-tiles-frontend/src/jsx/pages/Error404.js",[],"/home/muneeb/dev/diamond-tiles-frontend/src/jsx/pages/employees/EmployeeActions.js",["393","394","395","396","397","398","399","400","401","402","403","404","405","406"],"import useUrlState from '@ahooksjs/use-url-state';\nimport { useDebounce } from 'ahooks';\nimport { useFormik } from 'formik';\nimport Button from 'jsx/components/Button';\nimport Pagination from 'jsx/components/Pagination';\nimport SpinnerOverlay from 'jsx/components/SpinnerOverlay';\nimport { get, patch, post, useAlert, useMutation, useQuery } from 'jsx/helpers';\nimport PageTItle from 'jsx/layouts/PageTitle';\nimport React, { useEffect, useMemo, useState } from 'react';\nimport { ButtonGroup, Card, Table, OverlayTrigger, Popover } from 'react-bootstrap';\nimport { AiFillCaretLeft, AiFillSave, AiOutlineQuestionCircle } from 'react-icons/ai';\nimport { FaSort, FaSortDown, FaSortUp } from 'react-icons/fa';\nimport { Else, If, Then, When } from 'react-if';\nimport { useHistory, useParams } from 'react-router-dom';\nimport _ from 'lodash';\n\nconst EmployeeActions = () => {\n   const history = useHistory();\n   const params = useParams();\n   const [employee, setEmployee] = useState(null);\n   const [isError, setIsError] = useState(false);\n   const [page, setPage] = useState(1);\n   const [limit, setLimit] = useState(5);\n   const [sort, setSort] = useState({ field: null, order: 1 });\n   const [search, setSearch] = useState('');\n   const debouncedSearchValue = useDebounce(search, { wait: 500 });\n\n   const [urlState, setUrlState] = useUrlState({});\n\n   const alert = useAlert();\n   const isEditing = useMemo(() => urlState?.type === 'edit', [urlState.type]);\n   const isViewEmployee = useMemo(() => urlState?.type === 'view', [urlState.type]);\n   const isAddEmployee = useMemo(() => params?.id === 'add', [params.id]);\n\n   const query = useQuery(['employee', params.id], () => get(`/employees/id/${params.id}`), {\n      enabled: !isAddEmployee,\n      onError: (err) => {\n         setIsError(true);\n         alert.setErrorAlert({\n            message: 'Invalid URL!',\n            err: { message: ['The page will redirect to manage employees.'] },\n            callback: () => history.push('/employees'),\n            duration: 3000,\n         });\n      },\n   });\n   const patchMutation = useMutation((payload) => patch(`/employees/id/${params.id}`, payload), {\n      onSuccess: () => {\n         history.push('/employees');\n      },\n      onError: (err) => {\n         alert.setErrorAlert({\n            message: 'Unable to edit employee.',\n            err,\n         });\n      },\n   });\n\n   const postMutation = useMutation((payload) => post('/employees', payload), {\n      onSuccess: () => {\n         history.push('/employees');\n      },\n      onError: (err) => {\n         alert.setErrorAlert({ message: 'Unable to add employee', err });\n      },\n   });\n\n   const mutation = useMemo(() => (isEditing ? patchMutation : postMutation), [isEditing, patchMutation, postMutation]);\n\n   if (!isEditing && !isViewEmployee && !isAddEmployee) {\n      history.push('/employees');\n   }\n\n   const formik = useFormik({\n      initialValues: {\n         name: isEditing ? employee?.name : '',\n         phone: isEditing ? employee?.phone : '',\n         cnic: isEditing ? employee?.cnic : '',\n         address: isEditing ? employee?.address : '',\n         salary: isEditing ? employee?.salary : '',\n      },\n      validateOnChange: false,\n      validateOnBlur: false,\n      onSubmit: (values) => {\n         mutation.mutate(values);\n      },\n   });\n   const handleSort = (key) => {\n      setSort((prev) => ({ field: key, order: prev.order * -1 }));\n   };\n   useEffect(() => {\n      if (isEditing && query.data) {\n         formik.setFieldValue('name', query.data?.employee?.name ?? '');\n         formik.setFieldValue('phone', query.data?.employee?.phone ?? '');\n         formik.setFieldValue('cnic', query.data?.employee?.cnic ?? '');\n         formik.setFieldValue('address', query.data?.employee?.address ?? '');\n         formik.setFieldValue('salary', query.data?.employee?.salary ?? '');\n      }\n   }, [isEditing, query.data]);\n   useEffect(() => {\n      if (page > query.data?.sales?.totalPages) {\n         setPage((prev) => prev - 1);\n      }\n   }, [page, query.data?.sales?.totalPages]);\n   return (\n      <>\n         <PageTItle activeMenu=\"employees\" motherMenu=\"Manage\" />\n         {alert.getAlert()}\n         <Card>\n            <When condition={patchMutation.isLoading || postMutation.isLoading || query.isLoading}>\n               <SpinnerOverlay />\n            </When>\n            <If condition={isAddEmployee || isEditing}>\n               <Then>\n                  <form onSubmit={formik.handleSubmit}>\n                     <Card.Header>\n                        <Card.Title>{isEditing ? 'Edit Employee' : 'Add New Employee'}</Card.Title>\n                     </Card.Header>\n                     <Card.Body>\n                        <div className=\"row\">\n                           <div className=\"form-group col-xl-6\">\n                              <label className=\"col-form-label\">Name</label>\n                              <input\n                                 className=\"form-control\"\n                                 onChange={formik.handleChange}\n                                 type=\"text\"\n                                 name=\"name\"\n                                 disabled={isError}\n                                 value={formik.values.name}\n                              />\n                           </div>\n                        </div>\n                        <div className=\"row\">\n                           <div className=\"form-group col-xl-6\">\n                              <label className=\"col-form-label\">Phone</label>\n                              <input\n                                 className=\"form-control\"\n                                 onChange={formik.handleChange}\n                                 type=\"text\"\n                                 name=\"phone\"\n                                 disabled={isError}\n                                 value={formik.values.phone}\n                              />\n                           </div>\n                        </div>\n                        <div className=\"row\">\n                           <div className=\"form-group col-xl-6\">\n                              <label className=\"col-form-label\">CNIC</label>\n                              <input\n                                 className=\"form-control\"\n                                 onChange={formik.handleChange}\n                                 type=\"text\"\n                                 name=\"cnic\"\n                                 disabled={isError}\n                                 value={formik.values.cnic}\n                              />\n                           </div>\n                        </div>\n                        <div className=\"row\">\n                           <div className=\"form-group col-xl-6\">\n                              <label className=\"col-form-label\">Address</label>\n                              <input\n                                 className=\"form-control\"\n                                 onChange={formik.handleChange}\n                                 type=\"text\"\n                                 name=\"address\"\n                                 disabled={isError}\n                                 value={formik.values.address}\n                              />\n                           </div>\n                        </div>\n                        <div className=\"row\">\n                           <div className=\"form-group col-xl-6\">\n                              <label className=\"col-form-label\">Salary</label>\n                              <input\n                                 className=\"form-control\"\n                                 onChange={formik.handleChange}\n                                 type=\"text\"\n                                 name=\"salary\"\n                                 disabled={isError}\n                                 value={formik.values.salary}\n                              />\n                           </div>\n                        </div>\n                     </Card.Body>\n                     <Card.Footer>\n                        <div className=\"row\">\n                           <div className=\"col-xl-12 tw-justify-center\">\n                              <ButtonGroup>\n                                 <Button\n                                    icon={AiFillCaretLeft}\n                                    variant=\"warning light\"\n                                    onClick={() => history.replace('/employees')}\n                                    loading={mutation.isLoading}\n                                 >\n                                    Back\n                                 </Button>\n                                 <Button\n                                    icon={AiFillSave}\n                                    variant=\"primary\"\n                                    type=\"submit\"\n                                    loading={mutation.isLoading}\n                                    disabled={isError}\n                                 >\n                                    Save\n                                 </Button>\n                              </ButtonGroup>\n                           </div>\n                        </div>\n                     </Card.Footer>\n                  </form>\n               </Then>\n               <Else>\n                  <Card.Header>\n                     <Card.Title>View Employee</Card.Title>\n                  </Card.Header>\n                  <Card.Body>\n                     <div className=\"row\">\n                        <div className=\"form-group col-xl-6\">\n                           <label className=\"col-form-label\">Name</label>\n                           <h4>{query.data?.employee?.name}</h4>\n                        </div>\n                     </div>\n                     <div className=\"row\">\n                        <div className=\"form-group col-xl-6\">\n                           <label className=\"col-form-label\">Phone</label>\n                           <h4>{query.data?.employee?.phone}</h4>\n                        </div>\n                     </div>\n                     <div className=\"row\">\n                        <div className=\"form-group col-xl-6\">\n                           <label className=\"col-form-label\">CNIC</label>\n                           <h4>{query.data?.employee?.cnic}</h4>\n                        </div>\n                     </div>\n                     <div className=\"row\">\n                        <div className=\"form-group col-xl-6\">\n                           <label className=\"col-form-label\">Address</label>\n                           <h4>{query.data?.employee?.address}</h4>\n                        </div>\n                     </div>\n                     <div className=\"row\">\n                        <div className=\"form-group col-xl-6\">\n                           <label className=\"col-form-label\">Salary</label>\n                           <h4>{query.data?.employee?.salary}</h4>\n                        </div>\n                     </div>\n                  </Card.Body>\n                  <Card.Footer>\n                     <div className=\"row\">\n                        <div className=\"col-xl-12 tw-justify-center\">\n                           <Button\n                              icon={AiFillCaretLeft}\n                              variant=\"warning light\"\n                              onClick={() => history.replace('/employees')}\n                              loading={mutation.isLoading}\n                           >\n                              Back\n                           </Button>\n                        </div>\n                     </div>\n                  </Card.Footer>\n               </Else>\n            </If>\n         </Card>\n         {/* <When condition={isViewEmployee}>\n            <Card>\n               <When condition={query.isLoading}>\n                  <SpinnerOverlay />\n               </When>\n               <Card.Header>\n                  <Card.Title>View Related Salaries</Card.Title>\n               </Card.Header>\n               <Card.Body>\n                  <If condition={query.data?.salaries?.totalDocs > 0}>\n                     <Then>\n                        <Table className=\"tw-relative\" responsive>\n                           <thead>\n                              <tr>\n                                 <th className=\"width80\">\n                                    <strong>#</strong>\n                                 </th>\n                                 <th>\n                                    <strong className=\"tw-cursor-pointer\" onClick={() => handleSort('salary')}>\n                                       SALARY\n                                       <span>\n                                          <When condition={sort.field !== 'salary'}>\n                                             <FaSort className=\"d-inline mx-1\" />\n                                          </When>\n                                          <When condition={sort.field === 'salary' && sort.order === -1}>\n                                             <FaSortDown className=\"d-inline mx-1\" />\n                                          </When>\n                                          <When condition={sort.field === 'salary' && sort.order === 1}>\n                                             <FaSortUp className=\"d-inline mx-1\" />\n                                          </When>\n                                       </span>\n                                    </strong>\n                                 </th>\n                              </tr>\n                           </thead>\n                           <tbody>\n                              {query.data?.salaries?.docs?.map((e, index) => (\n                                 <tr key={`${e._id}`}>\n                                    <td>\n                                       <strong>{index + 1}</strong>\n                                    </td>\n                                    {/* <td>{e?.employee?.name ?? 'N/A'}</td> */}\n         {/* <td>{e?.employee?.salary ?? 'N/A'}</td>\n                                 </tr>\n                              ))}\n                           </tbody>\n                        </Table>\n                     </Then>\n                     <Else>\n                        <When condition={!query.isLoading}>\n                           <p className=\"tw-m-0\">No Salaries created</p>\n                        </When>\n                     </Else>\n                  </If>\n               </Card.Body>\n            </Card>\n         </When> */}\n\n         <When condition={limit > 5 ? true : query.data?.salaries?.totalPages > 1}>\n            <Pagination\n               page={page}\n               onPageChange={setPage}\n               onLimitChange={setLimit}\n               {..._.omit(query.data?.salaries, ['docs'])}\n               isLimitDisabled={query.isLoading}\n            />\n         </When>\n      </>\n   );\n};\n\nexport default EmployeeActions;\n","/home/muneeb/dev/diamond-tiles-frontend/src/jsx/pages/Registration.js",["407"],"import { post } from 'jsx/helpers';\r\nimport React, { useState } from 'react';\r\nimport { Link, useHistory } from 'react-router-dom';\r\nimport { When } from 'react-if';\r\nimport SpinnerOverlay from 'jsx/components/SpinnerOverlay';\r\n\r\nconst Register = () => {\r\n   const history = useHistory();\r\n\r\n   const [registrationData, setRegistrationData] = useState({});\r\n   const [isLoading, setIsLoading] = useState(false);\r\n   const handleBlur = (e) => {\r\n      const newRegistrationData = { ...registrationData };\r\n      newRegistrationData[e.target.name] = e.target.value;\r\n      setRegistrationData(newRegistrationData);\r\n   };\r\n   const handleRegister = async (e) => {\r\n      e.preventDefault();\r\n      setIsLoading(true);\r\n      try {\r\n         const res = await post('/auth/register', registrationData);\r\n         setIsLoading(false);\r\n         // localStorage.setItem('auth_token', res.token);\r\n         history.push('/page-login');\r\n      } catch (err) {\r\n         setIsLoading(false);\r\n         alert(err.response?.data?.data ?? err.message);\r\n      }\r\n   };\r\n   return (\r\n      <>\r\n         <When condition={isLoading}>\r\n            <SpinnerOverlay />\r\n         </When>\r\n         <div className=\"authincation\">\r\n            <div className=\"container p-0\">\r\n               <div className=\"row justify-content-center align-items-center tw-h-screen\">\r\n                  <div className=\"col-lg-6 col-md-9\">\r\n                     <div className=\"authincation-content\">\r\n                        <div className=\"row no-gutters\">\r\n                           <div className=\"col-xl-12\">\r\n                              <div className=\"auth-form\">\r\n                                 <h4 className=\"text-center mb-4\">Sign up your account</h4>\r\n                                 <form action=\"\" onSubmit={handleRegister}>\r\n                                    <div className=\"form-group\">\r\n                                       <label className=\"mb-1\" htmlFor=\"registration-username\">\r\n                                          <strong>Username</strong>\r\n                                       </label>\r\n                                       <input\r\n                                          id=\"registration-username\"\r\n                                          type=\"text\"\r\n                                          className=\"form-control\"\r\n                                          name=\"name\"\r\n                                          onChange={handleBlur}\r\n                                       />\r\n                                    </div>\r\n                                    {/* <div className=\"form-group\">\r\n                                    <label className=\"mb-1\" htmlFor=\"registration-email\">\r\n                                       <strong>Email</strong>\r\n                                    </label>\r\n                                    <input\r\n                                       id=\"registration-email\"\r\n                                       type=\"email\"\r\n                                       className=\"form-control\"\r\n                                       placeholder=\"hello@example.com\"\r\n                                       name=\"Email\"\r\n                                       onChange={handleBlur}\r\n                                    />\r\n                                 </div> */}\r\n                                    <div className=\"form-group\">\r\n                                       <label className=\"mb-1\" htmlFor=\"registration-password\">\r\n                                          <strong>Password</strong>\r\n                                       </label>\r\n                                       <input\r\n                                          id=\"registration-password\"\r\n                                          type=\"password\"\r\n                                          className=\"form-control\"\r\n                                          name=\"password\"\r\n                                          onChange={handleBlur}\r\n                                       />\r\n                                    </div>\r\n                                    <div className=\"form-group\">\r\n                                       <label className=\"mb-1\" htmlFor=\"registration-password\">\r\n                                          <strong>Password</strong>\r\n                                       </label>\r\n                                       <input\r\n                                          id=\"registration-password\"\r\n                                          type=\"password\"\r\n                                          className=\"form-control\"\r\n                                          name=\"passwordConfirm\"\r\n                                          onChange={handleBlur}\r\n                                       />\r\n                                    </div>\r\n                                    <div className=\"text-center mt-4\">\r\n                                       <button type=\"submit\" className=\"btn btn-primary btn-block\">\r\n                                          Sign me up\r\n                                       </button>\r\n                                    </div>\r\n                                 </form>\r\n                                 <div className=\"new-account mt-3\">\r\n                                    <p>\r\n                                       Already have an account?{' '}\r\n                                       <Link className=\"text-primary\" to=\"/page-login\">\r\n                                          Sign in\r\n                                       </Link>\r\n                                    </p>\r\n                                 </div>\r\n                              </div>\r\n                           </div>\r\n                        </div>\r\n                     </div>\r\n                  </div>\r\n               </div>\r\n            </div>\r\n         </div>\r\n      </>\r\n   );\r\n};\r\n\r\nexport default Register;\r\n","/home/muneeb/dev/diamond-tiles-frontend/src/jsx/pages/expenses/ExpenseActions.js",["408","409","410","411","412"],"import useUrlState from '@ahooksjs/use-url-state';\nimport { useDebounce } from 'ahooks';\nimport dayjs from 'dayjs';\nimport relativeTime from 'dayjs/plugin/relativeTime';\nimport { useFormik } from 'formik';\nimport Button from 'jsx/components/Button';\nimport SpinnerOverlay from 'jsx/components/SpinnerOverlay';\nimport { get, post, useAlert, useMutation, useQuery } from 'jsx/helpers';\nimport PageTItle from 'jsx/layouts/PageTitle';\nimport React, { useMemo, useState } from 'react';\nimport { ButtonGroup, Card } from 'react-bootstrap';\nimport { AiFillCaretLeft, AiFillSave } from 'react-icons/ai';\nimport { Else, If, Then, When } from 'react-if';\nimport { useQueryClient } from 'react-query';\nimport { useHistory, useParams } from 'react-router-dom';\nimport CreatableSelect from '../../components/CreatableSelect';\n\nconst ExpenseActions = () => {\n   dayjs.extend(relativeTime);\n\n   const history = useHistory();\n   const params = useParams();\n   const [isError, setIsError] = useState(false);\n   const [page, setPage] = useState(1);\n   const [limit, setLimit] = useState(5);\n   const [sort, setSort] = useState({ field: null, order: -1 });\n   const [search, setSearch] = useState('');\n   const debouncedSearchValue = useDebounce(search, { wait: 500 });\n\n   const [urlState, setUrlState] = useUrlState({});\n\n   const alert = useAlert();\n   const getTypes = useQuery('expenses/types', () => get('/expenses/types', 1, 999));\n   const queryClient = useQueryClient();\n\n   const isView = useMemo(() => urlState?.type === 'view', [urlState.type]);\n   const isAdd = useMemo(() => params?.id === 'add', [params.id]);\n\n   const query = useQuery(\n      ['expenses', params.id, page, limit, sort.field, sort.order, debouncedSearchValue],\n      () => get(`/expenses/id/${params.id}`, page, limit, sort.field, sort.order, debouncedSearchValue),\n      {\n         enabled: !isAdd,\n         onError: (err) => {\n            setIsError(true);\n            alert.setErrorAlert({\n               message: 'Invalid URL!',\n               err: { message: ['The page will redirect to manage expenses.'] },\n               callback: () => history.push('/expenses'),\n               duration: 3000,\n            });\n         },\n      }\n   );\n\n   const postMutation = useMutation((payload) => post('/expenses', payload), {\n      onSuccess: () => {\n         history.push('/expenses');\n      },\n      onError: (err) => {\n         alert.setErrorAlert({ message: 'Unable to add product', err });\n      },\n   });\n   const postTypeMutation = useMutation((payload) => post('/expenses/types', payload), {\n      onSuccess: async () => {\n         await queryClient.invalidateQueries('expenses/types');\n      },\n   });\n\n   const mutation = useMemo(() => postMutation, [postMutation]);\n\n   if (!isView && !isAdd) {\n      history.push('/expenses');\n   }\n\n   const formik = useFormik({\n      initialValues: {\n         title: '',\n         amount: '',\n         type: '',\n         comments: '',\n      },\n      validateOnChange: false,\n      validateOnBlur: false,\n      onSubmit: (values) => {\n         mutation.mutate(values);\n      },\n   });\n\n   const handleCreateType = async (title) => {\n      postTypeMutation.mutate({ title });\n      // history.push({ pathname: '/types', search: `?action=add&title=${title}&redirect=/products/add` });\n   };\n   return (\n      <>\n         <div className=\"row p-0 m-0\">\n            <div className=\"col-10\">\n               <PageTItle activeMenu=\"View\" motherMenu=\"Products\" />\n            </div>\n            <div className=\"col-1\">\n               <Button\n                  icon={AiFillCaretLeft}\n                  variant=\"warning light\"\n                  onClick={() => history.goBack()}\n                  loading={mutation.isLoading}\n               >\n                  Back\n               </Button>\n            </div>\n         </div>\n         {alert.getAlert()}\n         <Card>\n            <When condition={getTypes.isLoading || postTypeMutation.isLoading || query.isLoading}>\n               <SpinnerOverlay />\n            </When>\n            <If condition={isAdd}>\n               <Then>\n                  <form onSubmit={formik.handleSubmit}>\n                     <Card.Header>\n                        <Card.Title>Add New Expense</Card.Title>\n                     </Card.Header>\n                     <Card.Body>\n                        <div className=\"row\">\n                           <div className=\"form-group col-xl-6\">\n                              <label className=\"col-form-label\">Title</label>\n                              <input\n                                 className=\"form-control\"\n                                 onChange={formik.handleChange}\n                                 type=\"text\"\n                                 name=\"title\"\n                                 disabled={isError}\n                                 value={formik.values.title}\n                              />\n                           </div>\n                        </div>\n                        <div className=\"row\">\n                           <div className=\"form-group col-xl-6\">\n                              <label className=\"col-form-label\">Amount</label>\n                              <input\n                                 className=\"form-control\"\n                                 onChange={formik.handleChange}\n                                 type=\"text\"\n                                 name=\"amount\"\n                                 disabled={isError}\n                                 value={formik.values.amount}\n                              />\n                           </div>\n                        </div>\n                        <div className=\"row\">\n                           <div className=\"form-group col-xl-6\">\n                              <label className=\"col-form-label\">Comments</label>\n                              <input\n                                 className=\"form-control\"\n                                 onChange={formik.handleChange}\n                                 type=\"text\"\n                                 name=\"comments\"\n                                 disabled={isError}\n                                 value={formik.values.comments}\n                              />\n                           </div>\n                        </div>\n                        <div className=\"row\">\n                           <div className=\"form-group col-xl-6\">\n                              <label className=\"col-form-label\">Type</label>\n                              {isAdd && (\n                                 <CreatableSelect\n                                    isClearable\n                                    onChange={(e) => formik.setFieldValue('type', e?._id)}\n                                    options={\n                                       getTypes.data?.length > 0 &&\n                                       getTypes.data.map((e) => ({ ...e, label: e.title, value: e.title }))\n                                    }\n                                    onCreateOption={handleCreateType}\n                                 />\n                              )}\n                           </div>\n                        </div>\n                     </Card.Body>\n                     <Card.Footer>\n                        <div className=\"row\">\n                           <div className=\"col-xl-12 tw-justify-center\">\n                              <ButtonGroup>\n                                 {/* <Button\n                                    icon={AiFillCaretLeft}\n                                    variant=\"warning light\"\n                                    onClick={() => history.replace('/products')}\n                                    loading={mutation.isLoading}\n                                 >\n                                    Back\n                                 </Button> */}\n                                 <Button\n                                    icon={AiFillSave}\n                                    variant=\"primary\"\n                                    type=\"submit\"\n                                    loading={mutation.isLoading}\n                                    disabled={isError}\n                                 >\n                                    Save\n                                 </Button>\n                              </ButtonGroup>\n                           </div>\n                        </div>\n                     </Card.Footer>\n                  </form>\n               </Then>\n               <Else>\n                  <Card.Header>\n                     <Card.Title>View product</Card.Title>\n                  </Card.Header>\n                  <Card.Body>\n                     <div className=\"row\">\n                        <div className=\"form-group col-xl-6\">\n                           <label className=\"col-form-label\">Title</label>\n                           <h4>{query.data?.title ?? 'N/A'}</h4>\n                        </div>\n                     </div>\n                     <div className=\"row\">\n                        <div className=\"form-group col-xl-6\">\n                           <label className=\"col-form-label\">Amount</label>\n                           <h4>{query.data?.amount ?? 'N/A'}</h4>\n                        </div>\n                     </div>\n                     <div className=\"row\">\n                        <div className=\"form-group col-xl-6\">\n                           <label className=\"col-form-label\">Type</label>\n                           <h4>{query.data?.type?.title ?? 'N/A'}</h4>\n                        </div>\n                     </div>\n                     <div className=\"row\">\n                        <div className=\"form-group col-xl-6\">\n                           <label className=\"col-form-label\">Comments</label>\n                           <h4>{query.data?.comments ?? 'N/A'}</h4>\n                        </div>\n                     </div>\n                  </Card.Body>\n               </Else>\n            </If>\n         </Card>\n      </>\n   );\n};\n\nexport default ExpenseActions;\n","/home/muneeb/dev/diamond-tiles-frontend/src/jsx/pages/purchase/AddPurchase.js",["413","414","415","416","417","418","419"],"/* eslint-disable react/no-this-in-sfc */\nimport Button from 'jsx/components/Button';\nimport ModalWrapper from 'jsx/components/ModalWrapper';\nimport SpinnerOverlay from 'jsx/components/SpinnerOverlay';\nimport { get, getV2, post, useAlert, useMutation, useQuery } from 'jsx/helpers';\nimport PageTItle from 'jsx/layouts/PageTitle';\nimport React, { useMemo, useRef, useState } from 'react';\nimport { ButtonGroup, Card, Table } from 'react-bootstrap';\nimport { AiFillCaretLeft, AiFillSave } from 'react-icons/ai';\nimport { FaMinusCircle, FaPlusCircle } from 'react-icons/fa';\nimport { Else, If, Then, When } from 'react-if';\nimport { useHistory } from 'react-router-dom';\nimport { setProductsData, setProductsVisibility, setSuppliersData, setSuppliersVisibility } from 'store/actions';\nimport { batch, useDispatch } from 'react-redux';\nimport cls from 'classnames';\nimport _ from 'lodash';\nimport produce from 'immer';\nimport CreatableSelect from '../../components/CreatableSelect';\n\nconst PurchaseActions = () => {\n   const history = useHistory();\n\n   const alert = useAlert();\n   const dispatch = useDispatch();\n\n   const [purchase, setPurchase] = useState({\n      supplier: null,\n      paid: '',\n      products: [{ product: null, sourcePrice: '', variants: { a: '', b: '', c: '', d: '' }, quantity: '' }],\n   });\n\n   const suppliers = useQuery('all-suppliers', () =>\n      getV2('/suppliers', { page: 1, limit: 1000, search: '', sort: { name: 1 } })\n   );\n   const unitsQuery = useQuery(['units'], () => get('/units', 1, 10000, ''));\n   const products = useQuery('all-products', () =>\n      getV2('/products', { page: 1, limit: 1000, search: '', sort: { modelNumber: 1 } })\n   );\n\n   const mutation = useMutation((payload) => post('/purchases', payload), {\n      onSuccess: () => {\n         history.replace('/purchase');\n      },\n      onError: (err) => {\n         alert.setErrorAlert({ message: 'Unable to add Purchase', err });\n      },\n   });\n\n   const handleChangeProduct = (key, value, index) => {\n      const updatedPurchase = produce(purchase, (draft) => {\n         draft.products[index][key] = value;\n      });\n      setPurchase(updatedPurchase);\n   };\n\n   const handleChangeVariantQuantity = (key, value, index) => {\n      const updatedPurchase = produce(purchase, (draft) => {\n         draft.products[index].variants[key] = value;\n      });\n      setPurchase(updatedPurchase);\n   };\n\n   const handleAddProduct = () => {\n      const updatedPurchase = produce(purchase, (draft) => {\n         draft.products.push({\n            product: null,\n            sourcePrice: '',\n            variants: { a: '', b: '', c: '', d: '' },\n            quantity: '',\n         });\n      });\n      setPurchase(updatedPurchase);\n   };\n\n   const handleRemoveProduct = (productIndex) => {\n      const updatedPurchase = produce(purchase, (draft) => {\n         draft.products.splice(productIndex, 1);\n      });\n      setPurchase(updatedPurchase);\n   };\n\n   const handleSubmit = (e) => {\n      e.preventDefault();\n\n      const payload = produce(purchase, (draft) => {\n         draft.supplier = draft.supplier?._id;\n\n         const referenceProducts = _.cloneDeep(draft.products);\n\n         const updatedProducts = [];\n\n         referenceProducts.forEach((referenceProduct, index) => {\n            // product & price is must\n            if (referenceProduct.product && referenceProduct.sourcePrice !== '') {\n               const processedProduct = {};\n               // send only product _id to backend\n               processedProduct.product = referenceProduct.product._id;\n               processedProduct.sourcePrice = Number(referenceProduct.sourcePrice);\n\n               if (referenceProduct.quantity) {\n                  processedProduct.quantity = referenceProduct.quantity;\n               } else if (referenceProduct.variants) {\n                  const variants = _.cloneDeep(referenceProduct.variants);\n\n                  // delete empty variants\n                  Object.entries(variants).forEach(([key, value]) => {\n                     if (!value) delete variants[key];\n                  });\n\n                  if (Object.keys(variants).length > 0) processedProduct.variants = variants;\n               }\n\n               if (processedProduct.variants || processedProduct.quantity) updatedProducts.push(processedProduct);\n            }\n         });\n\n         draft.products = updatedProducts;\n      });\n\n      const { supplier, paid } = payload;\n      const messages = [];\n\n      if (!supplier) messages.push('Please enter a supplier');\n      if (!paid) messages.push('Please enter the paid amount');\n      if (!payload.products.length) messages.push('Please enter product(s)');\n\n      if (messages.length) {\n         alert.setErrorAlert({\n            messages: 'Unable to add new purchase',\n            err: { response: { data: { data: messages } } },\n         });\n         return;\n      }\n\n      mutation.mutate(payload);\n   };\n\n   return (\n      <>\n         <When condition={mutation.isLoading || unitsQuery.isLoading || products.isLoading || suppliers.isLoading}>\n            <SpinnerOverlay />\n         </When>\n         <PageTItle activeMenu=\"Add New Purchase\" motherMenu=\"Manage\" />\n         {alert.getAlert()}\n         <form onSubmit={handleSubmit}>\n            <Card>\n               <Card.Header>\n                  <Card.Title>Add New Purchase</Card.Title>\n               </Card.Header>\n               <Card.Body>\n                  <div className=\"row\">\n                     <div className=\"form-group col-xl-2\">\n                        <label className=\"col-form-label\">Supplier</label>\n                        <CreatableSelect\n                           value={\n                              purchase.supplier ? { label: purchase.supplier.name, value: purchase.supplier } : null\n                           }\n                           onChange={(supplier) => setPurchase((prev) => ({ ...prev, supplier: supplier.value }))}\n                           options={suppliers.data?.docs.map((supplier) => ({ label: supplier.name, value: supplier }))}\n                           onCreateOption={(name) =>\n                              batch(() => {\n                                 dispatch(setSuppliersData({ name }));\n                                 dispatch(setSuppliersVisibility(true));\n                              })\n                           }\n                        />\n                     </div>\n                     <div className=\"form-group col-xl-2\">\n                        <label className=\"col-form-label\">Paid</label>\n                        <input\n                           className=\"form-control\"\n                           onChange={(e) => setPurchase((prev) => ({ ...prev, paid: e.target.value }))}\n                           type=\"text\"\n                           name=\"paid\"\n                           value={purchase.paid}\n                        />\n                     </div>\n                     <div className=\"form-group tw-mt-[38px]\">\n                        <Button variant=\"primary\" onClick={handleAddProduct}>\n                           Add New Product\n                        </Button>\n                     </div>\n                  </div>\n               </Card.Body>\n            </Card>\n\n            <div className=\"tw-flex tw-flex-wrap tw-gap-4\">\n               {purchase.products.map((product, index) => (\n                  <Card className=\"tw-max-w-[350px] tw-min-h-[435px]\" key={`product-${index}`}>\n                     <Card.Body>\n                        <div className=\"form-group\">\n                           <label className=\"col-form-label\">Product</label>\n                           <CreatableSelect\n                              value={\n                                 purchase.products[index].product\n                                    ? {\n                                         label: purchase.products[index].product.modelNumber,\n                                         value: purchase.products[index].product,\n                                      }\n                                    : null\n                              }\n                              onChange={(p) => handleChangeProduct('product', p.value, index)}\n                              options={products.data?.docs.map((p) => ({\n                                 label: p.modelNumber,\n                                 value: p,\n                              }))}\n                              onCreateOption={(modelNumber) =>\n                                 batch(() => {\n                                    dispatch(setProductsData({ modelNumber }));\n                                    dispatch(setProductsVisibility(true));\n                                 })\n                              }\n                           />\n                        </div>\n                        <When condition={purchase.products[index].product}>\n                           <If condition={purchase.products[index].product?.type.title.toLowerCase() !== 'tile'}>\n                              <Then>\n                                 <div className=\"form-group\">\n                                    <label className=\"col-form-label\">Quantity</label>\n                                    <input\n                                       className=\"form-control\"\n                                       onChange={(e) => handleChangeProduct('quantity', e.target.value, index)}\n                                       type=\"text\"\n                                       name=\"modelNumber\"\n                                       value={purchase.products[index].quantity}\n                                    />\n                                 </div>\n                              </Then>\n                              <Else>\n                                 <div className=\"form-group\">\n                                    <label className=\"col-form-label\">Quantity</label>\n                                    <div className=\"row tw-px-4\">\n                                       <div className=\"col-xl-3 tw-p-0\">\n                                          <input\n                                             className=\"form-control\"\n                                             onChange={(e) => handleChangeVariantQuantity('a', e.target.value, index)}\n                                             type=\"text\"\n                                             name=\"modelNumber\"\n                                             placeholder=\"A\"\n                                             // disabled={isError}\n                                             value={purchase.products[index].variants.a}\n                                          />\n                                       </div>\n                                       <div className=\"col-xl-3 tw-p-0\">\n                                          <input\n                                             className=\"form-control\"\n                                             onChange={(e) => handleChangeVariantQuantity('b', e.target.value, index)}\n                                             type=\"text\"\n                                             name=\"modelNumber\"\n                                             placeholder=\"B\"\n                                             // disabled={isError}\n                                             value={purchase.products[index].variants.b}\n                                          />\n                                       </div>\n                                       <div className=\"col-xl-3 tw-p-0\">\n                                          <input\n                                             className=\"form-control\"\n                                             onChange={(e) => handleChangeVariantQuantity('c', e.target.value, index)}\n                                             type=\"text\"\n                                             name=\"modelNumber\"\n                                             placeholder=\"C\"\n                                             // disabled={isError}\n                                             value={purchase.products[index].variants.c}\n                                          />\n                                       </div>\n                                       <div className=\"col-xl-3 tw-p-0\">\n                                          <input\n                                             className=\"form-control\"\n                                             onChange={(e) => handleChangeVariantQuantity('d', e.target.value, index)}\n                                             type=\"text\"\n                                             name=\"modelNumber\"\n                                             placeholder=\"D\"\n                                             // disabled={isError}\n                                             value={purchase.products[index].variants.d}\n                                          />\n                                       </div>\n                                    </div>\n                                 </div>\n                              </Else>\n                           </If>\n                        </When>\n                        <div className={cls('form-group', { 'tw-mt-[126px]': !purchase.products[index].product })}>\n                           <label className=\"col-form-label\">Price</label>\n                           <input\n                              className=\"form-control\"\n                              onChange={(e) => handleChangeProduct('sourcePrice', e.target.value, index)}\n                              type=\"number\"\n                              name=\"modelNumber\"\n                              value={purchase.products[index].sourcePrice}\n                           />\n                        </div>\n                        <When condition={index > 0}>\n                           <Button\n                              variant=\"danger\"\n                              className=\"tw-w-full tw-flex tw-justify-center\"\n                              onClick={() => handleRemoveProduct(index)}\n                           >\n                              Remove\n                           </Button>\n                        </When>\n                     </Card.Body>\n                  </Card>\n               ))}\n            </div>\n\n            <Card>\n               <Card.Footer>\n                  <div className=\"row\">\n                     <div className=\"col-xl-12 tw-justify-center\">\n                        <ButtonGroup>\n                           <Button\n                              icon={AiFillCaretLeft}\n                              variant=\"warning light\"\n                              onClick={() => history.replace('/purchase')}\n                              loading={mutation.isLoading}\n                           >\n                              Back\n                           </Button>\n                           <Button icon={AiFillSave} variant=\"primary\" type=\"submit\" loading={mutation.isLoading}>\n                              Save\n                           </Button>\n                        </ButtonGroup>\n                     </div>\n                  </div>\n               </Card.Footer>\n            </Card>\n         </form>\n      </>\n   );\n};\n\nexport default PurchaseActions;\n","/home/muneeb/dev/diamond-tiles-frontend/src/jsx/pages/sale/AddSale.js",["420","421","422","423","424","425","426","427","428"],"/* eslint-disable react/no-this-in-sfc */\nimport Button from 'jsx/components/Button';\nimport ModalWrapper from 'jsx/components/ModalWrapper';\nimport SpinnerOverlay from 'jsx/components/SpinnerOverlay';\nimport { get, getV2, post, useAlert, useMutation, useQuery } from 'jsx/helpers';\nimport PageTItle from 'jsx/layouts/PageTitle';\nimport React, { useMemo, useRef, useState } from 'react';\nimport { ButtonGroup, Card, Table } from 'react-bootstrap';\nimport { AiFillCaretLeft, AiFillSave } from 'react-icons/ai';\nimport { FaMinusCircle, FaPlusCircle } from 'react-icons/fa';\nimport { Else, If, Then, When } from 'react-if';\nimport { useHistory } from 'react-router-dom';\nimport {\n   setCustomersData,\n   setCustomersVisibility,\n   setProductsData,\n   setProductsVisibility,\n   setSuppliersData,\n   setSuppliersVisibility,\n} from 'store/actions';\nimport { batch, useDispatch } from 'react-redux';\nimport cls from 'classnames';\nimport _ from 'lodash';\nimport produce from 'immer';\nimport CreatableSelect from '../../components/CreatableSelect';\n\nconst AddSale = () => {\n   const history = useHistory();\n\n   const alert = useAlert();\n   const dispatch = useDispatch();\n\n   const [sale, setSale] = useState({\n      customer: null,\n      paid: '',\n      products: [\n         { product: null, sourcePrice: '', retailPrice: '', variants: { a: '', b: '', c: '', d: '' }, quantity: '' },\n      ],\n   });\n\n   const customers = useQuery('all-customers', () =>\n      getV2('/customers', { page: 1, limit: 1000, search: '', sort: { name: 1 } })\n   );\n   const inventories = useQuery('all-inventories', () =>\n      getV2('/inventories', { page: 1, limit: 1000, search: '', sort: { 'product.modelNumber': 1 } })\n   );\n\n   const mutation = useMutation((payload) => post('/sales', payload), {\n      onSuccess: () => {\n         history.replace('/sale');\n      },\n      onError: (err) => {\n         alert.setErrorAlert({ message: 'Unable to add Sale', err });\n      },\n   });\n\n   const handleChangeProduct = (key, value, index) => {\n      const updatedSale = produce(sale, (draft) => {\n         draft.products[index][key] = value;\n      });\n      setSale(updatedSale);\n   };\n\n   const handleChangeVariantQuantity = (key, value, index) => {\n      const updatedSale = produce(sale, (draft) => {\n         draft.products[index].variants[key] = value;\n      });\n      setSale(updatedSale);\n   };\n\n   const handleAddProduct = () => {\n      const updatedSale = produce(sale, (draft) => {\n         draft.products.push({\n            product: null,\n            sourcePrice: '',\n            retailPrice: '',\n            variants: { a: '', b: '', c: '', d: '' },\n            quantity: '',\n         });\n      });\n      setSale(updatedSale);\n   };\n\n   const handleRemoveProduct = (productIndex) => {\n      const updatedSale = produce(sale, (draft) => {\n         draft.products.splice(productIndex, 1);\n      });\n      setSale(updatedSale);\n   };\n\n   const handleSubmit = (e) => {\n      e.preventDefault();\n\n      const payload = produce(sale, (draft) => {\n         draft.customer = draft.customer?._id;\n\n         const referenceProducts = _.cloneDeep(draft.products);\n\n         const updatedProducts = [];\n\n         referenceProducts.forEach((referenceProduct) => {\n            // product & price is must\n            if (\n               referenceProduct.product &&\n               referenceProduct.sourcePrice !== '' &&\n               referenceProduct.retailPrice !== ''\n            ) {\n               const processedProduct = {};\n               // send only product _id to backend\n               processedProduct.product = referenceProduct.product._id;\n               processedProduct.sourcePrice = Number(referenceProduct.sourcePrice);\n               processedProduct.retailPrice = Number(referenceProduct.retailPrice);\n\n               if (referenceProduct.quantity) {\n                  processedProduct.quantity = referenceProduct.quantity;\n               } else if (referenceProduct.variants) {\n                  const variants = _.cloneDeep(referenceProduct.variants);\n\n                  // delete empty variants\n                  Object.entries(variants).forEach(([key, value]) => {\n                     if (!value) delete variants[key];\n                  });\n\n                  if (Object.keys(variants).length > 0) processedProduct.variants = variants;\n               }\n\n               if (processedProduct.variants || processedProduct.quantity) updatedProducts.push(processedProduct);\n            }\n         });\n\n         draft.products = updatedProducts;\n      });\n\n      const { customer, paid } = payload;\n      const messages = [];\n\n      if (!customer) messages.push('Please enter a customer');\n      if (!paid) messages.push('Please enter the paid amount');\n      if (!payload.products.length) messages.push('Please enter product(s)');\n\n      if (messages.length) {\n         alert.setErrorAlert({\n            messages: 'Unable to add new sale',\n            err: { response: { data: { data: messages } } },\n         });\n         return;\n      }\n\n      mutation.mutate(payload);\n   };\n\n   return (\n      <>\n         <When condition={mutation.isLoading || inventories.isLoading || customers.isLoading}>\n            <SpinnerOverlay />\n         </When>\n         <PageTItle activeMenu=\"Add New Sale\" motherMenu=\"Manage\" />\n         {alert.getAlert()}\n         <form onSubmit={handleSubmit}>\n            <Card>\n               <Card.Header>\n                  <Card.Title>Add New Sale</Card.Title>\n               </Card.Header>\n               <Card.Body>\n                  <div className=\"row\">\n                     <div className=\"form-group col-xl-2\">\n                        <label className=\"col-form-label\">Customer</label>\n                        <CreatableSelect\n                           value={sale.customer ? { label: sale.customer.name, value: sale.customer } : null}\n                           onChange={(customer) => setSale((prev) => ({ ...prev, customer: customer.value }))}\n                           options={customers.data?.docs.map((customer) => ({ label: customer.name, value: customer }))}\n                           onCreateOption={(name) =>\n                              batch(() => {\n                                 dispatch(setCustomersData({ name }));\n                                 dispatch(setCustomersVisibility(true));\n                              })\n                           }\n                        />\n                     </div>\n                     <div className=\"form-group col-xl-2\">\n                        <label className=\"col-form-label\">Paid</label>\n                        <input\n                           className=\"form-control\"\n                           onChange={(e) => setSale((prev) => ({ ...prev, paid: e.target.value }))}\n                           type=\"text\"\n                           name=\"paid\"\n                           value={sale.paid}\n                        />\n                     </div>\n                     <div className=\"form-group tw-mt-[38px]\">\n                        <Button variant=\"primary\" onClick={handleAddProduct}>\n                           Add New Product\n                        </Button>\n                     </div>\n                  </div>\n               </Card.Body>\n            </Card>\n\n            <div className=\"tw-flex tw-flex-wrap tw-gap-4\">\n               {sale.products.map((saleProduct, index) => (\n                  <Card className=\"tw-max-w-[350px] tw-min-h-[435px]\" key={`product-${index}`}>\n                     <Card.Body>\n                        <div className=\"form-group\">\n                           <label className=\"col-form-label\">Product</label>\n                           <CreatableSelect\n                              value={\n                                 saleProduct.product\n                                    ? {\n                                         label: saleProduct.product.modelNumber,\n                                         value: saleProduct.product,\n                                      }\n                                    : null\n                              }\n                              onChange={(p) => handleChangeProduct('product', p.value, index)}\n                              options={inventories.data?.docs.map((i) => ({\n                                 label: i.product.modelNumber,\n                                 value: i.product,\n                              }))}\n                              onCreateOption={(modelNumber) =>\n                                 batch(() => {\n                                    dispatch(setProductsData({ modelNumber }));\n                                    dispatch(setProductsVisibility(true));\n                                 })\n                              }\n                           />\n                        </div>\n                        <When condition={saleProduct.product}>\n                           <If condition={saleProduct.product?.type.title.toLowerCase() !== 'tile'}>\n                              <Then>\n                                 <div className=\"form-group\">\n                                    <label className=\"col-form-label\">Quantity</label>\n                                    <input\n                                       className=\"form-control\"\n                                       onChange={(e) => handleChangeProduct('quantity', e.target.value, index)}\n                                       type=\"text\"\n                                       value={saleProduct.quantity}\n                                    />\n                                 </div>\n                              </Then>\n                              <Else>\n                                 <div className=\"form-group\">\n                                    <label className=\"col-form-label\">Quantity</label>\n                                    <div className=\"row tw-px-4\">\n                                       <div className=\"col-xl-3 tw-p-0\">\n                                          <input\n                                             className=\"form-control\"\n                                             onChange={(e) => handleChangeVariantQuantity('a', e.target.value, index)}\n                                             type=\"text\"\n                                             placeholder=\"A\"\n                                             value={saleProduct.variants.a}\n                                          />\n                                       </div>\n                                       <div className=\"col-xl-3 tw-p-0\">\n                                          <input\n                                             className=\"form-control\"\n                                             onChange={(e) => handleChangeVariantQuantity('b', e.target.value, index)}\n                                             type=\"text\"\n                                             placeholder=\"B\"\n                                             value={saleProduct.variants.b}\n                                          />\n                                       </div>\n                                       <div className=\"col-xl-3 tw-p-0\">\n                                          <input\n                                             className=\"form-control\"\n                                             onChange={(e) => handleChangeVariantQuantity('c', e.target.value, index)}\n                                             type=\"text\"\n                                             placeholder=\"C\"\n                                             value={saleProduct.variants.c}\n                                          />\n                                       </div>\n                                       <div className=\"col-xl-3 tw-p-0\">\n                                          <input\n                                             className=\"form-control\"\n                                             onChange={(e) => handleChangeVariantQuantity('d', e.target.value, index)}\n                                             type=\"text\"\n                                             placeholder=\"D\"\n                                             value={saleProduct.variants.d}\n                                          />\n                                       </div>\n                                    </div>\n                                 </div>\n                              </Else>\n                           </If>\n                        </When>\n                        <div className={cls('form-group', { 'tw-mt-[126px]': !saleProduct.product })}>\n                           <label className=\"col-form-label\">Source Price</label>\n                           <input\n                              className=\"form-control\"\n                              onChange={(e) => handleChangeProduct('sourcePrice', e.target.value, index)}\n                              type=\"number\"\n                              value={saleProduct.sourcePrice}\n                           />\n                        </div>\n                        <div className=\"form-group\">\n                           <label className=\"col-form-label\">Retail Price</label>\n                           <input\n                              className=\"form-control\"\n                              onChange={(e) => handleChangeProduct('retailPrice', e.target.value, index)}\n                              type=\"number\"\n                              value={saleProduct.retailPrice}\n                           />\n                        </div>\n                        <When condition={index > 0}>\n                           <Button\n                              variant=\"danger\"\n                              className=\"tw-w-full tw-flex tw-justify-center\"\n                              onClick={() => handleRemoveProduct(index)}\n                           >\n                              Remove\n                           </Button>\n                        </When>\n                     </Card.Body>\n                  </Card>\n               ))}\n            </div>\n\n            <Card>\n               <Card.Footer>\n                  <div className=\"row\">\n                     <div className=\"col-xl-12 tw-justify-center\">\n                        <ButtonGroup>\n                           <Button\n                              icon={AiFillCaretLeft}\n                              variant=\"warning light\"\n                              onClick={() => history.replace('/sale')}\n                              loading={mutation.isLoading}\n                           >\n                              Back\n                           </Button>\n                           <Button icon={AiFillSave} variant=\"primary\" type=\"submit\" loading={mutation.isLoading}>\n                              Save\n                           </Button>\n                        </ButtonGroup>\n                     </div>\n                  </div>\n               </Card.Footer>\n            </Card>\n         </form>\n      </>\n   );\n};\n\nexport default AddSale;\n","/home/muneeb/dev/diamond-tiles-frontend/src/jsx/pages/types/TypeActions.js",["429","430","431","432","433","434","435","436"],"import { useDebounce } from 'ahooks';\nimport Button from 'jsx/components/Button';\nimport SpinnerOverlay from 'jsx/components/SpinnerOverlay';\nimport { get, useAlert, useQuery } from 'jsx/helpers';\nimport PageTItle from 'jsx/layouts/PageTitle';\nimport React, { useState, useEffect } from 'react';\nimport { Card, ButtonGroup, Table, OverlayTrigger, Popover } from 'react-bootstrap';\nimport { When, If, Else, Then } from 'react-if';\nimport { useHistory, useParams } from 'react-router-dom';\nimport dayjs from 'dayjs';\nimport relativeTime from 'dayjs/plugin/relativeTime';\n\nimport {\n   AiFillDelete,\n   AiFillEdit,\n   AiFillEye,\n   AiFillPlusCircle,\n   AiOutlineQuestionCircle,\n   AiFillCaretLeft,\n} from 'react-icons/ai';\nimport { FaSort, FaSortDown, FaSortUp } from 'react-icons/fa';\n\nconst TypeActions = () => {\n   dayjs.extend(relativeTime);\n\n   const history = useHistory();\n   const params = useParams();\n   const [page, setPage] = useState(1);\n   const [limit, setLimit] = useState(5);\n   const [sort, setSort] = useState({ field: null, order: -1 });\n   const [search, setSearch] = useState('');\n   const debouncedSearchValue = useDebounce(search, { wait: 500 });\n   const alert = useAlert();\n\n   const query = useQuery(\n      ['type', params.id, page, limit, sort.field, sort.order, debouncedSearchValue],\n      () => get(`/types/id/${params.id}`, page, limit, sort.field, sort.order, debouncedSearchValue),\n      {\n         onError: (err) => {\n            alert.setErrorAlert({\n               message: 'Invalid URL!',\n               err: { message: ['The page will redirect to manage products.'] },\n               callback: () => history.push('/products'),\n               duration: 3000,\n            });\n         },\n      }\n   );\n\n   const handleOnClickEdit = (obj) => {\n      history.push({ pathname: `/products/${obj._id}`, search: `?type=edit` });\n   };\n\n   const handleOnClickView = (obj) => {\n      history.push({ pathname: `/products/${obj._id}`, search: `?type=view` });\n   };\n   const handleOnClickAdd = () => {\n      history.push('/products/add');\n   };\n\n   const handleSort = (key) => {\n      setSort((prev) => ({ field: key, order: prev.order * -1 }));\n   };\n\n   useEffect(() => {\n      if (page > query.data?.totalPages) {\n         setPage((prev) => prev - 1);\n      }\n   }, [page, query.data?.totalPages]);\n   return (\n      <>\n         <div className=\"row p-0 m-0\">\n            <div className=\"col-10\">\n               <PageTItle activeMenu=\"Type\" motherMenu=\"Products\" />\n            </div>\n            <div className=\"col-1\">\n               <Button\n                  icon={AiFillCaretLeft}\n                  variant=\"warning light\"\n                  onClick={() => history.goBack()}\n                  loading={query.isLoading}\n               >\n                  Back\n               </Button>\n            </div>\n         </div>\n         {alert.getAlert()}\n         <div className=\"row mb-3\">\n            <div className=\"col-xl-5 my-2\">\n               <Card className=\"h-100\">\n                  <When condition={query.isLoading}>\n                     <SpinnerOverlay />\n                  </When>\n\n                  <Card.Header>\n                     <Card.Title>View Type</Card.Title>\n                  </Card.Header>\n                  <Card.Body>\n                     <div className=\"row\">\n                        <div className=\"form-group col-xl-6\">\n                           <label className=\"col-form-label\">Title</label>\n                           <h4>{query.data?.type?.title ?? 'N/A'}</h4>\n                        </div>\n                     </div>\n                  </Card.Body>\n               </Card>\n            </div>\n            <div className=\"col-xl-7 my-2\">\n               <Card className=\"h-100\">\n                  <When condition={query.isLoading}>\n                     <SpinnerOverlay />\n                  </When>\n\n                  <Card.Header>\n                     <Card.Title>View Units</Card.Title>\n                  </Card.Header>\n                  <Card.Body>\n                     <Table className=\"tw-relative\" responsive>\n                        <thead>\n                           <tr>\n                              <th className=\"width80\">\n                                 <strong>#</strong>\n                              </th>\n                              <th>\n                                 <strong className=\"tw-cursor-pointer\">TITLE</strong>\n                              </th>\n                              <th>\n                                 <strong className=\"tw-cursor-pointer\">VALUE</strong>\n                              </th>\n                           </tr>\n                        </thead>\n                        <tbody>\n                           {query.data?.units?.map((e, index) => (\n                              <tr key={`${e._id}`}>\n                                 <td>\n                                    <strong>{index + 1}</strong>\n                                 </td>\n                                 <td>{e.title}</td>\n                                 <td>{e.value}</td>\n                                 <td>\n                                    <OverlayTrigger\n                                       trigger={['hover', 'hover']}\n                                       placement=\"top\"\n                                       overlay={\n                                          <Popover className=\"tw-border-gray-500\">\n                                             <Popover.Content>{`Created by ${e.createdBy ?? 'N/A'} ${\n                                                dayjs(e.createdAt).diff(dayjs(), 'day', true) > 7\n                                                   ? `at ${dayjs(e.createdAt).format('DD-MMM-YYYY')}`\n                                                   : dayjs(e.createdAt).fromNow()\n                                             }.`}</Popover.Content>\n                                          </Popover>\n                                       }\n                                    >\n                                       <AiOutlineQuestionCircle className=\"tw-cursor-pointer\" />\n                                    </OverlayTrigger>\n                                 </td>\n                              </tr>\n                           ))}\n                        </tbody>\n                     </Table>\n                  </Card.Body>\n               </Card>\n            </div>\n         </div>\n\n         {/* VIEW PRODUCTS */}\n         <Card>\n            <When condition={query.isLoading}>\n               <SpinnerOverlay />\n            </When>\n            <Card.Header>\n               <Card.Title>View Products</Card.Title>\n               <ButtonGroup className=\"tw-float-right\">\n                  <input\n                     type=\"text\"\n                     className=\"input-rounded tw-pl-6 tw-shadow-inner tw-ring-1 py-1\"\n                     placeholder=\"Search products...\"\n                     onChange={(e) => setSearch(e.target.value)}\n                  />\n               </ButtonGroup>\n            </Card.Header>\n            <Card.Body>\n               <If condition={query.data?.products?.totalDocs > 0}>\n                  <Then>\n                     <Table className=\"tw-relative\" responsive>\n                        <thead>\n                           <tr>\n                              <th className=\"width80\">\n                                 <strong>#</strong>\n                              </th>\n                              <th>\n                                 <strong className=\"tw-cursor-pointer\" onClick={() => handleSort('title')}>\n                                    TITLE\n                                    <span>\n                                       <When condition={sort.field !== 'title'}>\n                                          <FaSort className=\"d-inline mx-1\" />\n                                       </When>\n                                       <When condition={sort.field === 'title' && sort.order === -1}>\n                                          <FaSortDown className=\"d-inline mx-1\" />\n                                       </When>\n                                       <When condition={sort.field === 'title' && sort.order === 1}>\n                                          <FaSortUp className=\"d-inline mx-1\" />\n                                       </When>\n                                    </span>\n                                 </strong>\n                              </th>\n                              <th>\n                                 <strong className=\"tw-cursor-pointer\" onClick={() => handleSort('modelNumber')}>\n                                    MODEL#\n                                    <span>\n                                       <When condition={sort.field !== 'modelNumber'}>\n                                          <FaSort className=\"d-inline mx-1\" />\n                                       </When>\n                                       <When condition={sort.field === 'modelNumber' && sort.order === -1}>\n                                          <FaSortDown className=\"d-inline mx-1\" />\n                                       </When>\n                                       <When condition={sort.field === 'modelNumber' && sort.order === 1}>\n                                          <FaSortUp className=\"d-inline mx-1\" />\n                                       </When>\n                                    </span>\n                                 </strong>\n                              </th>\n                              <th>\n                                 <strong className=\"tw-cursor-pointer\" onClick={() => handleSort('type')}>\n                                    TYPE\n                                    <span>\n                                       <When condition={sort.field !== 'type'}>\n                                          <FaSort className=\"d-inline mx-1\" />\n                                       </When>\n                                       <When condition={sort.field === 'type' && sort.order === -1}>\n                                          <FaSortDown className=\"d-inline mx-1\" />\n                                       </When>\n                                       <When condition={sort.field === 'type' && sort.order === 1}>\n                                          <FaSortUp className=\"d-inline mx-1\" />\n                                       </When>\n                                    </span>\n                                 </strong>\n                              </th>\n                           </tr>\n                        </thead>\n                        <tbody>\n                           {query.data?.products?.docs.map((e, index) => (\n                              <tr key={`${e._id}`}>\n                                 <td>\n                                    <strong>{query.data?.products?.pagingCounter * (index + 1)}</strong>\n                                 </td>\n                                 <td>{e.title}</td>\n                                 <td>{e.modelNumber}</td>\n                                 <td>{(e.type && e.type?.title) ?? 'N/A'}</td>\n                                 <td>\n                                    <OverlayTrigger\n                                       trigger={['hover', 'hover']}\n                                       placement=\"top\"\n                                       overlay={\n                                          <Popover className=\"tw-border-gray-500\">\n                                             <Popover.Content>{`Created by ${e.createdBy ?? 'N/A'} ${\n                                                dayjs(e.createdAt).diff(dayjs(), 'day', true) > 7\n                                                   ? `at ${dayjs(e.createdAt).format('DD-MMM-YYYY')}`\n                                                   : dayjs(e.createdAt).fromNow()\n                                             }.`}</Popover.Content>\n                                          </Popover>\n                                       }\n                                    >\n                                       <AiOutlineQuestionCircle className=\"tw-cursor-pointer\" />\n                                    </OverlayTrigger>\n                                 </td>\n                              </tr>\n                           ))}\n                        </tbody>\n                     </Table>\n                  </Then>\n                  <Else>\n                     <When condition={!query.isLoading && !debouncedSearchValue}>\n                        <p className=\"tw-m-0\">No products created</p>\n                     </When>\n                     <When condition={!query.isLoading && debouncedSearchValue}>\n                        <p className=\"tw-m-0\">No result found!</p>\n                     </When>\n                  </Else>\n               </If>\n            </Card.Body>\n         </Card>\n      </>\n   );\n};\n\nexport default TypeActions;\n","/home/muneeb/dev/diamond-tiles-frontend/src/jsx/helpers/enums.js",[],"/home/muneeb/dev/diamond-tiles-frontend/src/jsx/pages/Login.js",["437","438","439","440"],"import { api, get, post, useAlert } from 'jsx/helpers';\r\nimport React, { useState, useEffect } from 'react';\r\nimport { Link, useHistory } from 'react-router-dom';\r\nimport { When } from 'react-if';\r\nimport SpinnerOverlay from 'jsx/components/SpinnerOverlay';\r\nimport { connect } from 'react-redux';\r\nimport { userRoles } from 'jsx/helpers/enums';\r\nimport { setLogin } from '../../store/auth/actions';\r\n\r\nconst Login = (props) => {\r\n   const history = useHistory();\r\n   const [loginData, setLoginData] = useState({});\r\n   const [isLoading, setIsLoading] = useState(false);\r\n\r\n   const alert = useAlert();\r\n\r\n   const handleBlur = (e) => {\r\n      const newLoginData = { ...loginData };\r\n      newLoginData[e.target.name] = e.target.value;\r\n      setLoginData(newLoginData);\r\n   };\r\n\r\n   useEffect(() => {\r\n      setIsLoading(true);\r\n      const token = localStorage.getItem('auth_token');\r\n      if (token) {\r\n         get(`auth/decode/${token}`)\r\n            .then((decode) => {\r\n               props.setLogin({ ...decode, auth_token: token });\r\n               localStorage.setItem('auth_token', token);\r\n               setIsLoading(false);\r\n               if (decode?.isConfirmed) {\r\n                  // if (decode?.role === userRoles.CASHIER) {\r\n                  //    history.push('/purchase');\r\n                  // } else if (decode?.role === userRoles.ADMINISTRATOR) {\r\n                  //    history.push('/dashboard');\r\n                  // } else {\r\n                  //    alert.setErrorAlert({ message: 'Unable to login', err: 'Account not confirmed!' });\r\n                  // }\r\n                  history.push('/purchase');\r\n               } else {\r\n                  localStorage.clear();\r\n                  props.setLogin({});\r\n                  alert.setErrorAlert({ message: 'Unable to login', err: 'Account not confirmed!' });\r\n               }\r\n            })\r\n            .catch((err) => setIsLoading(false));\r\n      } else setIsLoading(false);\r\n   }, []);\r\n\r\n   const handleLogin = async (e) => {\r\n      e.preventDefault();\r\n      setIsLoading(true);\r\n      try {\r\n         const res = await api.post('/auth/login', loginData);\r\n         setIsLoading(false);\r\n         const decode = await get(`auth/decode/${res.data}`);\r\n         props.setLogin({ ...decode, auth_token: res.data });\r\n         localStorage.setItem('auth_token', res.data);\r\n         if (decode?.isConfirmed) {\r\n            // if (decode?.role === userRoles.CASHIER) {\r\n            //    history.push('/purchase');\r\n            // } else if (decode?.role === userRoles.ADMINISTRATOR) {\r\n            //    history.push('/dashboard');\r\n            // } else {\r\n            //    alert.setErrorAlert({ message: 'Unable to login', err: 'Account not confirmed!' });\r\n            // }\r\n            history.push('/purchase');\r\n         } else {\r\n            localStorage.clear();\r\n            props.setLogin({});\r\n            alert.setErrorAlert({ message: 'Unable to login', err: 'Account not confirmed!' });\r\n         }\r\n      } catch (err) {\r\n         setIsLoading(false);\r\n         alert.setErrorAlert({ message: 'Unable to login', err });\r\n      }\r\n   };\r\n\r\n   return (\r\n      <>\r\n         <When condition={isLoading}>\r\n            <SpinnerOverlay />\r\n         </When>\r\n         <div className=\"authincation\">\r\n            <div className=\"container p-0\">\r\n               <div className=\"row justify-content-center align-items-center tw-h-screen\">\r\n                  <div className=\"col-lg-6 col-md-9\">\r\n                     <div className=\"authincation-content\">\r\n                        <div className=\"row no-gutters\">\r\n                           <div className=\"col-xl-12\">\r\n                              <div className=\"auth-form\">\r\n                                 {alert.getAlert()}\r\n                                 <h4 className=\"text-center mb-4\">Sign in your account</h4>\r\n                                 <form action=\"\" onSubmit={handleLogin}>\r\n                                    <div className=\"form-group\">\r\n                                       <label className=\"mb-1\" htmlFor=\"login-email\">\r\n                                          <strong>Email</strong>\r\n                                       </label>\r\n                                       <input\r\n                                          id=\"login-email\"\r\n                                          type=\"text\"\r\n                                          className=\"form-control\"\r\n                                          name=\"name\"\r\n                                          onChange={handleBlur}\r\n                                       />\r\n                                    </div>\r\n                                    <div className=\"form-group\">\r\n                                       <label className=\"mb-1\" htmlFor=\"login-password\">\r\n                                          <strong>Password</strong>\r\n                                       </label>\r\n                                       <input\r\n                                          id=\"login-password\"\r\n                                          type=\"password\"\r\n                                          className=\"form-control\"\r\n                                          name=\"password\"\r\n                                          onChange={handleBlur}\r\n                                       />\r\n                                    </div>\r\n                                    <div className=\"form-row d-flex justify-content-between mt-4 mb-2\">\r\n                                       <div className=\"form-group\">\r\n                                          <Link to=\"/page-forgot-password\">Forgot Password?</Link>\r\n                                       </div>\r\n                                    </div>\r\n                                    <div className=\"text-center\">\r\n                                       <button type=\"submit\" className=\"btn btn-primary btn-block\">\r\n                                          Sign Me In\r\n                                       </button>\r\n                                    </div>\r\n                                 </form>\r\n                                 <div className=\"new-account mt-3\">\r\n                                    <p>\r\n                                       Don't have an account?{' '}\r\n                                       <Link className=\"text-primary\" to=\"/page-register\">\r\n                                          Sign up\r\n                                       </Link>\r\n                                    </p>\r\n                                 </div>\r\n                              </div>\r\n                           </div>\r\n                        </div>\r\n                     </div>\r\n                  </div>\r\n               </div>\r\n            </div>\r\n         </div>\r\n      </>\r\n   );\r\n};\r\n\r\nconst mapStateToProps = ({ auth }) => ({});\r\n\r\nconst mapDispatchToProps = (dispatch) => ({\r\n   setLogin: (payload) => dispatch(setLogin(payload)),\r\n});\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(Login);\r\n","/home/muneeb/dev/diamond-tiles-frontend/src/jsx/pages/customers/CustomerActions.js",["441","442","443","444","445","446"],"import useUrlState from '@ahooksjs/use-url-state';\nimport { useFormik } from 'formik';\nimport Button from 'jsx/components/Button';\nimport SpinnerOverlay from 'jsx/components/SpinnerOverlay';\nimport { get, patch, post, useAlert, useMutation, useQuery } from 'jsx/helpers';\nimport PageTItle from 'jsx/layouts/PageTitle';\nimport React, { useEffect, useMemo, useState } from 'react';\nimport { ButtonGroup, Card, OverlayTrigger, Popover, Table } from 'react-bootstrap';\nimport { AiFillCaretLeft, AiFillSave, AiOutlineQuestionCircle } from 'react-icons/ai';\nimport { FaSort, FaSortDown, FaSortUp } from 'react-icons/fa';\nimport { Else, If, Then, When } from 'react-if';\nimport { useHistory, useParams } from 'react-router-dom';\nimport dayjs from 'dayjs';\nimport relativeTime from 'dayjs/plugin/relativeTime';\nimport { useDebounce } from 'ahooks';\nimport Pagination from 'jsx/components/Pagination';\nimport _ from 'lodash';\nimport { connect } from 'react-redux';\nimport { userRoles } from 'jsx/helpers/enums';\n\nconst CustomerActions = (props) => {\n   dayjs.extend(relativeTime);\n\n   const history = useHistory();\n   const params = useParams();\n   const [customer, setCustomer] = useState(null);\n   const [isError, setIsError] = useState(false);\n\n   const [urlState, setUrlState] = useUrlState({});\n   const [page, setPage] = useState(1);\n   const [limit, setLimit] = useState(5);\n   const [sort, setSort] = useState({ field: null, order: 1 });\n   const [search, setSearch] = useState('');\n   const debouncedSearchValue = useDebounce(search, { wait: 500 });\n\n   const alert = useAlert();\n   const isEditing = useMemo(\n      () => props.user?.role !== userRoles.CASHIER && urlState?.type === 'edit',\n      [urlState.type]\n   );\n   const isViewCustomer = useMemo(() => urlState?.type === 'view', [urlState.type]);\n   const isAddCustomer = useMemo(() => params?.id === 'add', [params.id]);\n\n   const query = useQuery(\n      ['customer', params.id, page, limit, sort.field, sort.order, debouncedSearchValue],\n      () => get(`/customers/id/${params.id}`, page, limit, sort.field, sort.order, debouncedSearchValue),\n      {\n         enabled: !isAddCustomer,\n         onError: (err) => {\n            setIsError(true);\n            alert.setErrorAlert({\n               message: 'Invalid URL!',\n               err: { message: ['The page will redirect to manage customers.'] },\n               callback: () => history.push('/customers'),\n               duration: 3000,\n            });\n         },\n      }\n   );\n   const patchMutation = useMutation((payload) => patch(`/customers/id/${params.id}`, payload), {\n      onSuccess: () => {\n         history.push('/customers');\n      },\n      onError: (err) => {\n         alert.setErrorAlert({\n            message: 'Unable to edit customer.',\n            err,\n         });\n      },\n   });\n\n   const postMutation = useMutation((payload) => post('/customers', payload), {\n      onSuccess: () => {\n         history.push('/customers');\n      },\n      onError: (err) => {\n         alert.setErrorAlert({ message: 'Unable to add customer', err });\n      },\n   });\n\n   const mutation = useMemo(() => (isEditing ? patchMutation : postMutation), [isEditing, patchMutation, postMutation]);\n\n   if (!isEditing && !isViewCustomer && !isAddCustomer) {\n      history.push('/customers');\n   }\n\n   const formik = useFormik({\n      initialValues: { name: isEditing ? customer?.name : '', phone: isEditing ? customer?.phone : '' },\n      validateOnChange: false,\n      validateOnBlur: false,\n      onSubmit: (values) => {\n         mutation.mutate(values);\n      },\n   });\n   const handleSort = (key) => {\n      setSort((prev) => ({ field: key, order: prev.order * -1 }));\n   };\n   useEffect(() => {\n      if (isEditing && query.data) {\n         formik.setFieldValue('name', query.data?.customer?.name ?? '');\n         formik.setFieldValue('phone', query.data?.customer?.phone ?? '');\n      }\n   }, [isEditing, query.data]);\n\n   useEffect(() => {\n      if (page > query.data?.sales?.totalPages) {\n         setPage((prev) => prev - 1);\n      }\n   }, [page, query.data?.sales?.totalPages]);\n\n   return (\n      <>\n         <PageTItle activeMenu=\"Customers\" motherMenu=\"Manage\" />\n         {alert.getAlert()}\n         <Card>\n            <When condition={patchMutation.isLoading || postMutation.isLoading || query.isLoading}>\n               <SpinnerOverlay />\n            </When>\n            <If condition={isAddCustomer || isEditing}>\n               <Then>\n                  <form onSubmit={formik.handleSubmit}>\n                     <Card.Header>\n                        <Card.Title>{isEditing ? 'Edit Customer' : 'Add New Customer'}</Card.Title>\n                     </Card.Header>\n                     <Card.Body>\n                        <div className=\"row\">\n                           <div className=\"form-group col-xl-6\">\n                              <label className=\"col-form-label\">Name</label>\n                              <input\n                                 className=\"form-control\"\n                                 onChange={formik.handleChange}\n                                 type=\"text\"\n                                 name=\"name\"\n                                 disabled={isError}\n                                 value={formik.values.name}\n                              />\n                           </div>\n                        </div>\n                        <div className=\"row\">\n                           <div className=\"form-group col-xl-6\">\n                              <label className=\"col-form-label\">Phone</label>\n                              <input\n                                 className=\"form-control\"\n                                 onChange={formik.handleChange}\n                                 type=\"text\"\n                                 name=\"phone\"\n                                 disabled={isError}\n                                 value={formik.values.phone}\n                              />\n                           </div>\n                        </div>\n                     </Card.Body>\n                     <Card.Footer>\n                        <div className=\"row\">\n                           <div className=\"col-xl-12 tw-justify-center\">\n                              <ButtonGroup>\n                                 <Button\n                                    icon={AiFillCaretLeft}\n                                    variant=\"warning light\"\n                                    onClick={() => history.replace('/customers')}\n                                    loading={mutation.isLoading}\n                                 >\n                                    Back\n                                 </Button>\n                                 <Button\n                                    icon={AiFillSave}\n                                    variant=\"primary\"\n                                    type=\"submit\"\n                                    loading={mutation.isLoading}\n                                    disabled={isError}\n                                 >\n                                    Save\n                                 </Button>\n                              </ButtonGroup>\n                           </div>\n                        </div>\n                     </Card.Footer>\n                  </form>\n               </Then>\n               <Else>\n                  <Card.Header>\n                     <Card.Title>View Customer</Card.Title>\n                  </Card.Header>\n                  <Card.Body>\n                     <div className=\"row\">\n                        <div className=\"form-group col-xl-6\">\n                           <label className=\"col-form-label\">Name</label>\n                           <h4>{query.data?.customer?.name ?? 'N/A'}</h4>\n                        </div>\n                     </div>\n                     <div className=\"row\">\n                        <div className=\"form-group col-xl-6\">\n                           <label className=\"col-form-label\">Phone</label>\n                           <h4>{query.data?.customer?.phone ?? 'N/A'}</h4>\n                        </div>\n                     </div>\n                  </Card.Body>\n                  <Card.Footer>\n                     <div className=\"row\">\n                        <div className=\"col-xl-12 tw-justify-center\">\n                           <Button\n                              icon={AiFillCaretLeft}\n                              variant=\"warning light\"\n                              onClick={() => history.replace('/customers')}\n                              loading={mutation.isLoading}\n                           >\n                              Back\n                           </Button>\n                        </div>\n                     </div>\n                  </Card.Footer>\n               </Else>\n            </If>\n         </Card>\n         <When condition={isViewCustomer}>\n            <Card>\n               <When condition={query.isLoading}>\n                  <SpinnerOverlay />\n               </When>\n               <Card.Header>\n                  <Card.Title>View Related Sales</Card.Title>\n               </Card.Header>\n               <Card.Body>\n                  <If condition={query.data?.sales?.totalDocs > 0}>\n                     <Then>\n                        <Table className=\"tw-relative\" responsive>\n                           <thead>\n                              <tr>\n                                 <th className=\"width80\">\n                                    <strong>#</strong>\n                                 </th>\n                                 <th>\n                                    <strong className=\"tw-cursor-pointer\" onClick={() => handleSort('customer')}>\n                                       Customer\n                                       <span>\n                                          <When condition={sort.field !== 'customer'}>\n                                             <FaSort className=\"d-inline mx-1\" />\n                                          </When>\n                                          <When condition={sort.field === 'customer' && sort.order === -1}>\n                                             <FaSortDown className=\"d-inline mx-1\" />\n                                          </When>\n                                          <When condition={sort.field === 'customer' && sort.order === 1}>\n                                             <FaSortUp className=\"d-inline mx-1\" />\n                                          </When>\n                                       </span>\n                                    </strong>\n                                 </th>\n                                 <th>\n                                    <strong className=\"tw-cursor-pointer\" onClick={() => handleSort('inventory')}>\n                                       Model Number\n                                       <span>\n                                          <When condition={sort.field !== 'inventory'}>\n                                             <FaSort className=\"d-inline mx-1\" />\n                                          </When>\n                                          <When condition={sort.field === 'inventory' && sort.order === -1}>\n                                             <FaSortDown className=\"d-inline mx-1\" />\n                                          </When>\n                                          <When condition={sort.field === 'inventory' && sort.order === 1}>\n                                             <FaSortUp className=\"d-inline mx-1\" />\n                                          </When>\n                                       </span>\n                                    </strong>\n                                 </th>\n                                 <th>\n                                    <strong className=\"tw-cursor-pointer\" onClick={() => handleSort('quantity')}>\n                                       Qty\n                                       <span>\n                                          <When condition={sort.field !== 'quantity'}>\n                                             <FaSort className=\"d-inline mx-1\" />\n                                          </When>\n                                          <When condition={sort.field === 'quantity' && sort.order === -1}>\n                                             <FaSortDown className=\"d-inline mx-1\" />\n                                          </When>\n                                          <When condition={sort.field === 'quantity' && sort.order === 1}>\n                                             <FaSortUp className=\"d-inline mx-1\" />\n                                          </When>\n                                       </span>\n                                    </strong>\n                                 </th>\n                                 <th>\n                                    <strong className=\"tw-cursor-pointer\" onClick={() => handleSort('retailPrice')}>\n                                       Total\n                                       <span>\n                                          <When condition={sort.field !== 'retailPrice'}>\n                                             <FaSort className=\"d-inline mx-1\" />\n                                          </When>\n                                          <When condition={sort.field === 'retailPrice' && sort.order === -1}>\n                                             <FaSortDown className=\"d-inline mx-1\" />\n                                          </When>\n                                          <When condition={sort.field === 'retailPrice' && sort.order === 1}>\n                                             <FaSortUp className=\"d-inline mx-1\" />\n                                          </When>\n                                       </span>\n                                    </strong>\n                                 </th>\n                                 <th>\n                                    <strong className=\"tw-cursor-pointer\" onClick={() => handleSort('paid')}>\n                                       Paid\n                                       <span>\n                                          <When condition={sort.field !== 'paid'}>\n                                             <FaSort className=\"d-inline mx-1\" />\n                                          </When>\n                                          <When condition={sort.field === 'paid' && sort.order === -1}>\n                                             <FaSortDown className=\"d-inline mx-1\" />\n                                          </When>\n                                          <When condition={sort.field === 'paid' && sort.order === 1}>\n                                             <FaSortUp className=\"d-inline mx-1\" />\n                                          </When>\n                                       </span>\n                                    </strong>\n                                 </th>\n                                 <th>\n                                    <strong>Remaining</strong>\n                                 </th>\n                              </tr>\n                           </thead>\n                           <tbody>\n                              {query.data?.sales &&\n                                 query.data?.sales?.docs.map((e, index) => {\n                                    const getRemainig = () => {\n                                       if (!e?.sourcePrice || !e?.paid) return null;\n                                       if (e.sourcePrice === e.paid) return null;\n                                       return e.sourcePrice - e.paid;\n                                    };\n                                    const getId = () => {\n                                       const id = e._id;\n                                       return id.slice(id.length - 3);\n                                    };\n                                    return (\n                                       <tr\n                                          key={`${e._id}`}\n                                          className={e.isRemaining && 'tw-bg-red-400 tw-text-gray-50'}\n                                       >\n                                          <td>\n                                             <strong>{getId()}</strong>\n                                          </td>\n                                          <td>{e?.customer?.name ?? 'N/A'}</td>\n                                          <td>{e?.inventory?.modelNumber ?? 'N/A'}</td>\n                                          <td>{e?.quantity ?? 'N/a'}</td>\n                                          <td>{e?.retailPrice ?? 'N/A'}</td>\n                                          <td>{e?.paid ?? 'N/A'}</td>\n                                          <td>{getRemainig()}</td>\n\n                                          <td>\n                                             <OverlayTrigger\n                                                trigger={['hover', 'hover']}\n                                                placement=\"top\"\n                                                overlay={\n                                                   <Popover className=\"tw-border-gray-500\">\n                                                      <Popover.Content>{`Created by ${e.createdBy ?? 'N/A'} ${\n                                                         dayjs(e.createdAt).diff(dayjs(), 'day', true) > 7\n                                                            ? `at ${dayjs(e.createdAt).format('DD-MMM-YYYY')}`\n                                                            : dayjs(e.createdAt).fromNow()\n                                                      }.`}</Popover.Content>\n                                                   </Popover>\n                                                }\n                                             >\n                                                <AiOutlineQuestionCircle className=\"tw-cursor-pointer\" />\n                                             </OverlayTrigger>\n                                          </td>\n                                       </tr>\n                                    );\n                                 })}\n                           </tbody>\n                        </Table>\n                     </Then>\n                     <Else>\n                        <When condition={!query.isLoading}>\n                           <p className=\"tw-m-0\">No Sales created</p>\n                        </When>\n                     </Else>\n                  </If>\n               </Card.Body>\n            </Card>\n         </When>\n         <When condition={limit > 5 ? true : query.data?.sales?.totalPages > 1}>\n            <Pagination\n               page={page}\n               onPageChange={setPage}\n               onLimitChange={setLimit}\n               {..._.omit(query.data?.sales, ['docs'])}\n               isLimitDisabled={query.isLoading}\n            />\n         </When>\n      </>\n   );\n};\n\nconst mapStateToProps = ({ auth }) => ({\n   user: auth.user,\n});\n\nconst mapDispatchToProps = {};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(CustomerActions);\n","/home/muneeb/dev/diamond-tiles-frontend/src/jsx/pages/products/ProductActions.js",["447","448","449","450","451","452","453","454","455"],"import useUrlState from '@ahooksjs/use-url-state';\nimport dayjs from 'dayjs';\nimport relativeTime from 'dayjs/plugin/relativeTime';\n\nimport { useFormik } from 'formik';\nimport Button from 'jsx/components/Button';\nimport Pagination from 'jsx/components/Pagination';\nimport Select from 'jsx/components/Select';\nimport SpinnerOverlay from 'jsx/components/SpinnerOverlay';\nimport { get, patch, post, useAlert, useMutation, useQuery } from 'jsx/helpers';\nimport { userRoles } from 'jsx/helpers/enums';\nimport PageTItle from 'jsx/layouts/PageTitle';\nimport _ from 'lodash';\nimport React, { useEffect, useMemo, useState } from 'react';\nimport { ButtonGroup, Card, OverlayTrigger, Popover, Table } from 'react-bootstrap';\nimport { AiFillCaretLeft, AiFillEye, AiFillSave, AiOutlineQuestionCircle } from 'react-icons/ai';\nimport { FaSort, FaSortDown, FaSortUp } from 'react-icons/fa';\nimport { Else, If, Then, When } from 'react-if';\nimport { useQueryClient } from 'react-query';\nimport { connect } from 'react-redux';\nimport { useHistory, useParams } from 'react-router-dom';\nimport CreatableSelect from '../../components/CreatableSelect';\n\nconst ProductActions = (props) => {\n   dayjs.extend(relativeTime);\n\n   const history = useHistory();\n   const params = useParams();\n   const [isError, setIsError] = useState(false);\n   const [salePage, setSalePage] = useState(1);\n   const [saleLimit, setSaleLimit] = useState(5);\n   const [saleSort, setSaleSort] = useState({ field: 'sourcePrice', order: 1 });\n   const [inventoriesPage, setInventoriesPage] = useState(1);\n   const [inventoriesLimit, setInventoriesLimit] = useState(5);\n   const [inventoriesSort, setInventoriesSort] = useState({ field: 'sourcePrice', order: 1 });\n\n   const [urlState, setUrlState] = useUrlState({});\n\n   const alert = useAlert();\n   const getTypes = useQuery('types', () => get('/types'));\n   const queryClient = useQueryClient();\n\n   const isEditing = useMemo(\n      () => props.user?.role !== userRoles.CASHIER && urlState?.type === 'edit',\n      [urlState.type]\n   );\n   const isViewProduct = useMemo(() => urlState?.type === 'view', [urlState.type]);\n   const isAddProduct = useMemo(() => params?.id === 'add', [params.id]);\n\n   const query = useQuery(\n      [\n         'product',\n         params.id,\n         salePage,\n         saleLimit,\n         saleSort.field,\n         saleSort.order,\n         inventoriesPage,\n         inventoriesLimit,\n         inventoriesSort.field,\n         inventoriesSort.order,\n      ],\n      () =>\n         get(\n            `/products/id/${params.id}?salePage=${salePage}&saleLimit=${saleLimit}&saleSort[${saleSort.field}]=${saleSort.order}&inventoriesPage=${inventoriesPage}&inventoriesLimit=${inventoriesLimit}&inventoriesSort[${inventoriesSort.field}]=${inventoriesSort.order}`\n         ),\n      {\n         enabled: !isAddProduct,\n         onError: (err) => {\n            setIsError(true);\n            alert.setErrorAlert({\n               message: 'Unable to view product',\n               err,\n               duration: 3000,\n            });\n         },\n      }\n   );\n\n   const patchMutation = useMutation((payload) => patch(`/products/id/${params.id}`, payload), {\n      onSuccess: () => {\n         history.push('/products');\n      },\n      onError: (err) => {\n         alert.setErrorAlert({\n            message: 'Unable to edit product.',\n            err,\n         });\n      },\n   });\n\n   const postMutation = useMutation((payload) => post('/products', payload), {\n      onSuccess: () => {\n         history.push('/products');\n      },\n      onError: (err) => {\n         alert.setErrorAlert({ message: 'Unable to add product', err });\n      },\n   });\n   const postTypeMutation = useMutation((payload) => post('/types', payload), {\n      onSuccess: async () => {\n         await queryClient.invalidateQueries('types');\n      },\n   });\n\n   const mutation = useMemo(() => (isEditing ? patchMutation : postMutation), [isEditing, patchMutation, postMutation]);\n\n   if (!isEditing && !isViewProduct && !isAddProduct) {\n      history.push('/products');\n   }\n\n   const formik = useFormik({\n      initialValues: {\n         modelNumber: '',\n         retailPrice: '',\n         type: '',\n         unit: '',\n      },\n      validateOnChange: false,\n      validateOnBlur: false,\n      onSubmit: (values) => {\n         console.log(values);\n         values.unit = values.unit.label;\n         mutation.mutate(values);\n      },\n   });\n\n   const units = useQuery(['units', formik.values.type], () =>\n      get(`/units?type=${formik.values.type}`, 1, 1000, null, 1, '')\n   );\n\n   console.log(formik.values.type);\n\n   const handleCreateType = async (title) => {\n      postTypeMutation.mutate({ title });\n      // history.push({ pathname: '/types', search: `?action=add&title=${title}&redirect=/products/add` });\n   };\n   const handleInventoriesSort = (key) => {\n      setInventoriesSort((prev) => ({ field: key, order: prev.order * -1 }));\n   };\n\n   useEffect(() => {\n      if (isEditing && query.data?.product) {\n         formik.setFieldValue('modelNumber', query.data?.product?.modelNumber ?? '');\n         formik.setFieldValue('retailPrice', query.data?.product?.retailPrice ?? '');\n         formik.setFieldValue('type', query.data?.product?.type?._id ?? '');\n\n         const unit = query.data?.product?.unit;\n\n         formik.setFieldValue('unit', unit ? { label: unit, value: unit } : {});\n      }\n   }, [isEditing, query.data?.product]);\n\n   // console.log(isEditing, units.data, formik.values.unit);\n\n   return (\n      <>\n         <div className=\"row p-0 m-0\">\n            <div className=\"col-10\">\n               <PageTItle activeMenu=\"View\" motherMenu=\"Products\" />\n            </div>\n            <div className=\"col-1\">\n               <Button\n                  icon={AiFillCaretLeft}\n                  variant=\"warning light\"\n                  onClick={() => history.replace('/products')}\n                  loading={mutation.isLoading}\n               >\n                  Back\n               </Button>\n            </div>\n         </div>\n         {alert.getAlert()}\n         <Card>\n            <When condition={getTypes.isLoading || postTypeMutation.isLoading || query.isLoading}>\n               <SpinnerOverlay />\n            </When>\n            <If condition={isAddProduct || isEditing}>\n               <Then>\n                  <form onSubmit={formik.handleSubmit}>\n                     <Card.Header>\n                        <Card.Title>{isEditing ? 'Edit Product' : 'Add New product'}</Card.Title>\n                     </Card.Header>\n                     <Card.Body>\n                        <div className=\"row\">\n                           <div className=\"form-group col-xl-6\">\n                              <label className=\"col-form-label\">Model Number</label>\n                              <input\n                                 className=\"form-control\"\n                                 onChange={formik.handleChange}\n                                 type=\"text\"\n                                 name=\"modelNumber\"\n                                 disabled={isError}\n                                 value={formik.values.modelNumber}\n                              />\n                           </div>\n                        </div>\n                        <div className=\"row\">\n                           <div className=\"form-group col-xl-6\">\n                              <label className=\"col-form-label\">Type</label>\n                              {(query.data?.product || isAddProduct) && (\n                                 <CreatableSelect\n                                    isClearable\n                                    defaultValue={\n                                       isEditing && {\n                                          _id: query.data?.product?.type?.id,\n                                          label: query.data?.product?.type?.title,\n                                          value: query.data?.product?.type?.title,\n                                       }\n                                    }\n                                    onChange={(e) => formik.setFieldValue('type', e?._id)}\n                                    options={\n                                       getTypes.data?.length > 0 &&\n                                       getTypes.data.map((e) => ({ ...e, label: e.title, value: e.title }))\n                                    }\n                                    onCreateOption={handleCreateType}\n                                 />\n                              )}\n                           </div>\n                        </div>\n                        <div className=\"row\">\n                           <div className=\"form-group col-xl-3\">\n                              <label className=\"col-form-label\">Retail Price</label>\n                              <input\n                                 style={{ height: '38px' }}\n                                 className=\"form-control\"\n                                 onChange={formik.handleChange}\n                                 type=\"text\"\n                                 name=\"retailPrice\"\n                                 disabled={isError}\n                                 value={formik.values.retailPrice}\n                              />\n                           </div>\n                           <div className=\"form-group col-xl-3\">\n                              <label className=\"col-form-label\">Unit</label>\n                              <Select\n                                 width=\"tw-w-full\"\n                                 onChange={(e) => formik.setFieldValue('unit', { label: e.label, value: e.label })}\n                                 value={formik.values.unit}\n                                 options={units.data?.map((e) => ({ label: e.title, value: e }))}\n                              />\n                           </div>\n                        </div>\n                     </Card.Body>\n                     <Card.Footer>\n                        <div className=\"row\">\n                           <div className=\"col-xl-12 tw-justify-center\">\n                              <ButtonGroup>\n                                 {/* <Button\n                                    icon={AiFillCaretLeft}\n                                    variant=\"warning light\"\n                                    onClick={() => history.replace('/products')}\n                                    loading={mutation.isLoading}\n                                 >\n                                    Back\n                                 </Button> */}\n                                 <Button\n                                    icon={AiFillSave}\n                                    variant=\"primary\"\n                                    type=\"submit\"\n                                    loading={mutation.isLoading}\n                                    disabled={isError}\n                                 >\n                                    Save\n                                 </Button>\n                              </ButtonGroup>\n                           </div>\n                        </div>\n                     </Card.Footer>\n                  </form>\n               </Then>\n               <Else>\n                  <Card.Header>\n                     <Card.Title>View product</Card.Title>\n                  </Card.Header>\n                  <Card.Body>\n                     <div className=\"row\">\n                        <div className=\"form-group col-xl-6\">\n                           <label className=\"col-form-label\">Model Number</label>\n                           <h4>{query.data?.product?.modelNumber ?? 'N/A'}</h4>\n                        </div>\n                     </div>\n                     <div className=\"row\">\n                        <div className=\"form-group col-xl-6\">\n                           <label className=\"col-form-label\">Retail Price</label>\n                           <h4>{query.data?.product?.retailPrice ?? 'N/A'}</h4>\n                        </div>\n                     </div>\n                     <div className=\"row\">\n                        <div className=\"form-group col-xl-6\">\n                           <label className=\"col-form-label\">Unit</label>\n                           <h4>{query.data?.product?.unit ?? 'N/A'}</h4>\n                        </div>\n                     </div>\n                     <div className=\"row\">\n                        <div className=\"form-group col-xl-6\">\n                           <label className=\"col-form-label\">Type</label>\n                           <h4>{query.data?.product?.type?.title ?? 'N/A'}</h4>\n                        </div>\n                     </div>\n                  </Card.Body>\n               </Else>\n            </If>\n         </Card>\n         <When condition={isViewProduct}>\n            <Card>\n               <When condition={query.isLoading}>\n                  <SpinnerOverlay />\n               </When>\n               <Card.Header>\n                  <Card.Title>View Related Purchases</Card.Title>\n               </Card.Header>\n               <Card.Body>\n                  <If condition={query.data?.inventories?.totalDocs > 0}>\n                     <Then>\n                        <Table className=\"tw-relative\" responsive>\n                           <thead>\n                              <tr>\n                                 <th className=\"width80\">\n                                    <strong>#</strong>\n                                 </th>\n                                 <th>\n                                    <strong\n                                       className=\"tw-cursor-pointer\"\n                                       onClick={() => handleInventoriesSort('supplier')}\n                                    >\n                                       SUPPLIER\n                                       <span>\n                                          <When condition={inventoriesSort.field !== 'supplier'}>\n                                             <FaSort className=\"d-inline mx-1\" />\n                                          </When>\n                                          <When\n                                             condition={\n                                                inventoriesSort.field === 'supplier' && inventoriesSort.order === -1\n                                             }\n                                          >\n                                             <FaSortDown className=\"d-inline mx-1\" />\n                                          </When>\n                                          <When\n                                             condition={\n                                                inventoriesSort.field === 'supplier' && inventoriesSort.order === 1\n                                             }\n                                          >\n                                             <FaSortUp className=\"d-inline mx-1\" />\n                                          </When>\n                                       </span>\n                                    </strong>\n                                 </th>\n                                 <th>\n                                    <strong\n                                       className=\"tw-cursor-pointer\"\n                                       onClick={() => handleInventoriesSort('modelNumber')}\n                                    >\n                                       MODEL NUMBER\n                                       <span>\n                                          <When condition={inventoriesSort.field !== 'modelNumber'}>\n                                             <FaSort className=\"d-inline mx-1\" />\n                                          </When>\n                                          <When\n                                             condition={\n                                                inventoriesSort.field === 'modelNumber' && inventoriesSort.order === -1\n                                             }\n                                          >\n                                             <FaSortDown className=\"d-inline mx-1\" />\n                                          </When>\n                                          <When\n                                             condition={\n                                                inventoriesSort.field === 'modelNumber' && inventoriesSort.order === 1\n                                             }\n                                          >\n                                             <FaSortUp className=\"d-inline mx-1\" />\n                                          </When>\n                                       </span>\n                                    </strong>\n                                 </th>\n                                 <th>\n                                    <strong\n                                       className=\"tw-cursor-pointer\"\n                                       onClick={() => handleInventoriesSort('sourcePrice')}\n                                    >\n                                       PRICE\n                                       <span>\n                                          <When condition={inventoriesSort.field !== 'sourcePrice'}>\n                                             <FaSort className=\"d-inline mx-1\" />\n                                          </When>\n                                          <When\n                                             condition={\n                                                inventoriesSort.field === 'sourcePrice' && inventoriesSort.order === -1\n                                             }\n                                          >\n                                             <FaSortDown className=\"d-inline mx-1\" />\n                                          </When>\n                                          <When\n                                             condition={\n                                                inventoriesSort.field === 'sourcePrice' && inventoriesSort.order === 1\n                                             }\n                                          >\n                                             <FaSortUp className=\"d-inline mx-1\" />\n                                          </When>\n                                       </span>\n                                    </strong>\n                                 </th>\n                                 <th>\n                                    <strong className=\"tw-cursor-pointer\" onClick={() => handleInventoriesSort('paid')}>\n                                       PAID\n                                       <span>\n                                          <When condition={inventoriesSort.field !== 'paid'}>\n                                             <FaSort className=\"d-inline mx-1\" />\n                                          </When>\n                                          <When\n                                             condition={\n                                                inventoriesSort.field === 'paid' && inventoriesSort.order === -1\n                                             }\n                                          >\n                                             <FaSortDown className=\"d-inline mx-1\" />\n                                          </When>\n                                          <When\n                                             condition={inventoriesSort.field === 'paid' && inventoriesSort.order === 1}\n                                          >\n                                             <FaSortUp className=\"d-inline mx-1\" />\n                                          </When>\n                                       </span>\n                                    </strong>\n                                 </th>\n                              </tr>\n                           </thead>\n                           <tbody>\n                              {query.data?.inventories?.docs.map((e, index) => (\n                                 <tr key={`${e._id}`} className={e.isRemaining && 'tw-bg-red-400 tw-text-gray-50'}>\n                                    <td>\n                                       <strong className={e.isRemaining && 'tw-text-gray-50'}>\n                                          {query.data.inventories?.pagingCounter * (index + 1)}\n                                       </strong>\n                                    </td>\n                                    <td>{e?.supplier?.name ?? 'N/A'}</td>\n                                    <td>{e?.product?.modelNumber ?? 'N/A'}</td>\n                                    <td>{e?.sourcePrice ?? 'N/a'}</td>\n                                    <td>{e?.paid ?? 'N/A'}</td>\n                                    <td>\n                                       <OverlayTrigger\n                                          trigger={['hover', 'hover']}\n                                          placement=\"top\"\n                                          overlay={\n                                             <Popover className=\"tw-border-gray-500\">\n                                                <Popover.Content>{`Created by ${e.createdBy ?? 'N/A'} ${\n                                                   dayjs(e.createdAt).diff(dayjs(), 'day', true) > 7\n                                                      ? `at ${dayjs(e.createdAt).format('DD-MMM-YYYY')}`\n                                                      : dayjs(e.createdAt).fromNow()\n                                                }.`}</Popover.Content>\n                                             </Popover>\n                                          }\n                                       >\n                                          <AiOutlineQuestionCircle className=\"tw-cursor-pointer\" />\n                                       </OverlayTrigger>\n                                    </td>\n                                 </tr>\n                              ))}\n                           </tbody>\n                        </Table>\n                     </Then>\n                     <Else>\n                        <When condition={!query.isLoading}>\n                           <p className=\"tw-m-0\">No Purchases created</p>\n                        </When>\n                     </Else>\n                  </If>\n               </Card.Body>\n            </Card>\n         </When>\n         <When condition={inventoriesLimit > 5 ? true : query.data?.inventories?.totalPages > 1}>\n            <Pagination\n               page={inventoriesPage}\n               onPageChange={setInventoriesPage}\n               onLimitChange={setInventoriesLimit}\n               {..._.omit(query.data, ['docs'])}\n               isLimitDisabled={query.isLoading}\n            />\n         </When>\n      </>\n   );\n};\n\nconst mapStateToProps = ({ auth }) => ({\n   user: auth.user,\n});\n\nconst mapDispatchToProps = {};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(ProductActions);\n","/home/muneeb/dev/diamond-tiles-frontend/src/jsx/pages/suppliers/SupplierActions.js",["456","457","458","459","460","461"],"import useUrlState from '@ahooksjs/use-url-state';\nimport dayjs from 'dayjs';\nimport relativeTime from 'dayjs/plugin/relativeTime';\nimport { useFormik } from 'formik';\nimport Button from 'jsx/components/Button';\nimport SpinnerOverlay from 'jsx/components/SpinnerOverlay';\nimport { get, patch, post, useAlert, useMutation, useQuery } from 'jsx/helpers';\nimport PageTItle from 'jsx/layouts/PageTitle';\nimport React, { useEffect, useMemo, useState } from 'react';\nimport { ButtonGroup, Card, OverlayTrigger, Pagination, Popover, Table } from 'react-bootstrap';\nimport { AiFillCaretLeft, AiFillSave, AiOutlineQuestionCircle } from 'react-icons/ai';\nimport { FaSort, FaSortDown, FaSortUp } from 'react-icons/fa';\nimport { Else, If, Then, When } from 'react-if';\nimport { useHistory, useParams } from 'react-router-dom';\n\nimport _, { isArray } from 'lodash';\nimport { connect } from 'react-redux';\nimport { userRoles } from 'jsx/helpers/enums';\n\nconst SupplierActions = (props) => {\n   const history = useHistory();\n   const params = useParams();\n   const [isError, setIsError] = useState(false);\n\n   const [urlState, setUrlState] = useUrlState({});\n\n   const alert = useAlert();\n   const isEditing = useMemo(\n      () => props.user?.role !== userRoles.CASHIER && urlState?.type === 'edit',\n      [urlState.type]\n   );\n   const isViewSupplier = useMemo(() => urlState?.type === 'view', [urlState.type]);\n   const isAddSupplier = useMemo(() => params?.id === 'add', [params.id]);\n\n   const [page, setPage] = useState(1);\n   const [limit, setLimit] = useState(5);\n   const [sort, setSort] = useState({ field: 'sourcePrice', order: 1 });\n\n   const query = useQuery(['supplier', params.id], () => get(`/suppliers/id/${params.id}`), {\n      enabled: !isAddSupplier,\n      onError: (err) => {\n         setIsError(true);\n         alert.setErrorAlert({\n            message: 'Unable to view supplier',\n            err,\n            callback: () => history.push('/suppliers'),\n            duration: 3000,\n         });\n      },\n   });\n   const patchMutation = useMutation((payload) => patch(`/suppliers/id/${params.id}`, payload), {\n      onSuccess: () => {\n         history.push('/suppliers');\n      },\n      onError: (err) => {\n         alert.setErrorAlert({\n            message: 'Unable to edit supplier.',\n            err,\n         });\n      },\n   });\n\n   const postMutation = useMutation((payload) => post('/suppliers', payload), {\n      onSuccess: () => {\n         history.push('/suppliers');\n      },\n      onError: (err) => {\n         alert.setErrorAlert({ message: 'Unable to add supplier', err });\n      },\n   });\n\n   const mutation = useMemo(() => (isEditing ? patchMutation : postMutation), [isEditing, patchMutation, postMutation]);\n\n   if (!isEditing && !isViewSupplier && !isAddSupplier) {\n      history.push('/suppliers');\n   }\n\n   const formik = useFormik({\n      initialValues: {\n         name: '',\n         phone: '',\n         company: '',\n      },\n      validateOnChange: false,\n      validateOnBlur: false,\n      onSubmit: (values) => {\n         mutation.mutate(values);\n      },\n   });\n\n   useEffect(() => {\n      if (isEditing && query.data) {\n         formik.setFieldValue('name', query.data?.supplier?.name ?? '');\n         formik.setFieldValue('phone', query.data?.supplier?.phone ?? '');\n         formik.setFieldValue('company', query.data?.supplier?.company ?? '');\n      }\n   }, [isEditing, query.data]);\n\n   const handleSort = (key) => {\n      setSort((prev) => ({ field: key, order: prev.order * -1 }));\n   };\n\n   return (\n      <>\n         <PageTItle activeMenu=\"Suppliers\" motherMenu=\"Manage\" />\n         {alert.getAlert()}\n         <Card>\n            <When condition={patchMutation.isLoading || postMutation.isLoading || query.isLoading}>\n               <SpinnerOverlay />\n            </When>\n            <If condition={isAddSupplier || isEditing}>\n               <Then>\n                  <form onSubmit={formik.handleSubmit}>\n                     <Card.Header>\n                        <Card.Title>{isEditing ? 'Edit Supplier' : 'Add New Supplier'}</Card.Title>\n                     </Card.Header>\n                     <Card.Body>\n                        <div className=\"row\">\n                           <div className=\"form-group col-xl-6\">\n                              <label className=\"col-form-label\">Name</label>\n                              <input\n                                 className=\"form-control\"\n                                 onChange={formik.handleChange}\n                                 type=\"text\"\n                                 name=\"name\"\n                                 disabled={isError}\n                                 value={formik.values.name}\n                              />\n                           </div>\n                        </div>\n                        <div className=\"row\">\n                           <div className=\"form-group col-xl-6\">\n                              <label className=\"col-form-label\">Phone</label>\n                              <input\n                                 className=\"form-control\"\n                                 onChange={formik.handleChange}\n                                 type=\"text\"\n                                 name=\"phone\"\n                                 disabled={isError}\n                                 value={formik.values.phone}\n                              />\n                           </div>\n                        </div>\n                        <div className=\"row\">\n                           <div className=\"form-group col-xl-6\">\n                              <label className=\"col-form-label\">Company</label>\n                              <input\n                                 className=\"form-control\"\n                                 onChange={formik.handleChange}\n                                 type=\"text\"\n                                 name=\"company\"\n                                 disabled={isError}\n                                 value={formik.values.company}\n                              />\n                           </div>\n                        </div>\n                     </Card.Body>\n                     <Card.Footer>\n                        <div className=\"row\">\n                           <div className=\"col-xl-12 tw-justify-center\">\n                              <ButtonGroup>\n                                 <Button\n                                    icon={AiFillCaretLeft}\n                                    variant=\"warning light\"\n                                    onClick={() => history.replace('/suppliers')}\n                                    loading={mutation.isLoading}\n                                 >\n                                    Back\n                                 </Button>\n                                 <Button\n                                    icon={AiFillSave}\n                                    variant=\"primary\"\n                                    type=\"submit\"\n                                    loading={mutation.isLoading}\n                                    disabled={isError}\n                                 >\n                                    Save\n                                 </Button>\n                              </ButtonGroup>\n                           </div>\n                        </div>\n                     </Card.Footer>\n                  </form>\n               </Then>\n               <Else>\n                  <Card.Header>\n                     <Card.Title>View Supplier</Card.Title>\n                  </Card.Header>\n                  <Card.Body>\n                     <div className=\"row\">\n                        <div className=\"form-group col-xl-6\">\n                           <label className=\"col-form-label\">Name</label>\n                           <h4>{query.data?.supplier?.name ?? 'N/A'}</h4>\n                        </div>\n                     </div>\n                     <div className=\"row\">\n                        <div className=\"form-group col-xl-6\">\n                           <label className=\"col-form-label\">Phone</label>\n                           <h4>{query.data?.supplier?.phone ?? 'N/A'}</h4>\n                        </div>\n                     </div>\n                     <div className=\"row\">\n                        <div className=\"form-group col-xl-6\">\n                           <label className=\"col-form-label\">Company</label>\n                           <h4>{query.data?.supplier?.company ?? 'N/A'}</h4>\n                        </div>\n                     </div>\n                  </Card.Body>\n                  <Card>\n                     <When condition={query.isLoading}>\n                        <SpinnerOverlay />\n                     </When>\n                     <Card.Header>\n                        <Card.Title>View Related Purchases</Card.Title>\n                     </Card.Header>\n                     <Card.Body>\n                        <If condition={query.data?.inventories?.totalDocs > 0}>\n                           <Then>\n                              <Table className=\"tw-relative\" responsive>\n                                 <thead>\n                                    <tr>\n                                       <th className=\"width80\">\n                                          <strong>#</strong>\n                                       </th>\n                                       <th>\n                                          <strong className=\"tw-cursor-pointer\" onClick={() => handleSort('supplier')}>\n                                             SUPPLIER\n                                             <span>\n                                                <When condition={sort.field !== 'supplier'}>\n                                                   <FaSort className=\"d-inline mx-1\" />\n                                                </When>\n                                                <When condition={sort.field === 'supplier' && sort.order === -1}>\n                                                   <FaSortDown className=\"d-inline mx-1\" />\n                                                </When>\n                                                <When condition={sort.field === 'supplier' && sort.order === 1}>\n                                                   <FaSortUp className=\"d-inline mx-1\" />\n                                                </When>\n                                             </span>\n                                          </strong>\n                                       </th>\n                                       <th>\n                                          <strong\n                                             className=\"tw-cursor-pointer\"\n                                             onClick={() => handleSort('modelNumber')}\n                                          >\n                                             MODEL NUMBER\n                                             <span>\n                                                <When condition={sort.field !== 'modelNumber'}>\n                                                   <FaSort className=\"d-inline mx-1\" />\n                                                </When>\n                                                <When condition={sort.field === 'modelNumber' && sort.order === -1}>\n                                                   <FaSortDown className=\"d-inline mx-1\" />\n                                                </When>\n                                                <When condition={sort.field === 'modelNumber' && sort.order === 1}>\n                                                   <FaSortUp className=\"d-inline mx-1\" />\n                                                </When>\n                                             </span>\n                                          </strong>\n                                       </th>\n                                       <th>\n                                          <strong\n                                             className=\"tw-cursor-pointer\"\n                                             onClick={() => handleSort('sourcePrice')}\n                                          >\n                                             PRICE\n                                             <span>\n                                                <When condition={sort.field !== 'sourcePrice'}>\n                                                   <FaSort className=\"d-inline mx-1\" />\n                                                </When>\n                                                <When condition={sort.field === 'sourcePrice' && sort.order === -1}>\n                                                   <FaSortDown className=\"d-inline mx-1\" />\n                                                </When>\n                                                <When condition={sort.field === 'sourcePrice' && sort.order === 1}>\n                                                   <FaSortUp className=\"d-inline mx-1\" />\n                                                </When>\n                                             </span>\n                                          </strong>\n                                       </th>\n                                       <th>\n                                          <strong className=\"tw-cursor-pointer\" onClick={() => handleSort('paid')}>\n                                             PAID\n                                             <span>\n                                                <When condition={sort.field !== 'paid'}>\n                                                   <FaSort className=\"d-inline mx-1\" />\n                                                </When>\n                                                <When condition={sort.field === 'paid' && sort.order === -1}>\n                                                   <FaSortDown className=\"d-inline mx-1\" />\n                                                </When>\n                                                <When condition={sort.field === 'paid' && sort.order === 1}>\n                                                   <FaSortUp className=\"d-inline mx-1\" />\n                                                </When>\n                                             </span>\n                                          </strong>\n                                       </th>\n                                       <th>\n                                          <strong>REMAINING</strong>\n                                       </th>\n                                       <th>\n                                          <strong>QUANTITY</strong>\n                                       </th>\n                                    </tr>\n                                 </thead>\n                                 <tbody>\n                                    {query.data?.inventories?.docs?.map((e, index) => {\n                                       const getQuantity = () => {\n                                          let q = e.quantity.single;\n                                          // eslint-disable-next-line prefer-destructuring\n                                          if (isArray(q)) q = q[0];\n                                          return q;\n                                       };\n\n                                       const quantity = getQuantity();\n\n                                       const getSourcePrice = () => {\n                                          const q = getQuantity();\n                                          return e.sourcePrice * q;\n                                       };\n\n                                       const sourcePrice = getSourcePrice();\n\n                                       const getRemainig = () => {\n                                          if (sourcePrice === e.paid) return null;\n\n                                          return sourcePrice - e.paid;\n                                       };\n\n                                       const getId = () => {\n                                          const id = e._id;\n                                          return id.slice(id.length - 3);\n                                       };\n\n                                       return (\n                                          <tr\n                                             key={`${e._id}`}\n                                             className={e.isRemaining && 'tw-bg-red-400 tw-text-gray-50'}\n                                          >\n                                             <td>\n                                                <strong className={e.isRemaining && 'tw-text-gray-50'}>\n                                                   {getId()}\n                                                </strong>\n                                             </td>\n                                             <td>{e?.supplier?.name ?? 'N/A'}</td>\n                                             <td>{e?.product?.modelNumber ?? 'N/A'}</td>\n                                             <td>{sourcePrice}</td>\n                                             <td>{e?.paid ?? 'N/A'}</td>\n                                             <td>{getRemainig()}</td>\n                                             <td>{quantity ? `${quantity} singles` : ''}</td>\n\n                                             <td>\n                                                <OverlayTrigger\n                                                   trigger={['hover', 'hover']}\n                                                   placement=\"top\"\n                                                   overlay={\n                                                      <Popover className=\"tw-border-gray-500\">\n                                                         <Popover.Content>{`Created by ${e.createdBy ?? 'N/A'} ${\n                                                            dayjs(e.createdAt).diff(dayjs(), 'day', true) > 7\n                                                               ? `at ${dayjs(e.createdAt).format('DD-MMM-YYYY')}`\n                                                               : dayjs(e.createdAt).fromNow()\n                                                         }.`}</Popover.Content>\n                                                      </Popover>\n                                                   }\n                                                >\n                                                   <AiOutlineQuestionCircle className=\"tw-cursor-pointer\" />\n                                                </OverlayTrigger>\n                                             </td>\n                                          </tr>\n                                       );\n                                    })}\n                                 </tbody>\n                              </Table>\n                           </Then>\n                           <Else>\n                              <When condition={!query.isLoading}>\n                                 <p className=\"tw-m-0\">No Purchases created</p>\n                              </When>\n                           </Else>\n                        </If>\n                     </Card.Body>\n                  </Card>\n                  <When condition={setLimit > 5 ? true : query.data?.inventories?.totalPages > 1}>\n                     <Pagination\n                        page={page}\n                        onPageChange={setPage}\n                        onLimitChange={setLimit}\n                        {..._.omit(query.data, ['docs'])}\n                        isLimitDisabled={query.isLoading}\n                     />\n                  </When>\n               </Else>\n            </If>\n         </Card>\n      </>\n   );\n};\n\nconst mapStateToProps = ({ auth }) => ({\n   user: auth.user,\n});\n\nconst mapDispatchToProps = {};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(SupplierActions);\n","/home/muneeb/dev/diamond-tiles-frontend/src/store/auth/actionTypes.js",[],"/home/muneeb/dev/diamond-tiles-frontend/src/jsx/pages/employees/index.js",[],"/home/muneeb/dev/diamond-tiles-frontend/src/jsx/pages/inventory/index.js",["462","463","464","465","466","467"],"/* eslint-disable prefer-destructuring */\nimport { useDebounce } from 'ahooks';\nimport dayjs from 'dayjs';\nimport relativeTime from 'dayjs/plugin/relativeTime';\nimport Button from 'jsx/components/Button';\nimport Pagination from 'jsx/components/Pagination';\nimport SpinnerOverlay from 'jsx/components/SpinnerOverlay';\nimport { get, useAlert, useQuery } from 'jsx/helpers';\nimport getQuantity from 'jsx/helpers/getQuantity';\nimport PageTItle from 'jsx/layouts/PageTitle';\nimport _, { isArray } from 'lodash';\nimport React, { useEffect, useState, Fragment } from 'react';\n\nimport { ButtonGroup, Card, Col, OverlayTrigger, Popover, Row, Table } from 'react-bootstrap';\nimport { AiOutlineQuestionCircle } from 'react-icons/ai';\nimport { FaSort, FaSortDown, FaSortUp } from 'react-icons/fa';\nimport { Else, If, Then, When } from 'react-if';\nimport { useQueryClient } from 'react-query';\nimport { useHistory } from 'react-router-dom';\n\nconst Khaata = () => {\n   dayjs.extend(relativeTime);\n   const history = useHistory();\n   const [page, setPage] = useState(1);\n   const [limit, setLimit] = useState(5);\n   const [sort, setSort] = useState({ field: null, order: -1 });\n   const [search, setSearch] = useState('');\n   const debouncedSearchValue = useDebounce(search, { wait: 500 });\n\n   const alert = useAlert();\n   const queryClient = useQueryClient();\n\n   const query = useQuery(['inventories', page, limit, sort.field, sort.order], () =>\n      get('/inventories', page, limit, sort.field, sort.order)\n   );\n   const alertMarkup = alert.getAlert();\n\n   const handleSort = (key) => {\n      setSort((prev) => ({ field: key, order: prev.order * -1 }));\n   };\n\n   useEffect(() => {\n      if (page > query.data?.totalPages) {\n         setPage((prev) => prev - 1);\n      }\n   }, [page, query.data?.totalPages]);\n\n   return (\n      <>\n         <PageTItle activeMenu=\"inventory\" motherMenu=\"Diamond Tiles\" />\n         {alertMarkup ? (\n            <Row>\n               <Col lg={12}>{alertMarkup}</Col>\n            </Row>\n         ) : null}\n         <div className=\"row\">\n            <Col lg={12}>\n               <Card>\n                  <When condition={query.isLoading}>\n                     <SpinnerOverlay />\n                  </When>\n                  <Card.Header>\n                     <Card.Title>Inventory</Card.Title>\n                     <ButtonGroup className=\"tw-float-right\">\n                        <input\n                           type=\"text\"\n                           className=\"input-rounded tw-rounded-r-none tw-pl-6 tw-shadow-inner tw-ring-1 \"\n                           placeholder=\"Search inventory\"\n                           // disabled={deleteMutation.isLoading}\n                           onChange={(e) => setSearch(e.target.value)}\n                        />\n                        <Button variant=\"primary\" loading={query.isLoading}>\n                           Search\n                        </Button>\n                     </ButtonGroup>\n                  </Card.Header>\n                  <Card.Body>\n                     <If condition={query.data?.totalDocs > 0}>\n                        <Then>\n                           <Table className=\"tw-relative\" responsive>\n                              <thead>\n                                 <tr>\n                                    <th className=\"width80\">\n                                       <strong>#</strong>\n                                    </th>\n                                    <th>\n                                       <strong className=\"tw-cursor-pointer\" onClick={() => handleSort('modelNumber')}>\n                                          Product\n                                          <span>\n                                             <When condition={sort.field !== 'modelNumber'}>\n                                                <FaSort className=\"d-inline mx-1\" />\n                                             </When>\n                                             <When condition={sort.field === 'modelNumber' && sort.order === -1}>\n                                                <FaSortDown className=\"d-inline mx-1\" />\n                                             </When>\n                                             <When condition={sort.field === 'modelNumber' && sort.order === 1}>\n                                                <FaSortUp className=\"d-inline mx-1\" />\n                                             </When>\n                                          </span>\n                                       </strong>\n                                    </th>\n\n                                    <th>\n                                       <strong className=\"tw-cursor-pointer\" onClick={() => handleSort('quantity')}>\n                                          QUANTITY\n                                          <span>\n                                             <When condition={sort.field !== 'quantity'}>\n                                                <FaSort className=\"d-inline mx-1\" />\n                                             </When>\n                                             <When condition={sort.field === 'quantity' && sort.order === -1}>\n                                                <FaSortDown className=\"d-inline mx-1\" />\n                                             </When>\n                                             <When condition={sort.field === 'quantity' && sort.order === 1}>\n                                                <FaSortUp className=\"d-inline mx-1\" />\n                                             </When>\n                                          </span>\n                                       </strong>\n                                    </th>\n                                 </tr>\n                              </thead>\n                              <tbody>\n                                 {query.data?.docs.map((e, index) => {\n                                    const isVariant = e.variants;\n                                    return (\n                                       <tr key={`${e._id}`}>\n                                          <td>\n                                             <strong>{query.data.pagingCounter * (index + 1)}</strong>\n                                          </td>\n                                          <td>{e.product.modelNumber ?? 'N/A'}</td>\n                                          <td>\n                                             {isVariant\n                                                ? Object.entries(e.variants).map(([key, value]) => (\n                                                     <>\n                                                        <span className=\"tw-mr-4\">{`${key.toUpperCase()}: ${getQuantity(\n                                                           value\n                                                        )}`}</span>\n                                                     </>\n                                                  ))\n                                                : getQuantity(e.quantity)}\n                                          </td>\n                                       </tr>\n                                    );\n                                 })}\n                              </tbody>\n                           </Table>\n                        </Then>\n                        <Else>\n                           <When condition={!query.isLoading && !debouncedSearchValue}>\n                              <p className=\"tw-m-0\">No inventory created</p>\n                           </When>\n                           <When condition={!query.isLoading && debouncedSearchValue}>\n                              <p className=\"tw-m-0\">No result found!</p>\n                           </When>\n                        </Else>\n                     </If>\n                  </Card.Body>\n               </Card>\n            </Col>\n         </div>\n         <When condition={limit > 5 ? true : query.data?.totalPages > 1}>\n            <Pagination\n               page={page}\n               onPageChange={setPage}\n               onLimitChange={setLimit}\n               {..._.omit(query.data, ['docs'])}\n               isLimitDisabled={query.isLoading}\n            />\n         </When>\n      </>\n   );\n};\n\nexport default Khaata;\n","/home/muneeb/dev/diamond-tiles-frontend/src/jsx/pages/dashboard/index.js",["468","469","470","471","472"],"import React, { useState } from 'react';\nimport { Dropdown, Table, ButtonGroup, Card } from 'react-bootstrap';\nimport Button from 'jsx/components/Button';\n\nimport { AiFillEye, AiOutlinePlus } from 'react-icons/ai';\nimport { connect } from 'formik';\nimport { useSelector } from 'react-redux';\nimport dayjs from 'dayjs';\nimport DatePicker from 'react-datepicker';\n\nimport '../../../css/react-datepicker.css';\nimport { useHistory } from 'react-router-dom';\nimport ManagePurchase from '../purchase/ManagePurchase';\n\nconst today = new Date();\n\nconst Dashboard = () => {\n   const [startDate, setStartDate] = useState(new Date());\n   const [endDate, setEndDate] = useState(new Date());\n   const history = useHistory();\n\n   const user = useSelector((s) => s.auth.user);\n   return (\n      <>\n         <div className=\"row tw-mb-[30px]\">\n            <div className=\"col-xl-12 tw-flex tw-justify-end tw-items-center\">\n               <DatePicker selected={startDate} onChange={(d) => setStartDate(d)} />\n               <span className=\"mx-4\">to</span>\n               <DatePicker selected={endDate} onChange={(d) => setEndDate(d)} />\n            </div>\n         </div>\n         <div className=\"row\">\n            <div className=\"col-lg-4 col-md-6\">\n               <Card className=\"tw-h-[205px]\">\n                  <Card.Body>\n                     <h3 className=\"tw-font-bold\">\n                        Hey <span className=\"tw-capitalize\">{user.name?.toLowerCase() ?? 'Loading...'}</span>!\n                     </h3>\n                     <h4>{dayjs(today).format('dddd[,] DD MMMM YYYY')}</h4>\n                  </Card.Body>\n               </Card>\n            </div>\n            <div className=\"col-lg-4 col-md-6\">\n               <Card className=\"\">\n                  <Card.Body>\n                     <h3 className=\"tw-font-bold\">Purchase</h3>\n                     <h4>8 - 6500 PKR</h4>\n                     <h6 className=\"tw-text-xs\">Total purchases made</h6>\n                     <Button\n                        variant=\"secondary\"\n                        className=\"btn-block\"\n                        icon={AiOutlinePlus}\n                        onClick={() => history.push('/purchase/add')}\n                     >\n                        New Purchase\n                     </Button>\n                  </Card.Body>\n               </Card>\n            </div>\n            <div className=\"col-lg-4 col-md-6\">\n               <Card className=\"\">\n                  <Card.Body>\n                     <h3 className=\"tw-font-bold\">Sale</h3>\n                     <h4>12 - 12000 PKR</h4>\n                     <h6 className=\"tw-text-xs\">Total sales made</h6>\n                     <Button\n                        variant=\"primary\"\n                        className=\"btn-block\"\n                        icon={AiOutlinePlus}\n                        onClick={() => history.push('/sale/add')}\n                     >\n                        New Sale\n                     </Button>\n                  </Card.Body>\n               </Card>\n            </div>\n            <div className=\"col-lg-4 col-md-6\">\n               <Card className=\"tw-h-[205px]\">\n                  <Card.Body>\n                     <h3 className=\"tw-font-bold\">Revenue</h3>\n                     <h4>2000 PKR</h4>\n                     <h6 className=\"tw-text-xs\">Profit made from the sales</h6>\n                  </Card.Body>\n               </Card>\n            </div>\n            <div className=\"col-lg-4 col-md-6\">\n               <Card className=\"tw-h-[205px]\">\n                  <Card.Body>\n                     <h3 className=\"tw-font-bold\">Expenses</h3>\n                     <h4>1000 PKR</h4>\n                     <h6 className=\"tw-text-xs\">Salaries and expenses</h6>\n                  </Card.Body>\n               </Card>\n            </div>\n            <div className=\"col-lg-4 col-md-6\">\n               <Card className=\"tw-h-[205px]\">\n                  <Card.Body>\n                     <h3 className=\"tw-font-bold\">Profit</h3>\n                     <h4>2000 PKR</h4>\n                     <h6 className=\"tw-text-xs\">Take home money</h6>\n                  </Card.Body>\n               </Card>\n            </div>\n            <div className=\"col-12\">\n               <ManagePurchase />\n            </div>\n            <div className=\"col-12\">\n               <ManagePurchase />\n            </div>\n         </div>\n      </>\n   );\n};\n\nexport default Dashboard;\n","/home/muneeb/dev/diamond-tiles-frontend/src/jsx/pages/khaata/index.js",["473","474","475","476","477","478","479","480","481","482","483","484","485","486"],"import { useDebounce } from 'ahooks';\nimport dayjs from 'dayjs';\nimport relativeTime from 'dayjs/plugin/relativeTime';\nimport { getActiveElement } from 'formik';\nimport Button from 'jsx/components/Button';\nimport Pagination from 'jsx/components/Pagination';\nimport SpinnerOverlay from 'jsx/components/SpinnerOverlay';\nimport { get, useAlert, useQuery } from 'jsx/helpers';\nimport { userRoles } from 'jsx/helpers/enums';\nimport PageTItle from 'jsx/layouts/PageTitle';\nimport _ from 'lodash';\nimport React, { useEffect, useState } from 'react';\nimport { ButtonGroup, Card, Col, OverlayTrigger, Popover, Row, Table } from 'react-bootstrap';\nimport {\n   AiFillDelete,\n   AiFillEdit,\n   AiFillEye,\n   AiFillPlusCircle,\n   AiOutlineClear,\n   AiOutlineQuestionCircle,\n} from 'react-icons/ai';\nimport { FaSort, FaSortDown, FaSortUp } from 'react-icons/fa';\nimport { Else, If, Then, When } from 'react-if';\nimport { useQueryClient } from 'react-query';\nimport { connect } from 'react-redux';\nimport { useHistory } from 'react-router-dom';\n\nconst Khaata = (props) => {\n   dayjs.extend(relativeTime);\n   const history = useHistory();\n   const [page, setPage] = useState(1);\n   const [limit, setLimit] = useState(5);\n   const [sort, setSort] = useState({ field: null, order: -1 });\n   const [search, setSearch] = useState('');\n   const debouncedSearchValue = useDebounce(search, { wait: 500 });\n\n   const alert = useAlert();\n   const queryClient = useQueryClient();\n\n   const query = useQuery(['expenses/khaata', page, limit, sort.field, sort.order], () =>\n      get('/expenses/khaata', page, limit, sort.field, sort.order)\n   );\n\n   // const handleOnClickView = (obj) => {\n   //    history.push({ pathname: `/expenses/khaata/${obj._id}`, search: `?type=view` });\n   // };\n\n   const alertMarkup = alert.getAlert();\n\n   const handleSort = (key) => {\n      setSort((prev) => ({ field: key, order: prev.order * -1 }));\n   };\n\n   useEffect(() => {\n      if (page > query.data?.totalPages) {\n         setPage((prev) => prev - 1);\n      }\n   }, [page, query.data?.totalPages]);\n\n   return (\n      <>\n         <PageTItle activeMenu=\"khaata\" motherMenu=\"Diamond Tiles\" />\n         {alertMarkup ? (\n            <Row>\n               <Col lg={12}>{alertMarkup}</Col>\n            </Row>\n         ) : null}\n         <div className=\"row\">\n            <Col lg={12}>\n               <Card>\n                  <When condition={query.isLoading}>\n                     <SpinnerOverlay />\n                  </When>\n                  <Card.Header>\n                     <Card.Title>Khaata</Card.Title>\n                  </Card.Header>\n                  <Card.Body>\n                     <If condition={query.data?.totalDocs > 0}>\n                        <Then>\n                           <Table className=\"tw-relative\" responsive>\n                              <thead>\n                                 <tr>\n                                    <th className=\"width80\">\n                                       <strong>#</strong>\n                                    </th>\n                                    <th>\n                                       <strong className=\"tw-cursor-pointer\" onClick={() => handleSort('customer')}>\n                                          Customer\n                                          <span>\n                                             <When condition={sort.field !== 'customer'}>\n                                                <FaSort className=\"d-inline mx-1\" />\n                                             </When>\n                                             <When condition={sort.field === 'customer' && sort.order === -1}>\n                                                <FaSortDown className=\"d-inline mx-1\" />\n                                             </When>\n                                             <When condition={sort.field === 'customer' && sort.order === 1}>\n                                                <FaSortUp className=\"d-inline mx-1\" />\n                                             </When>\n                                          </span>\n                                       </strong>\n                                    </th>\n                                    <th>\n                                       <strong className=\"tw-cursor-pointer\" onClick={() => handleSort('inventory')}>\n                                          Product\n                                          <span>\n                                             <When condition={sort.field !== 'inventory'}>\n                                                <FaSort className=\"d-inline mx-1\" />\n                                             </When>\n                                             <When condition={sort.field === 'inventory' && sort.order === -1}>\n                                                <FaSortDown className=\"d-inline mx-1\" />\n                                             </When>\n                                             <When condition={sort.field === 'inventory' && sort.order === 1}>\n                                                <FaSortUp className=\"d-inline mx-1\" />\n                                             </When>\n                                          </span>\n                                       </strong>\n                                    </th>\n                                    <th>\n                                       <strong className=\"tw-cursor-pointer\" onClick={() => handleSort('quantity')}>\n                                          Qty\n                                          <span>\n                                             <When condition={sort.field !== 'quantity'}>\n                                                <FaSort className=\"d-inline mx-1\" />\n                                             </When>\n                                             <When condition={sort.field === 'quantity' && sort.order === -1}>\n                                                <FaSortDown className=\"d-inline mx-1\" />\n                                             </When>\n                                             <When condition={sort.field === 'quantity' && sort.order === 1}>\n                                                <FaSortUp className=\"d-inline mx-1\" />\n                                             </When>\n                                          </span>\n                                       </strong>\n                                    </th>\n                                    <th>\n                                       <strong className=\"tw-cursor-pointer\" onClick={() => handleSort('retailPrice')}>\n                                          Total\n                                          <span>\n                                             <When condition={sort.field !== 'retailPrice'}>\n                                                <FaSort className=\"d-inline mx-1\" />\n                                             </When>\n                                             <When condition={sort.field === 'retailPrice' && sort.order === -1}>\n                                                <FaSortDown className=\"d-inline mx-1\" />\n                                             </When>\n                                             <When condition={sort.field === 'retailPrice' && sort.order === 1}>\n                                                <FaSortUp className=\"d-inline mx-1\" />\n                                             </When>\n                                          </span>\n                                       </strong>\n                                    </th>\n                                    <th>\n                                       <strong className=\"tw-cursor-pointer\" onClick={() => handleSort('paid')}>\n                                          Paid\n                                          <span>\n                                             <When condition={sort.field !== 'paid'}>\n                                                <FaSort className=\"d-inline mx-1\" />\n                                             </When>\n                                             <When condition={sort.field === 'paid' && sort.order === -1}>\n                                                <FaSortDown className=\"d-inline mx-1\" />\n                                             </When>\n                                             <When condition={sort.field === 'paid' && sort.order === 1}>\n                                                <FaSortUp className=\"d-inline mx-1\" />\n                                             </When>\n                                          </span>\n                                       </strong>\n                                    </th>\n                                 </tr>\n                              </thead>\n                              <tbody>\n                                 {query.data &&\n                                    query.data?.docs.map((e, index) => {\n                                       const getId = () => {\n                                          const id = e._id;\n                                          return id.slice(id.length - 3);\n                                       };\n                                       const getTotal = () => {\n                                          const price = e.type === 'inventory' ? e.sourcePrice : e.retailPrice;\n                                          if (!price) return null;\n                                          return price * e.quantity;\n                                       };\n                                       return (\n                                          <tr key={`${e._id}`}>\n                                             <td>\n                                                <strong>{getId()}</strong>\n                                             </td>\n                                             <td>{e[e.type === 'sale' ? 'customer' : 'supplier']?.name ?? 'N/A'}</td>\n                                             <td>\n                                                {e[e.type === 'sale' ? 'inventory' : 'product']?.modelNumber ?? 'N/A'}\n                                             </td>\n                                             <td>{e?.quantity ?? 'N/a'}</td>\n                                             <td>{getTotal()}</td>\n                                             <td>{e?.paid ?? 'N/A'}</td>\n                                             <td>\n                                                <OverlayTrigger\n                                                   trigger={['hover', 'hover']}\n                                                   placement=\"top\"\n                                                   overlay={\n                                                      <Popover className=\"tw-border-gray-500\">\n                                                         <Popover.Content>{`Created by ${e.createdBy ?? 'N/A'} ${\n                                                            dayjs(e.createdAt).diff(dayjs(), 'day', true) > 7\n                                                               ? `at ${dayjs(e.createdAt).format('DD-MMM-YYYY')}`\n                                                               : dayjs(e.createdAt).fromNow()\n                                                         }.`}</Popover.Content>\n                                                      </Popover>\n                                                   }\n                                                >\n                                                   <AiOutlineQuestionCircle className=\"tw-cursor-pointer\" />\n                                                </OverlayTrigger>\n                                             </td>\n                                             {/* <When condition={props.user?.role !== userRoles.CASHIER}>\n                                                <td>\n                                                   <Button\n                                                      variant=\"danger\"\n                                                      size=\"sm\"\n                                                      icon={AiOutlineClear}\n                                                      onClick={() => {}}\n                                                   >\n                                                      Clear\n                                                   </Button>\n                                                </td>\n                                             </When> */}\n                                          </tr>\n                                       );\n                                    })}\n                              </tbody>\n                           </Table>\n                        </Then>\n                        <Else>\n                           <When condition={!query.isLoading && !debouncedSearchValue}>\n                              <p className=\"tw-m-0\">No sales created</p>\n                           </When>\n                           <When condition={!query.isLoading && debouncedSearchValue}>\n                              <p className=\"tw-m-0\">No result found!</p>\n                           </When>\n                        </Else>\n                     </If>\n                  </Card.Body>\n               </Card>\n            </Col>\n         </div>\n         <When condition={limit > 5 ? true : query.data?.totalPages > 1}>\n            <Pagination\n               page={page}\n               onPageChange={setPage}\n               onLimitChange={setLimit}\n               {..._.omit(query.data, ['docs'])}\n               isLimitDisabled={query.isLoading}\n            />\n         </When>\n      </>\n   );\n};\n\nconst mapStateToProps = ({ auth }) => ({\n   user: auth.user,\n});\n\nconst mapDispatchToProps = {};\nexport default connect(mapStateToProps, mapDispatchToProps)(Khaata);\n","/home/muneeb/dev/diamond-tiles-frontend/src/jsx/layouts/index.js",["487","488"],"import React, { memo, useEffect } from 'react';\nimport { setLogin, setLogout } from 'store/auth/actions';\nimport { connect } from 'react-redux';\nimport Nav from './nav';\nimport Footer from './Footer';\nimport { get } from '../helpers';\n\nconst token = localStorage.getItem('auth_token');\n\nconst Layout = ({ children: Children, isPublic, setUser, logout }) => {\n   const getUserProfile = async () => {\n      try {\n         const res = await get(`/auth/decode/${token}`);\n         if (!res?.isConfirmed) {\n            logout();\n            localStorage.clear();\n            window.location = 'page-login';\n         } else {\n            setUser({ ...res, auth_token: token });\n         }\n      } catch (error) {\n         logout();\n         setUser({});\n         localStorage.clear();\n         window.location = 'page-login';\n      }\n   };\n\n   useEffect(() => {\n      if (token) {\n         getUserProfile();\n      }\n   }, [token]);\n\n   const MemoizedNav = memo(Nav);\n   if (isPublic)\n      return (\n         <>\n            <div id=\"main-wrapper\" className=\"show\">\n               <div className=\"container-fluid\">\n                  {/* <Children /> */}\n                  {Children}\n               </div>\n            </div>\n         </>\n      );\n\n   return (\n      <>\n         <div id=\"main-wrapper\" className=\"show\">\n            <MemoizedNav />\n            <div className=\"content-body\">\n               <div className=\"container-fluid\">\n                  {/* <Children /> */}\n                  {Children}\n               </div>\n            </div>\n            <Footer />\n         </div>\n      </>\n   );\n};\nconst mapStateToProps = (state) => ({});\n\nconst mapDispatchToProps = (dispatch) => ({\n   setUser: (payload) => dispatch(setLogin(payload)),\n   logout: () => dispatch(setLogout()),\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Layout);\n","/home/muneeb/dev/diamond-tiles-frontend/src/jsx/pages/expenses/index.js",["489","490"],"/home/muneeb/dev/diamond-tiles-frontend/src/jsx/pages/customers/index.js",[],"/home/muneeb/dev/diamond-tiles-frontend/src/jsx/pages/products/index.js",["491","492","493","494","495","496","497","498"],"import { useDebounce } from 'ahooks';\nimport dayjs from 'dayjs';\nimport relativeTime from 'dayjs/plugin/relativeTime';\nimport Button from 'jsx/components/Button';\nimport Pagination from 'jsx/components/Pagination';\nimport SpinnerOverlay from 'jsx/components/SpinnerOverlay';\nimport { del, get, useAlert, useMutation, useQuery } from 'jsx/helpers';\nimport PageTItle from 'jsx/layouts/PageTitle';\nimport _ from 'lodash';\nimport React, { useCallback, useEffect, useState } from 'react';\nimport { ButtonGroup, Card, Col, OverlayTrigger, Popover, Row, Table } from 'react-bootstrap';\nimport { AiFillDelete, AiFillEdit, AiFillEye, AiFillPlusCircle, AiOutlineQuestionCircle } from 'react-icons/ai';\nimport { FaSort, FaSortDown, FaSortUp } from 'react-icons/fa';\nimport { Else, If, Then, When } from 'react-if';\nimport { useQueryClient } from 'react-query';\nimport { useHistory } from 'react-router-dom';\nimport swal from 'sweetalert';\nimport { connect, useDispatch, useSelector } from 'react-redux';\nimport { userRoles } from 'jsx/helpers/enums';\nimport ModalWrapper from 'jsx/components/ModalWrapper';\nimport { setProductsVisibility } from 'store/actions';\nimport Types from '../types';\nimport Units from '../units';\n\ndayjs.extend(relativeTime);\n\nconst Products = (props) => {\n   const history = useHistory();\n   const [page, setPage] = useState(1);\n   const [limit, setLimit] = useState(5);\n   const [sort, setSort] = useState({ field: null, order: -1 });\n   const [search, setSearch] = useState('');\n\n   const dispatch = useDispatch();\n   const debouncedSearchValue = useDebounce(search, { wait: 500 });\n\n   const alert = useAlert();\n   const queryClient = useQueryClient();\n\n   const query = useQuery(['products', page, limit, sort.field, sort.order, debouncedSearchValue], () =>\n      get('/products', page, limit, sort.field, sort.order, debouncedSearchValue)\n   );\n   const deleteMutation = useMutation((id) => del(`/products/id/${id}`), {\n      onSuccess: async () => {\n         await queryClient.invalidateQueries('products');\n         alert.setAlert({\n            message: 'Product deleted successfully',\n            variant: 'success',\n         });\n      },\n      onError: (err) => {\n         alert.setErrorAlert({ message: 'Unable to delete product', err });\n      },\n   });\n\n   const handleOnClickAdd = () => {\n      dispatch(setProductsVisibility(true));\n   };\n\n   const handleOnClickDelete = (id) => {\n      swal({\n         title: 'Are you sure?',\n         text: 'Once deleted, you will not be able to recover it!',\n         icon: 'warning',\n         buttons: true,\n         dangerMode: true,\n      }).then((willDelete) => {\n         if (willDelete) {\n            deleteMutation.mutate(id);\n         }\n      });\n   };\n\n   const alertMarkup = alert.getAlert();\n\n   const handleSort = (key) => {\n      setSort((prev) => ({ field: key, order: prev.order * -1 }));\n   };\n\n   const getHeadingWithSort = useCallback(\n      (label, field) => (\n         <strong className=\"tw-cursor-pointer\" onClick={() => handleSort(field)}>\n            {label}\n            <span>\n               <When condition={sort.field !== field}>\n                  <FaSort className=\"d-inline mx-1\" />\n               </When>\n               <When condition={sort.field === field && sort.order === -1}>\n                  <FaSortDown className=\"d-inline mx-1\" />\n               </When>\n               <When condition={sort.field === field && sort.order === 1}>\n                  <FaSortUp className=\"d-inline mx-1\" />\n               </When>\n            </span>\n         </strong>\n      ),\n      [sort.field, sort.order]\n   );\n\n   useEffect(() => {\n      if (page > query.data?.totalPages) {\n         setPage((prev) => prev - 1);\n      }\n   }, [page, query.data?.totalPages]);\n\n   return (\n      <>\n         <PageTItle activeMenu=\"products\" motherMenu=\"Manage\" />\n         <div className=\"row my-3\">\n            <div className=\"col-xl-5  my-2\">\n               <Types />\n            </div>\n            <div className=\"col-xl-7  my-2\">\n               <Units />\n            </div>\n         </div>\n\n         {alertMarkup ? (\n            <Row>\n               <Col lg={12}>{alertMarkup}</Col>\n            </Row>\n         ) : null}\n         <div className=\"row\">\n            <Col lg={12}>\n               <Card>\n                  <When condition={query.isLoading || deleteMutation.isLoading}>\n                     <SpinnerOverlay />\n                  </When>\n                  <Card.Header>\n                     <Card.Title>Manage Products</Card.Title>\n                     <ButtonGroup className=\"tw-float-right\">\n                        <input\n                           type=\"text\"\n                           className=\"input-rounded tw-rounded-r-none tw-pl-6 tw-shadow-inner tw-ring-1 \"\n                           placeholder=\"Search products by model\"\n                           disabled={deleteMutation.isLoading}\n                           onChange={(e) => setSearch(e.target.value)}\n                        />\n                        <Button size=\"sm\" variant=\"primary\" icon={AiFillPlusCircle} onClick={handleOnClickAdd}>\n                           Add New Product\n                        </Button>\n                     </ButtonGroup>\n                  </Card.Header>\n                  <Card.Body>\n                     <If condition={query.data?.totalDocs > 0}>\n                        <Then>\n                           <Table className=\"tw-relative\" responsive>\n                              <thead>\n                                 <tr>\n                                    <th className=\"width80\">\n                                       <strong>#</strong>\n                                    </th>\n\n                                    <th>{getHeadingWithSort('Model', 'modelNumber')}</th>\n                                    <th>\n                                       <strong>Type</strong>\n                                    </th>\n                                    <th>\n                                       <strong>Unit</strong>\n                                    </th>\n                                 </tr>\n                              </thead>\n                              <tbody>\n                                 {query.data?.docs.map((e, index) => (\n                                    <tr key={`${e._id}`}>\n                                       <td>\n                                          <strong>{query.data.pagingCounter * (index + 1)}</strong>\n                                       </td>\n                                       <td>{e.modelNumber}</td>\n                                       <td>{e.type.title}</td>\n                                       <td>{e.unit.title}</td>\n                                       <td>\n                                          <When condition={props.user?.role !== userRoles.CASHIER}>\n                                             <Button\n                                                variant=\"danger\"\n                                                size=\"sm\"\n                                                icon={AiFillDelete}\n                                                onClick={() => handleOnClickDelete(e._id)}\n                                             >\n                                                Delete\n                                             </Button>\n                                          </When>\n                                       </td>\n                                    </tr>\n                                 ))}\n                              </tbody>\n                           </Table>\n                        </Then>\n                        <Else>\n                           <When condition={!query.isLoading && !debouncedSearchValue}>\n                              <p className=\"tw-m-0\">No products created</p>\n                           </When>\n                           <When condition={!query.isLoading && debouncedSearchValue}>\n                              <p className=\"tw-m-0\">No result found!</p>\n                           </When>\n                        </Else>\n                     </If>\n                  </Card.Body>\n               </Card>\n            </Col>\n         </div>\n         <When condition={limit > 5 ? true : query.data?.totalPages > 1}>\n            <Pagination\n               page={page}\n               onPageChange={setPage}\n               onLimitChange={setLimit}\n               {..._.omit(query.data, ['docs'])}\n               isLimitDisabled={query.isLoading || deleteMutation.isLoading}\n            />\n         </When>\n      </>\n   );\n};\nconst mapStateToProps = ({ auth }) => ({\n   user: auth.user,\n});\n\nconst mapDispatchToProps = {};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Products);\n","/home/muneeb/dev/diamond-tiles-frontend/src/jsx/pages/sale/index.js",["499","500","501","502","503"],"import dayjs from 'dayjs';\nimport relativeTime from 'dayjs/plugin/relativeTime';\nimport produce from 'immer';\nimport Button from 'jsx/components/Button';\nimport Pagination from 'jsx/components/Pagination';\nimport SpinnerOverlay from 'jsx/components/SpinnerOverlay';\nimport { del, get, useAlert, useMutation, useQuery } from 'jsx/helpers';\nimport { userRoles } from 'jsx/helpers/enums';\nimport PageTItle from 'jsx/layouts/PageTitle';\nimport _, { isArray } from 'lodash';\nimport React, { useEffect, useState } from 'react';\nimport { ButtonGroup, Card, Col, OverlayTrigger, Popover, Row, Table } from 'react-bootstrap';\nimport { AiFillDelete, AiFillEdit, AiFillEye, AiFillPlusCircle, AiOutlineQuestionCircle } from 'react-icons/ai';\nimport { FaSort, FaSortDown, FaSortUp } from 'react-icons/fa';\nimport { Else, If, Then, When } from 'react-if';\nimport { useQueryClient } from 'react-query';\nimport { connect } from 'react-redux';\nimport { useHistory } from 'react-router-dom';\nimport swal from 'sweetalert';\nimport ClearSale from './ClearSale';\nimport RefundSale from './RefundSale';\n\nconst getQuantity = (array) => {\n   if (array[0] > 0) return `${array[0]} Units`;\n   return `${array[1]} ${array[1] > 0 ? 'Singles' : ''}`;\n};\n\ndayjs.extend(relativeTime);\nconst Sale = (props) => {\n   const history = useHistory();\n   const [page, setPage] = useState(1);\n   const [limit, setLimit] = useState(5);\n   const [sort, setSort] = useState({ field: null, order: -1 });\n   const [refundPurchase, setRefundPurchase] = useState(null);\n   const [clearSale, setClearSale] = useState({ id: null, amount: null });\n\n   const alert = useAlert();\n   const queryClient = useQueryClient();\n\n   const query = useQuery(['sales', page, limit, sort.field, sort.order], () =>\n      get('/sales', page, limit, sort.field, sort.order)\n   );\n   const deleteMutation = useMutation((id) => del(`/sales/id/${id}`), {\n      onSuccess: async () => {\n         await queryClient.invalidateQueries('sales');\n         alert.setAlert({\n            message: 'Sale deleted successfully',\n            variant: 'success',\n         });\n      },\n      onError: (err) => {\n         alert.setErrorAlert({ message: 'Unable to delete sale', err });\n      },\n   });\n\n   const handleOnClickAdd = () => {\n      history.push('/sale/add');\n   };\n\n   const handleOnClickDelete = (id) => {\n      swal({\n         title: 'Are you sure?',\n         text: 'Once deleted, you will not be able to recover it!',\n         icon: 'warning',\n         buttons: true,\n         dangerMode: true,\n      }).then((willDelete) => {\n         if (willDelete) {\n            deleteMutation.mutate(id);\n         }\n      });\n   };\n\n   const alertMarkup = alert.getAlert();\n\n   const handleSort = (key) => {\n      setSort((prev) => ({ field: key, order: prev.order * -1 }));\n   };\n\n   useEffect(() => {\n      if (page > query.data?.totalPages) {\n         setPage((prev) => prev - 1);\n      }\n   }, [page, query.data?.totalPages]);\n\n   return (\n      <>\n         <PageTItle activeMenu=\"Sale\" motherMenu=\"Diamond Tiles\" />\n         <div className=\"row tw-mb-8\">\n            <div className=\"col-xl-6\">\n               <Button variant=\"primary\" icon={AiFillPlusCircle} onClick={handleOnClickAdd}>\n                  Add New Sale\n               </Button>\n            </div>\n\n            {/* <div className=\"col-xl-6\">\n               <ButtonGroup className=\"tw-float-right\">\n                  <input\n                     type=\"text\"\n                     className=\"input-rounded tw-rounded-r-none tw-pl-6\"\n                     placeholder=\"Search Purchase...\"\n                     disabled={deleteMutation.isLoading}\n                     onChange={(e) => setSearch(e.target.value)}\n                  />\n                  <Button variant=\"secondary\" className=\"btn btn-secondary tw-pl-6\" loading={query.isLoading}>\n                     Search\n                  </Button>\n               </ButtonGroup>\n            </div> */}\n         </div>\n         {alertMarkup ? (\n            <Row>\n               <Col lg={12}>{alertMarkup}</Col>\n            </Row>\n         ) : null}\n         <div className=\"row\">\n            <Col lg={12}>\n               <Card>\n                  <When condition={query.isLoading || deleteMutation.isLoading}>\n                     <SpinnerOverlay />\n                  </When>\n                  <Card.Header>\n                     <Card.Title>Manage Purchase</Card.Title>\n                  </Card.Header>\n                  <Card.Body>\n                     <If condition={query.data?.totalDocs > 0}>\n                        <Then>\n                           <Table className=\"tw-relative\" responsive>\n                              <thead>\n                                 <tr>\n                                    <th className=\"width80\">\n                                       <strong>#</strong>\n                                    </th>\n                                    <th>\n                                       <strong className=\"tw-cursor-pointer\" onClick={() => handleSort('supplier')}>\n                                          SUPPLIER\n                                          <span>\n                                             <When condition={sort.field !== 'supplier'}>\n                                                <FaSort className=\"d-inline mx-1\" />\n                                             </When>\n                                             <When condition={sort.field === 'supplier' && sort.order === -1}>\n                                                <FaSortDown className=\"d-inline mx-1\" />\n                                             </When>\n                                             <When condition={sort.field === 'supplier' && sort.order === 1}>\n                                                <FaSortUp className=\"d-inline mx-1\" />\n                                             </When>\n                                          </span>\n                                       </strong>\n                                    </th>\n                                    <th>\n                                       <strong className=\"tw-cursor-pointer\" onClick={() => handleSort('modelNumber')}>\n                                          MODEL NUMBER\n                                          <span>\n                                             <When condition={sort.field !== 'modelNumber'}>\n                                                <FaSort className=\"d-inline mx-1\" />\n                                             </When>\n                                             <When condition={sort.field === 'modelNumber' && sort.order === -1}>\n                                                <FaSortDown className=\"d-inline mx-1\" />\n                                             </When>\n                                             <When condition={sort.field === 'modelNumber' && sort.order === 1}>\n                                                <FaSortUp className=\"d-inline mx-1\" />\n                                             </When>\n                                          </span>\n                                       </strong>\n                                    </th>\n                                    <th>\n                                       <strong className=\"tw-cursor-pointer\" onClick={() => handleSort('sourcePrice')}>\n                                          PRICE\n                                          <span>\n                                             <When condition={sort.field !== 'sourcePrice'}>\n                                                <FaSort className=\"d-inline mx-1\" />\n                                             </When>\n                                             <When condition={sort.field === 'sourcePrice' && sort.order === -1}>\n                                                <FaSortDown className=\"d-inline mx-1\" />\n                                             </When>\n                                             <When condition={sort.field === 'sourcePrice' && sort.order === 1}>\n                                                <FaSortUp className=\"d-inline mx-1\" />\n                                             </When>\n                                          </span>\n                                       </strong>\n                                    </th>\n                                    <th>\n                                       <strong className=\"tw-cursor-pointer\" onClick={() => handleSort('paid')}>\n                                          PAID\n                                          <span>\n                                             <When condition={sort.field !== 'paid'}>\n                                                <FaSort className=\"d-inline mx-1\" />\n                                             </When>\n                                             <When condition={sort.field === 'paid' && sort.order === -1}>\n                                                <FaSortDown className=\"d-inline mx-1\" />\n                                             </When>\n                                             <When condition={sort.field === 'paid' && sort.order === 1}>\n                                                <FaSortUp className=\"d-inline mx-1\" />\n                                             </When>\n                                          </span>\n                                       </strong>\n                                    </th>\n                                 </tr>\n                              </thead>\n                              <tbody>\n                                 {query.data?.docs.map((e, index) => {\n                                    const getId = () => {\n                                       const id = e._id;\n                                       return id.slice(id.length - 4);\n                                    };\n\n                                    const getProducts = () => {\n                                       const products = [];\n\n                                       e.products.forEach((d, i) => {\n                                          products.push(\n                                             <>\n                                                <b>{`${d.product.modelNumber}`}</b>\n                                                <br />\n                                                <span className=\"tw-mr-4\">{`BUY: ${d.sourcePrice} PKR`}</span>\n                                                <span>{`SELL: ${d.retailPrice} PKR`}</span>\n\n                                                {d.variants ? (\n                                                   <>\n                                                      <br />\n                                                      {Object.entries(d.variants).map(([key, value]) => (\n                                                         <span className=\"tw-mr-4\">{`${key.toUpperCase()}: ${getQuantity(\n                                                            value\n                                                         )}`}</span>\n                                                      ))}\n                                                   </>\n                                                ) : (\n                                                   <>\n                                                      <br />\n                                                      {getQuantity(d.quantity)}\n                                                   </>\n                                                )}\n                                             </>\n                                          );\n                                          if (i < e.products.length - 1) products.push(<br />);\n                                       });\n\n                                       return products;\n                                    };\n\n                                    // getProducts();\n\n                                    return (\n                                       <tr\n                                          key={`${e._id}`}\n                                          className={e.isRemaining && 'tw-bg-red-400 tw-text-gray-50'}\n                                       >\n                                          <td>\n                                             <strong className={e.isRemaining && 'tw-text-gray-50'}>{getId()}</strong>\n                                          </td>\n                                          <td>{e.customer?.name}</td>\n                                          <td>{getProducts()}</td>\n                                          <td>{`${e.totalRetailPrice} PKR`}</td>\n                                          <td>{`${e.paid} PKR`}</td>\n\n                                          <td>\n                                             <OverlayTrigger\n                                                trigger={['hover', 'hover']}\n                                                placement=\"top\"\n                                                overlay={\n                                                   <Popover className=\"tw-border-gray-500\">\n                                                      <Popover.Content>{`Created by ${e.createdBy ?? 'N/A'} ${\n                                                         dayjs(e.createdAt).diff(dayjs(), 'day', true) > 7\n                                                            ? `at ${dayjs(e.createdAt).format('DD-MMM-YYYY')}`\n                                                            : dayjs(e.createdAt).fromNow()\n                                                      }.`}</Popover.Content>\n                                                   </Popover>\n                                                }\n                                             >\n                                                <AiOutlineQuestionCircle className=\"tw-cursor-pointer\" />\n                                             </OverlayTrigger>\n                                          </td>\n                                          <td>\n                                             <ButtonGroup>\n                                                <When condition={props.user?.role !== userRoles.CASHIER}>\n                                                   {/* <Button\n                                                      variant=\"dark\"\n                                                      size=\"sm\"\n                                                      icon={AiFillDelete}\n                                                      onClick={() => setRefundPurchase(e._id)}\n                                                      // disabled={quantity === 0}\n                                                   >\n                                                      Refund\n                                                   </Button> */}\n                                                   <When condition={e.isRemaining}>\n                                                      <Button\n                                                         variant=\"warning\"\n                                                         size=\"sm\"\n                                                         icon={AiFillDelete}\n                                                         onClick={() =>\n                                                            setClearSale({ id: e._id, amount: e.totalRetailPrice })\n                                                         }\n                                                      >\n                                                         Pay\n                                                      </Button>\n                                                   </When>\n                                                   <Button\n                                                      variant=\"danger\"\n                                                      size=\"sm\"\n                                                      icon={AiFillDelete}\n                                                      onClick={() => handleOnClickDelete(e._id)}\n                                                   >\n                                                      Delete\n                                                   </Button>\n                                                </When>\n                                             </ButtonGroup>\n                                          </td>\n                                       </tr>\n                                    );\n                                 })}\n                              </tbody>\n                           </Table>\n                        </Then>\n                        <Else>\n                           <When condition={!query.isLoading}>\n                              <p className=\"tw-m-0\">No purchases created</p>\n                           </When>\n                        </Else>\n                     </If>\n                  </Card.Body>\n               </Card>\n            </Col>\n         </div>\n         <When condition={limit > 5 ? true : query.data?.totalPages > 1}>\n            <Pagination\n               page={page}\n               onPageChange={setPage}\n               onLimitChange={setLimit}\n               {..._.omit(query.data, ['docs'])}\n               isLimitDisabled={query.isLoading || deleteMutation.isLoading}\n            />\n         </When>\n         <RefundSale refundPurchase={refundPurchase} onClose={() => setRefundPurchase(null)} size=\"md\" />\n         <ClearSale\n            clearSale={clearSale.id}\n            initialAmount={clearSale.amount}\n            onClose={() => setClearSale((prev) => ({ ...prev, id: null }))}\n            size=\"md\"\n         />\n      </>\n   );\n};\n\nconst mapStateToProps = ({ auth }) => ({\n   user: auth.user,\n});\n\nconst mapDispatchToProps = {};\nexport default connect(mapStateToProps, mapDispatchToProps)(Sale);\n","/home/muneeb/dev/diamond-tiles-frontend/src/jsx/pages/purchase/index.js",["504","505","506","507","508","509","510","511","512","513","514","515","516","517","518","519","520","521","522","523","524","525","526","527","528","529","530","531","532","533","534","535","536","537","538","539","540"],"import dayjs from 'dayjs';\nimport relativeTime from 'dayjs/plugin/relativeTime';\nimport produce from 'immer';\nimport Button from 'jsx/components/Button';\nimport Pagination from 'jsx/components/Pagination';\nimport SpinnerOverlay from 'jsx/components/SpinnerOverlay';\nimport { del, get, useAlert, useMutation, useQuery } from 'jsx/helpers';\nimport { userRoles } from 'jsx/helpers/enums';\nimport getQuantity from 'jsx/helpers/getQuantity';\nimport PageTItle from 'jsx/layouts/PageTitle';\nimport _, { isArray } from 'lodash';\nimport React, { useEffect, useState } from 'react';\nimport { ButtonGroup, Card, Col, OverlayTrigger, Popover, Row, Table } from 'react-bootstrap';\nimport { AiFillDelete, AiFillEdit, AiFillEye, AiFillPlusCircle, AiOutlineQuestionCircle } from 'react-icons/ai';\nimport { FaSort, FaSortDown, FaSortUp } from 'react-icons/fa';\nimport { Else, If, Then, When } from 'react-if';\nimport { useQueryClient } from 'react-query';\nimport { connect } from 'react-redux';\nimport { useHistory } from 'react-router-dom';\nimport swal from 'sweetalert';\nimport getSortingIcon from 'jsx/helpers/getSortingIcon';\nimport ClearPurchase from './ClearPurchase';\nimport RefundPurchase from './RefundPurchase';\nimport ManagePurchase from './ManagePurchase';\n\ndayjs.extend(relativeTime);\n\nconst Purchase = () => {\n   const history = useHistory();\n\n   const handleOnClickAdd = () => {\n      history.push('/purchase/add');\n   };\n\n   return (\n      <>\n         <PageTItle activeMenu=\"purchase\" motherMenu=\"Diamond Tiles\" />\n         <div className=\"row tw-mb-8\">\n            <div className=\"col-xl-6\">\n               <Button variant=\"primary\" icon={AiFillPlusCircle} onClick={handleOnClickAdd}>\n                  Add New Purchase\n               </Button>\n            </div>\n         </div>\n         <ManagePurchase />\n      </>\n   );\n};\n\nconst mapStateToProps = ({ auth }) => ({\n   user: auth.user,\n});\n\nconst mapDispatchToProps = {};\nexport default connect(mapStateToProps, mapDispatchToProps)(Purchase);\n","/home/muneeb/dev/diamond-tiles-frontend/src/jsx/pages/suppliers/index.js",[],"/home/muneeb/dev/diamond-tiles-frontend/src/store/auth/actions.js",[],"/home/muneeb/dev/diamond-tiles-frontend/src/jsx/components/CreatableSelect.js",["541","542"],"import Creatable from 'react-select/creatable';\n\nconst selectStyles = {\n   control: (provided, state) => {\n      provided.borderColor = state.menuIsOpen ? '#44bdec' : 'hsl(0, 0%, 80%)';\n      provided.boxShadow = state.menuIsOpen ? '0 0 0 1px #44bdec' : '';\n      provided['&:hover'] = { borderColor: '#44bdec' };\n      provided.justifyContent = 'center';\n      provided.paddingTop = '0.2rem';\n      provided.paddingBottom = '0.2rem';\n\n      return provided;\n   },\n   valueContainer: (provided, state) => {\n      provided.justifyContent = 'center';\n      return provided;\n   },\n   menu: (provided, state) => {\n      provided.textAlign = 'center';\n      return provided;\n   },\n   option: (provided, state) => {\n      provided.backgroundColor = state.isSelected || state.isFocused ? '#44bdec' : 'transparent';\n\n      if (state.isFocused) provided.color = 'white';\n      return provided;\n   },\n};\n\nconst Select = ({ className = '', ...props }) => (\n   <Creatable menuPlacement=\"auto\" className={`tw-w-[auto] ${className}`} styles={selectStyles} {...props} />\n);\n\nexport default Select;\n","/home/muneeb/dev/diamond-tiles-frontend/src/jsx/components/Select.js",["543","544","545"],"import ReactSelect from 'react-select';\n\nconst selectStyles = (height) => ({\n   control: (provided, state) => {\n      provided.borderColor = state.menuIsOpen ? '#44bdec' : 'hsl(0, 0%, 80%)';\n      provided.boxShadow = state.menuIsOpen ? '0 0 0 1px #44bdec' : '';\n      provided['&:hover'] = { borderColor: '#44bdec' };\n      provided.justifyContent = 'center';\n      provided.paddingTop = '0.2rem';\n      provided.paddingBottom = '0.2rem';\n      provided.height = height;\n\n      console.log(provided);\n\n      return provided;\n   },\n   valueContainer: (provided, state) => {\n      provided.justifyContent = 'center';\n\n      return provided;\n   },\n   menu: (provided, state) => {\n      provided.textAlign = 'center';\n      return provided;\n   },\n   option: (provided, state) => {\n      provided.backgroundColor = state.isSelected || state.isFocused ? '#44bdec' : 'transparent';\n\n      if (state.isFocused) provided.color = 'white';\n      return provided;\n   },\n});\n\nconst Select = ({ width = 'tw-w-[100px]', className = '', height = '36px', ...props }) => (\n   <ReactSelect\n      menuPlacement=\"auto\"\n      className={`${width} ${className}`}\n      styles={() => selectStyles(height)}\n      {...props}\n   />\n);\n\nexport default Select;\n","/home/muneeb/dev/diamond-tiles-frontend/src/jsx/components/Button.js",[],"/home/muneeb/dev/diamond-tiles-frontend/src/jsx/components/Pagination.js",["546","547"],"import cls from 'classnames';\nimport { useState } from 'react';\nimport { AiOutlineDoubleLeft, AiOutlineDoubleRight, AiOutlineLeft, AiOutlineRight } from 'react-icons/ai';\nimport Select from './Select';\n\nconst getOption = (v) => ({ value: v, label: v });\nconst options = [getOption(5), getOption(10), getOption(25)];\n\nconst PaginationItem = ({\n   children,\n   className = '',\n   disabled,\n   first = false,\n   last = false,\n   active = false,\n   ...props\n}) => (\n   <li\n      {...props}\n      className={cls(\n         'tw-transition-all tw-cursor-pointer tw-flex tw-items-center tw-text-[#7E7E7E] tw-px-[12px] tw-py-[6px] tw-bg-white tw-border tw-border-solid',\n         className,\n         { 'tw-border-[#44bdec] tw-bg-[#44bdec] tw-text-white': active },\n         { 'tw-cursor-not-allowed': disabled },\n         { 'hover:tw-border-[#44bdec] hover:tw-bg-[#44bdec] hover:tw-text-white': !disabled },\n         { 'tw-rounded-l-md': first },\n         { 'tw-rounded-r-md': last }\n      )}\n   >\n      {children}\n   </li>\n);\n\nconst FirstPage = (props) => (\n   <PaginationItem first {...props}>\n      <AiOutlineDoubleLeft />\n   </PaginationItem>\n);\n\nconst PrevPage = (props) => (\n   <PaginationItem {...props}>\n      <AiOutlineLeft />\n   </PaginationItem>\n);\n\nconst EllipsisPage = (props) => (\n   <PaginationItem disabled {...props}>\n      ...\n   </PaginationItem>\n);\n\nconst NextPage = (props) => (\n   <PaginationItem {...props}>\n      <AiOutlineRight />\n   </PaginationItem>\n);\n\nconst LastPage = (props) => (\n   <PaginationItem last {...props}>\n      <AiOutlineDoubleRight />\n   </PaginationItem>\n);\n\nconst Page = ({ children, ...props }) => <PaginationItem {...props}>{children}</PaginationItem>;\n\nconst Pagination = ({\n   isLimitDisabled,\n   page,\n   onPageChange,\n   onLimitChange,\n   totalPages,\n   hasNextPage,\n   hasPrevPage,\n   totalDocs,\n}) => {\n   const [option, setOption] = useState(getOption(5));\n\n   const renderPagination = () => {\n      const pages = [];\n\n      const handleFirstPage = () => {\n         if (page > 1) onPageChange(1);\n      };\n\n      const handlePrevPage = () => {\n         if (page > 1) onPageChange((prev) => prev - 1);\n      };\n\n      const handleNextPage = () => {\n         if (page < totalPages) onPageChange((prev) => prev + 1);\n      };\n\n      const handleLastPage = () => {\n         if (page < totalPages) onPageChange(totalPages);\n      };\n\n      pages.push(<FirstPage disabled={page === 1} onClick={handleFirstPage} />);\n      pages.push(<PrevPage disabled={page === 1} onClick={handlePrevPage} />);\n\n      for (let currPage = 0; currPage < totalPages; currPage++) {\n         pages.push(\n            <Page active={page === currPage + 1} onClick={() => onPageChange(currPage + 1)}>\n               {currPage + 1}\n            </Page>\n         );\n      }\n\n      pages.push(<NextPage disabled={!hasNextPage} onClick={handleNextPage} />);\n      pages.push(<LastPage disabled={!hasNextPage} onClick={handleLastPage} />);\n\n      return pages;\n   };\n\n   return (\n      <div className=\"tw-flex tw-flex-col tw-items-center tw-gap-3 tw-overflow-visible\">\n         <p className=\"tw-m-0\">{`Showing ${\n            // eslint-disable-next-line no-nested-ternary\n            totalPages === page ? totalDocs : page * option.value > totalDocs ? totalDocs : page * option.value\n         } of ${totalDocs}`}</p>\n         <ul className=\"tw-flex \">{renderPagination()}</ul>\n         <Select\n            isDisabled={isLimitDisabled}\n            className=\"tw-mb-6\"\n            options={options}\n            placeholder=\"Select Page Size\"\n            value={option}\n            onChange={(opt) => {\n               setOption(opt);\n               onLimitChange(opt.value);\n            }}\n         />\n      </div>\n   );\n};\n\nexport default Pagination;\n","/home/muneeb/dev/diamond-tiles-frontend/src/jsx/components/SpinnerOverlay.js",[],"/home/muneeb/dev/diamond-tiles-frontend/src/jsx/components/ModalWrapper.js",[],"/home/muneeb/dev/diamond-tiles-frontend/src/jsx/layouts/PageTitle.js",[],"/home/muneeb/dev/diamond-tiles-frontend/src/jsx/components/invoice.js",[],["548","549","550","551","552"],"/home/muneeb/dev/diamond-tiles-frontend/src/jsx/layouts/Footer.js",[],"/home/muneeb/dev/diamond-tiles-frontend/src/jsx/helpers/index.js",[],"/home/muneeb/dev/diamond-tiles-frontend/src/jsx/pages/salaries/index.js",["553","554","555","556"],"/home/muneeb/dev/diamond-tiles-frontend/src/jsx/pages/units/index.js",["557","558","559","560","561","562","563","564","565","566","567","568","569","570","571","572","573","574"],"import useUrlState from '@ahooksjs/use-url-state';\nimport dayjs from 'dayjs';\nimport relativeTime from 'dayjs/plugin/relativeTime';\nimport Button from 'jsx/components/Button';\nimport ModalWrapper from 'jsx/components/ModalWrapper';\nimport SpinnerOverlay from 'jsx/components/SpinnerOverlay';\nimport { del, get, post, useAlert, useMutation, useQuery } from 'jsx/helpers';\nimport PageTItle from 'jsx/layouts/PageTitle';\nimport React, { useEffect, useMemo, useState } from 'react';\nimport { ButtonGroup, Card, Col, OverlayTrigger, Popover, Row, Table } from 'react-bootstrap';\nimport { AiFillDelete, AiFillPlusCircle, AiOutlineQuestionCircle, AiFillEye } from 'react-icons/ai';\nimport { Else, If, Then, When } from 'react-if';\nimport { useQueryClient } from 'react-query';\nimport swal from 'sweetalert';\nimport { useHistory } from 'react-router-dom';\nimport { useFormik } from 'formik';\nimport { connect, useDispatch } from 'react-redux';\nimport { userRoles } from 'jsx/helpers/enums';\nimport { setUnitsData, setUnitsVisibility } from 'store/actions';\nimport CreatableSelect from '../../components/CreatableSelect';\n\nconst Units = (props) => {\n   const history = useHistory();\n   dayjs.extend(relativeTime);\n   const [page, setPage] = useState(1);\n   const [limit, setLimit] = useState(5);\n   const [urlState, setUrlState] = useUrlState({});\n   const [search, setSearch] = useState('');\n\n   const [showModal, setShowModal] = useState(false);\n   const [selectedRow, setSelectedRow] = useState(null);\n\n   const alert = useAlert();\n\n   const queryClient = useQueryClient();\n\n   const dispatch = useDispatch();\n\n   const query = useQuery(['units', page, limit, search], () => get('/units', page, limit, '', '', search));\n   const getTypes = useQuery('types', () => get('/types'));\n   const deleteMutation = useMutation((id) => del(`/units/id/${id}`), {\n      onSuccess: async () => {\n         await queryClient.invalidateQueries('units');\n         alert.setAlert({\n            message: 'Unit deleted successfully',\n            variant: 'success',\n         });\n      },\n      onError: (err) => {\n         alert.setErrorAlert({ message: 'Unable to delete Unit', err });\n      },\n   });\n\n   const postMutation = useMutation((payload) => post('/units', payload), {\n      onSuccess: () => {\n         setShowModal(false);\n         setUrlState({});\n         query.refetch();\n      },\n      onError: (err) => {\n         alert.setErrorAlert({ message: 'Unable to add unit', err });\n      },\n   });\n   const postTypeMutation = useMutation((payload) => post('/types', payload), {\n      onSuccess: async () => {\n         await queryClient.invalidateQueries('types');\n      },\n   });\n\n   const isAdd = useMemo(() => urlState?.action === 'add', [urlState.action]);\n   const mutation = useMemo(() => postMutation, [postMutation]);\n\n   const handleOnClickAdd = () => {\n      dispatch(setUnitsVisibility(true));\n      dispatch(setUnitsData({}));\n      // setUrlState({ action: 'add' });\n   };\n\n   const handleOnClickDelete = (id) => {\n      swal({\n         title: 'Are you sure?',\n         text: 'Once deleted, you will not be able to recover it!',\n         icon: 'warning',\n         buttons: true,\n         dangerMode: true,\n      }).then((willDelete) => {\n         if (willDelete) {\n            deleteMutation.mutate(id);\n         }\n      });\n   };\n\n   const alertMarkup = alert.getAlert();\n\n   return (\n      <>\n         {alertMarkup ? (\n            <Row>\n               <Col lg={12}>{alertMarkup}</Col>\n            </Row>\n         ) : null}\n         <Card className=\"h-100\">\n            <When condition={query.isLoading || deleteMutation.isLoading}>\n               <SpinnerOverlay />\n            </When>\n            <Card.Header>\n               <Card.Title>Manage units</Card.Title>\n               <Button size=\"sm\" variant=\"primary\" icon={AiFillPlusCircle} onClick={handleOnClickAdd}>\n                  Add New Unit\n               </Button>\n            </Card.Header>\n            <Card.Body>\n               <If condition={query.data?.length > 0}>\n                  <Then>\n                     <Table className=\"tw-relative\" responsive>\n                        <thead>\n                           <tr>\n                              <th className=\"width80\">\n                                 <strong>#</strong>\n                              </th>\n                              <th>\n                                 <strong className=\"tw-cursor-pointer\">TITLE</strong>\n                              </th>\n                              <th>\n                                 <strong className=\"tw-cursor-pointer\">VALUE</strong>\n                              </th>\n                              <th>\n                                 <strong className=\"tw-cursor-pointer\">TYPE</strong>\n                              </th>\n                           </tr>\n                        </thead>\n                        <tbody>\n                           {query.data?.map((e, index) => (\n                              <tr key={`${e._id}`}>\n                                 <td>\n                                    <strong>{index + 1}</strong>\n                                 </td>\n                                 <td>{e.title}</td>\n                                 <td>{e.value}</td>\n                                 <td>{(e.type && e.type?.title) ?? 'N/A'}</td>\n                                 <td>\n                                    <OverlayTrigger\n                                       trigger={['hover', 'hover']}\n                                       placement=\"top\"\n                                       overlay={\n                                          <Popover className=\"tw-border-gray-500\">\n                                             <Popover.Content>{`Created by ${e.createdBy ?? 'N/A'} ${\n                                                dayjs(e.createdAt).diff(dayjs(), 'day', true) > 7\n                                                   ? `at ${dayjs(e.createdAt).format('DD-MMM-YYYY')}`\n                                                   : dayjs(e.createdAt).fromNow()\n                                             }.`}</Popover.Content>\n                                          </Popover>\n                                       }\n                                    >\n                                       <AiOutlineQuestionCircle className=\"tw-cursor-pointer\" />\n                                    </OverlayTrigger>\n                                 </td>\n                                 <When condition={props.user?.role !== userRoles.CASHIER}>\n                                    <td>\n                                       <Button\n                                          variant=\"danger\"\n                                          size=\"sm\"\n                                          icon={AiFillDelete}\n                                          onClick={() => handleOnClickDelete(e._id)}\n                                       />\n                                    </td>\n                                 </When>\n                              </tr>\n                           ))}\n                        </tbody>\n                     </Table>\n                  </Then>\n                  <Else>\n                     <When condition={!query.isLoading}>\n                        <p className=\"tw-m-0\">No units created</p>\n                     </When>\n                  </Else>\n               </If>\n            </Card.Body>\n         </Card>\n      </>\n   );\n};\nconst mapStateToProps = ({ auth }) => ({\n   user: auth.user,\n});\n\nconst mapDispatchToProps = {};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(React.memo(Units));\n","/home/muneeb/dev/diamond-tiles-frontend/src/jsx/pages/types/index.js",["575","576","577","578","579","580","581","582"],"import useUrlState from '@ahooksjs/use-url-state';\nimport dayjs from 'dayjs';\nimport relativeTime from 'dayjs/plugin/relativeTime';\nimport Button from 'jsx/components/Button';\nimport ModalWrapper from 'jsx/components/ModalWrapper';\nimport SpinnerOverlay from 'jsx/components/SpinnerOverlay';\nimport { del, get, post, useAlert, useMutation, useQuery } from 'jsx/helpers';\nimport React, { useMemo, useState } from 'react';\nimport { ButtonGroup, Card, Col, OverlayTrigger, Popover, Row, Table } from 'react-bootstrap';\nimport { AiFillDelete, AiFillEye, AiFillPlusCircle, AiOutlineQuestionCircle } from 'react-icons/ai';\nimport { Else, If, Then, When } from 'react-if';\nimport { useQueryClient } from 'react-query';\nimport { useHistory } from 'react-router-dom';\nimport swal from 'sweetalert';\nimport { connect, useDispatch } from 'react-redux';\nimport { userRoles } from 'jsx/helpers/enums';\nimport { setTypesData, setTypesVisibility } from 'store/actions';\n\nconst Types = (props) => {\n   const history = useHistory();\n   dayjs.extend(relativeTime);\n   const [urlState, setUrlState] = useUrlState({});\n\n   const [page, setPage] = useState(1);\n   const [limit, setLimit] = useState(5);\n   const [search, setSearch] = useState('');\n   const [showModal, setShowModal] = useState(false);\n   const [title, setTitle] = useState('');\n\n   const alert = useAlert();\n   const queryClient = useQueryClient();\n\n   const dispatch = useDispatch();\n\n   const query = useQuery('types', () => get('/types', page, limit, '', '', search));\n   const postMutation = useMutation((payload) => post('/types', payload), {\n      onSuccess: async () => {\n         await queryClient.invalidateQueries('units');\n         if (urlState.redirect) {\n            history.replace(urlState.redirect);\n         }\n         setShowModal(false);\n         query.refetch();\n      },\n      onError: (err) => {\n         alert.setErrorAlert({ message: 'Unable to add unit', err });\n      },\n   });\n   const deleteMutation = useMutation((id) => del(`/types/id/${id}`), {\n      onSuccess: async () => {\n         await queryClient.invalidateQueries('types');\n         alert.setAlert({\n            message: 'Type deleted successfully',\n            variant: 'success',\n         });\n      },\n      onError: (err) => {\n         alert.setErrorAlert({ message: 'Unable to delete Type', err });\n      },\n   });\n\n   const mutation = useMemo(() => postMutation, [postMutation]);\n\n   const handleOnClickAdd = () => {\n      // setUrlState({ action: 'add' });\n      dispatch(setTypesVisibility(true));\n      dispatch(setTypesData({}));\n   };\n\n   const handleOnClickDelete = (id) => {\n      swal({\n         title: 'Are you sure?',\n         text: 'Once deleted, you will not be able to recover it!',\n         icon: 'warning',\n         buttons: true,\n         dangerMode: true,\n      }).then((willDelete) => {\n         if (willDelete) {\n            deleteMutation.mutate(id);\n         }\n      });\n   };\n   const handleOnClickView = (id) => {\n      history.push(`/products/types/${id}`);\n   };\n\n   const handleSubmit = (e) => {\n      e.preventDefault();\n      mutation.mutate({ title });\n   };\n   const alertMarkup = alert.getAlert();\n\n   return (\n      <>\n         {alertMarkup ? (\n            <Row>\n               <Col lg={12}>{alertMarkup}</Col>\n            </Row>\n         ) : null}\n         <Card className=\"h-100\">\n            <When condition={query.isLoading || deleteMutation.isLoading}>\n               <SpinnerOverlay />\n            </When>\n            <Card.Header>\n               <Card.Title>Manage types</Card.Title>\n               <Button size=\"sm\" variant=\"primary\" icon={AiFillPlusCircle} onClick={handleOnClickAdd}>\n                  Add New Type\n               </Button>\n            </Card.Header>\n            <Card.Body>\n               <If condition={query.data?.length > 0}>\n                  <Then>\n                     <Table className=\"tw-relative\" responsive>\n                        <thead>\n                           <tr>\n                              <th className=\"width80\">\n                                 <strong>#</strong>\n                              </th>\n                              <th>\n                                 <strong>TITLE</strong>\n                              </th>\n                           </tr>\n                        </thead>\n                        <tbody>\n                           {query.data?.map((e, index) => (\n                              <tr key={`${e._id}`}>\n                                 <td>\n                                    <strong>{index + 1}</strong>\n                                 </td>\n                                 <td>{e.title}</td>\n                                 <td>\n                                    <OverlayTrigger\n                                       trigger={['hover', 'hover']}\n                                       placement=\"top\"\n                                       overlay={\n                                          <Popover className=\"tw-border-gray-500\">\n                                             <Popover.Content>{`Created by ${e.createdBy ?? 'N/A'} ${\n                                                dayjs(e.createdAt).diff(dayjs(), 'day', true) > 7\n                                                   ? `at ${dayjs(e.createdAt).format('DD-MMM-YYYY')}`\n                                                   : dayjs(e.createdAt).fromNow()\n                                             }.`}</Popover.Content>\n                                          </Popover>\n                                       }\n                                    >\n                                       <AiOutlineQuestionCircle className=\"tw-cursor-pointer\" />\n                                    </OverlayTrigger>\n                                 </td>\n                                 <td>\n                                    <ButtonGroup>\n                                       <Button\n                                          variant=\"dark\"\n                                          size=\"sm\"\n                                          icon={AiFillEye}\n                                          onClick={() => handleOnClickView(e._id)}\n                                       />\n                                       <When condition={props.user?.role !== userRoles.CASHIER}>\n                                          <Button\n                                             variant=\"danger\"\n                                             size=\"sm\"\n                                             icon={AiFillDelete}\n                                             onClick={() => handleOnClickDelete(e._id)}\n                                          />\n                                       </When>\n                                    </ButtonGroup>\n                                 </td>\n                              </tr>\n                           ))}\n                        </tbody>\n                     </Table>\n                  </Then>\n                  <Else>\n                     <When condition={!query.isLoading}>\n                        <p className=\"tw-m-0\">No types created</p>\n                     </When>\n                  </Else>\n               </If>\n            </Card.Body>\n         </Card>\n      </>\n   );\n};\n\nconst mapStateToProps = ({ auth }) => ({\n   user: auth.user,\n});\n\nconst mapDispatchToProps = {};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(React.memo(Types));\n","/home/muneeb/dev/diamond-tiles-frontend/src/jsx/layouts/nav/index.js",["583"],"import React, { Fragment, useState } from 'react';\nimport SideBar from './SideBar';\nimport NavHader from './NavHader';\nimport Header from './Header';\nimport ChatBox from '../ChatBox';\n\nconst JobieNav = ({ title }) => {\n   const [toggle, setToggle] = useState('');\n   const onClick = (name) => setToggle(toggle === name ? '' : name);\n   return (\n      <>\n         <NavHader />\n         <SideBar />\n         <Header\n            onNote={() => onClick('chatbox')}\n            onNotification={() => onClick('notification')}\n            onProfile={() => onClick('profile')}\n            toggle={toggle}\n            title={title}\n            onBox={() => onClick('box')}\n         />\n         {/* <ChatBox onClick={() => onClick('chatbox')} toggle={toggle} /> */}\n      </>\n   );\n};\n\nexport default JobieNav;\n","/home/muneeb/dev/diamond-tiles-frontend/src/jsx/pages/expenseTypes/index.js",["584","585"],"import dayjs from 'dayjs';\nimport relativeTime from 'dayjs/plugin/relativeTime';\nimport { useFormik } from 'formik';\nimport Button from 'jsx/components/Button';\nimport ModalWrapper from 'jsx/components/ModalWrapper';\nimport SpinnerOverlay from 'jsx/components/SpinnerOverlay';\nimport { del, get, post, useAlert, useMutation, useQuery } from 'jsx/helpers';\nimport { userRoles } from 'jsx/helpers/enums';\nimport React, { useState } from 'react';\nimport { ButtonGroup, Card, Col, OverlayTrigger, Popover, Row, Table } from 'react-bootstrap';\nimport { AiFillDelete, AiFillPlusCircle, AiOutlineQuestionCircle } from 'react-icons/ai';\nimport { FaSort, FaSortDown, FaSortUp } from 'react-icons/fa';\nimport { Else, If, Then, When } from 'react-if';\nimport { useQueryClient } from 'react-query';\nimport { connect } from 'react-redux';\nimport swal from 'sweetalert';\n\nconst ExpenseTypes = (props) => {\n   dayjs.extend(relativeTime);\n   const [page, setPage] = useState(1);\n   const [limit, setLimit] = useState(5);\n   const [sort, setSort] = useState({ field: null, order: -1 });\n\n   const [showModal, setShowModal] = useState(false);\n\n   const alert = useAlert();\n\n   const queryClient = useQueryClient();\n\n   const query = useQuery(['expenses/types', page, limit, sort.field, sort.order], () =>\n      get('/expenses/types', page, limit, sort.field, sort.order)\n   );\n   const deleteMutation = useMutation((id) => del(`/expenses/types/id/${id}`), {\n      onSuccess: async () => {\n         await queryClient.invalidateQueries('expenses/types');\n         alert.setAlert({\n            message: 'Expense type deleted successfully.',\n            variant: 'success',\n         });\n      },\n      onError: (err) => {\n         alert.setErrorAlert({ message: 'Unable to delete Expense type.', err });\n      },\n   });\n\n   const postMutation = useMutation((payload) => post('/expenses/types', payload), {\n      onSuccess: () => {\n         setShowModal(false);\n         query.refetch();\n      },\n      onError: (err) => {\n         alert.setErrorAlert({ message: 'Unable to add Expense type.', err });\n      },\n   });\n\n   const formik = useFormik({\n      initialValues: {\n         title: '',\n      },\n      validateOnChange: false,\n      validateOnBlur: false,\n      onSubmit: (values) => {\n         postMutation.mutate(values);\n      },\n   });\n\n   const handleOnClickAdd = () => {\n      setShowModal(true);\n      formik.setFieldValue('title', '');\n   };\n\n   const handleOnClickDelete = (id) => {\n      swal({\n         title: 'Are you sure?',\n         text: 'Once deleted, you will not be able to recover it!',\n         icon: 'warning',\n         buttons: true,\n         dangerMode: true,\n      }).then((willDelete) => {\n         if (willDelete) {\n            deleteMutation.mutate(id);\n         }\n      });\n   };\n\n   const handleSort = (key) => {\n      setSort((prev) => ({ field: key, order: prev.order * -1 }));\n   };\n   const alertMarkup = alert.getAlert();\n\n   return (\n      <>\n         {alertMarkup ? (\n            <Row>\n               <Col lg={12}>{alertMarkup}</Col>\n            </Row>\n         ) : null}\n         <Card className=\"h-100\">\n            <When condition={query.isLoading || deleteMutation.isLoading}>\n               <SpinnerOverlay />\n            </When>\n            <Card.Header>\n               <Card.Title>Manage Types</Card.Title>\n               <Button size=\"sm\" variant=\"primary\" icon={AiFillPlusCircle} onClick={handleOnClickAdd}>\n                  Add New Expense Type\n               </Button>\n            </Card.Header>\n            <Card.Body>\n               <If condition={query.data?.length > 0}>\n                  <Then>\n                     <Table className=\"tw-relative\" responsive>\n                        <thead>\n                           <tr>\n                              <th className=\"width80\">\n                                 <strong>#</strong>\n                              </th>\n                              <th className=\"tw-cursor-pointer\" onClick={() => handleSort('title')}>\n                                 <strong className=\"tw-cursor-pointer\">\n                                    TITLE\n                                    <span>\n                                       <When condition={sort.field !== 'title'}>\n                                          <FaSort className=\"d-inline mx-1\" />\n                                       </When>\n                                       <When condition={sort.field === 'title' && sort.order === -1}>\n                                          <FaSortDown className=\"d-inline mx-1\" />\n                                       </When>\n                                       <When condition={sort.field === 'title' && sort.order === 1}>\n                                          <FaSortUp className=\"d-inline mx-1\" />\n                                       </When>\n                                    </span>\n                                 </strong>\n                              </th>\n                           </tr>\n                        </thead>\n                        <tbody>\n                           {query.data?.map((e, index) => (\n                              <tr key={`${e._id}`}>\n                                 <td>\n                                    <strong>{index + 1}</strong>\n                                 </td>\n                                 <td>{e.title}</td>\n                                 <td>\n                                    <OverlayTrigger\n                                       trigger={['hover', 'hover']}\n                                       placement=\"top\"\n                                       overlay={\n                                          <Popover className=\"tw-border-gray-500\">\n                                             <Popover.Content>{`Created by ${e.createdBy ?? 'N/A'} ${\n                                                dayjs(e.createdAt).diff(dayjs(), 'day', true) > 7\n                                                   ? `at ${dayjs(e.createdAt).format('DD-MMM-YYYY')}`\n                                                   : dayjs(e.createdAt).fromNow()\n                                             }.`}</Popover.Content>\n                                          </Popover>\n                                       }\n                                    >\n                                       <AiOutlineQuestionCircle className=\"tw-cursor-pointer\" />\n                                    </OverlayTrigger>\n                                 </td>\n                                 <When condition={props.user?.role !== userRoles.CASHIER}>\n                                    <td>\n                                       <ButtonGroup>\n                                          <Button\n                                             variant=\"danger\"\n                                             size=\"sm\"\n                                             icon={AiFillDelete}\n                                             onClick={() => handleOnClickDelete(e._id)}\n                                          />\n                                       </ButtonGroup>\n                                    </td>\n                                 </When>\n                              </tr>\n                           ))}\n                        </tbody>\n                     </Table>\n                  </Then>\n                  <Else>\n                     <When condition={!query.isLoading}>\n                        <p className=\"tw-m-0\">No types found</p>\n                     </When>\n                  </Else>\n               </If>\n            </Card.Body>\n         </Card>\n\n         {/* ADD Modal */}\n         <ModalWrapper\n            show={showModal}\n            onHide={() => {\n               setShowModal(false);\n            }}\n            title=\"Add New Expense Type\"\n            isLoading={query.isLoading || postMutation.isLoading}\n            size=\"md\"\n            onSubmit={formik.handleSubmit}\n            submitButtonText=\"Confirm\"\n         >\n            <form onSubmit={formik.handleSubmit}>\n               <div className=\"row\">\n                  <div className=\"form-group col-xl-6\">\n                     <label className=\"col-form-label\">Title</label>\n                     <input\n                        className=\"form-control\"\n                        onChange={formik.handleChange}\n                        type=\"text\"\n                        name=\"title\"\n                        value={formik.values.title}\n                     />\n                  </div>\n               </div>\n            </form>\n         </ModalWrapper>\n      </>\n   );\n};\n\nconst mapStateToProps = ({ auth }) => ({\n   user: auth.user,\n});\n\nconst mapDispatchToProps = {};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(React.memo(ExpenseTypes));\n","/home/muneeb/dev/diamond-tiles-frontend/src/jsx/helpers/useAlert.js",["586"],"import React, { useCallback, useEffect, useMemo, useRef, useState } from 'react';\nimport { Alert } from 'react-bootstrap';\nimport { When } from 'react-if';\nimport cls from 'classnames';\nimport { getError } from './server';\n\nexport const useAlert = () => {\n   const [isShowing, setIsShowing] = useState(false);\n   const [message, setMessage] = useState('');\n   const [variant, setVariant] = useState('success');\n\n   const callback = useRef(null);\n   const timeout = useRef(null);\n\n   // eslint-disable-next-line arrow-body-style\n   useEffect(() => {\n      return () => {\n         if (timeout.current) clearTimeout(timeout.current);\n      };\n   }, []);\n\n   const resetTimeout = useCallback((duration) => {\n      if (timeout.current) clearTimeout(timeout.current);\n      timeout.current = setTimeout(() => {\n         setIsShowing(false);\n         timeout.current = null;\n         if (callback.current) callback.current();\n      }, duration);\n   }, []);\n\n   const getAlert = useCallback(\n      () =>\n         isShowing ? (\n            <Alert\n               className=\"alert-dismissible fade show\"\n               variant={variant}\n               dismissible\n               onClose={() => setIsShowing(false)}\n            >\n               <p className={cls(`tw-m-0 tw-opacity-60`, { 'tw-text-black': variant === 'success' })}>{message}</p>\n            </Alert>\n         ) : null,\n      [isShowing, message, variant]\n   );\n\n   const setAlert = useCallback(\n      ({ message: msg = '', variant: v = 'success', callback: cb = null, duration: d = 3000 }) => {\n         callback.current = cb;\n         resetTimeout(d);\n         setIsShowing(true);\n         setMessage(msg);\n         setVariant(v);\n      },\n      [resetTimeout]\n   );\n\n   const setErrorAlert = useCallback(\n      ({ message: msg = 'Unable to dispatch action', err, callback: cb = null, duration: d = 6000 }) => {\n         resetTimeout(d);\n         const m = (\n            <>\n               <strong>{msg}</strong>\n               <br />\n               {getError(err).map((e, i, a) => (\n                  <React.Fragment key={`error-${i}`}>\n                     <p className=\"tw-m-0\">{e}</p>\n                     {i < a.length - 2 ? <br /> : null}\n                  </React.Fragment>\n               ))}\n            </>\n         );\n\n         callback.current = cb;\n         setIsShowing(true);\n         setMessage(m);\n         setVariant('danger');\n      },\n      [resetTimeout]\n   );\n\n   const alert = useMemo(() => ({ getAlert, setAlert, setErrorAlert }), [getAlert, setAlert, setErrorAlert]);\n\n   return alert;\n};\n","/home/muneeb/dev/diamond-tiles-frontend/src/jsx/helpers/server.js",[],"/home/muneeb/dev/diamond-tiles-frontend/src/jsx/helpers/useQuery.js",[],"/home/muneeb/dev/diamond-tiles-frontend/src/jsx/layouts/ChatBox.js",["587"],"import React, { useState } from 'react';\n\n/// Scroll\nimport PerfectScrollbar from 'react-perfect-scrollbar';\n\nconst ChatBox = ({ onClick, toggle }) => {\n   const [toggleTab, settoggleTab] = useState(window.location.hash.slice(1) ? window.location.hash.slice(1) : 'chat');\n\n   const dataToggle = [\n      { href: '#notes', name: 'Notes' },\n      { href: '#alerts', name: 'Alerts' },\n      { href: '#chat', name: 'Chat' },\n   ];\n\n   return (\n      <div className={`chatbox ${toggle === 'chatbox' ? 'active' : ''}`}>\n         <div className=\"chatbox-close\" label=\"chatbox-close\" role=\"button\" tabIndex=\"0\" onClick={() => onClick()} />\n         <div className=\"custom-tab-1\">\n            <ul className=\"nav nav-tabs\">\n               {dataToggle.map((data, i) => (\n                  <li className=\"nav-item\" key={i}>\n                     <a\n                        className={`nav-link ${toggleTab === data.name.toLocaleLowerCase() ? 'active' : ''}`}\n                        data-toggle=\"tab\"\n                        href={data.href}\n                        onClick={() => settoggleTab(data.name.toLocaleLowerCase())}\n                     >\n                        {data.name}\n                     </a>\n                  </li>\n               ))}\n            </ul>\n            <div className=\"tab-content\">\n               {/* <Chat PerfectScrollbar={PerfectScrollbar} toggle={toggle} toggleTab={toggleTab} />\n               <Notes PerfectScrollbar={PerfectScrollbar} toggle={toggle} toggleTab={toggleTab} />\n               <Alerts PerfectScrollbar={PerfectScrollbar} toggle={toggle} toggleTab={toggleTab} /> */}\n            </div>\n         </div>\n      </div>\n   );\n};\n\nexport default ChatBox;\n","/home/muneeb/dev/diamond-tiles-frontend/src/jsx/layouts/nav/NavHader.js",["588","589"],"import React, { useState } from 'react';\n\n/// React router dom\nimport { Link } from 'react-router-dom';\n\n/// images\nimport logo from '../../../images/logo.png';\nimport logoText from '../../../images/logo-text.png';\n\nconst NavHader = () => {\n   const [toggle, setToggle] = useState(false);\n   return (\n      <div className=\"nav-header\">\n         <Link to=\"/\" className=\"brand-logo\">\n            {/* <img className=\"logo-abbr\" src={logo} alt=\"\" />\n            <img className=\"logo-compact\" src={logoText} alt=\"\" /> */}\n            {/* <img className=\"brand-title\" src={logoText} alt=\"\" /> */}\n            <h1 className=\"brand-title tw-text-2xl tw-text-black tw-font-bold\">Diamond Tiles</h1>\n         </Link>\n\n         <div className=\"nav-control\" role=\"button\" tabIndex=\"0\" onClick={() => setToggle(!toggle)}>\n            <div className={`hamburger ${toggle ? 'is-active' : ''}`}>\n               <span className=\"line\" />\n               <span className=\"line\" />\n               <span className=\"line\" />\n            </div>\n         </div>\n      </div>\n   );\n};\n\nexport default NavHader;\n","/home/muneeb/dev/diamond-tiles-frontend/src/jsx/layouts/nav/Header.js",["590","591","592","593","594"],"import React from 'react';\n/// Image\nimport Avatar from 'react-avatar';\nimport { connect } from 'react-redux';\nimport { Link, useHistory } from 'react-router-dom';\nimport { setLogout } from 'store/auth/actions';\n\nconst pages = ['products', 'suppliers', 'customers', 'users', 'employees', 'purchase', 'sale', 'khaata', 'expenses'];\n\nconst Header = ({ onNote, toggle, onProfile, onNotification, onBox, logout }) => {\n   const history = useHistory();\n   const path = window.location.pathname.split('/');\n   const name = path[path.length - 1].split('-');\n   const filterName = name.length >= 3 ? name.filter((n, i) => i > 0) : name;\n\n   let finalName = '';\n\n   for (const page of pages) {\n      if (filterName.includes(page)) {\n         finalName = filterName.find((f) => f === page);\n         break;\n      }\n   }\n\n   const handleLogout = () => localStorage.clear();\n\n   React.useEffect(() => {\n      const token = localStorage.getItem('auth_token');\n      if (!token) {\n         logout();\n         localStorage.clear();\n         history.push('/page-login');\n      }\n   }, []);\n\n   return (\n      <div className=\"header\">\n         <div className=\"header-content\">\n            <nav className=\"navbar navbar-expand\">\n               <div className=\"collapse navbar-collapse justify-content-between\">\n                  <div className=\"header-left\">\n                     <div className=\"dashboard_bar\" style={{ textTransform: 'capitalize' }}>\n                        {finalName || 'Dashboard'}\n                     </div>\n                  </div>\n                  <ul className=\"navbar-nav header-right\">\n                     <li className=\"nav-item dropdown header-profile\">\n                        <Link\n                           to=\"#\"\n                           role=\"button\"\n                           data-toggle=\"dropdown\"\n                           className={`nav-item dropdown header-profile ${toggle === 'profile' ? 'show' : ''}`}\n                           onClick={() => onProfile()}\n                        >\n                           {/* <img alt=\"Profile\" src={profile} width={20} /> */}\n                           <Avatar name=\"Foo Bar\" size=\"38\" textSizeRatio={2.9} round />\n                        </Link>\n                        <div className={`dropdown-menu dropdown-menu-right ${toggle === 'profile' ? 'show' : ''}`}>\n                           <Link to=\"/\" className=\"dropdown-item ai-icon\" onClick={handleLogout}>\n                              <svg\n                                 id=\"icon-logout\"\n                                 xmlns=\"http://www.w3.org/2000/svg\"\n                                 className=\"text-danger\"\n                                 width={18}\n                                 height={18}\n                                 viewBox=\"0 0 24 24\"\n                                 fill=\"none\"\n                                 stroke=\"currentColor\"\n                                 strokeWidth={2}\n                                 strokeLinecap=\"round\"\n                                 strokeLinejoin=\"round\"\n                              >\n                                 <path d=\"M9 21H5a2 2 0 0 1-2-2V5a2 2 0 0 1 2-2h4\" />\n                                 <polyline points=\"16 17 21 12 16 7\" />\n                                 <line x1={21} y1={12} x2={9} y2={12} />\n                              </svg>\n                              <span className=\"ml-2\">Logout </span>\n                           </Link>\n                        </div>\n                     </li>\n                  </ul>\n               </div>\n            </nav>\n         </div>\n      </div>\n   );\n};\n\nconst mapStateToProps = ({ auth }) => ({});\n\nconst mapDispatchToProps = (dispatch) => ({\n   logout: () => dispatch(setLogout()),\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Header);\n","/home/muneeb/dev/diamond-tiles-frontend/src/jsx/layouts/nav/SideBar.js",["595","596","597"],"/home/muneeb/dev/diamond-tiles-frontend/src/jsx/pages/purchase/PurchaseInvoice.js",["598","599","600","601","602","603","604","605","606","607","608"],"import React from 'react';\nimport ReactToPrint from 'react-to-print';\nimport { connect } from 'react-redux';\nimport dayjs from 'dayjs';\nimport logo from '../../../images/diamond-tiles-logo.png';\n\nclass PurchaseInvoice extends React.Component {\n   render() {\n      console.log(this.props.invoiceNum);\n      return (\n         <div className=\"m-5\">\n            <div className=\"row mb-2\">\n               <h1 className=\"col-10 text-center flex-2\">INVOICE</h1>\n               <img className=\"col-2 flex-1 text-end\" src={logo} style={{ maxWidth: '100px', maxHeight: '100px' }} />\n            </div>\n            <div className=\"d-flex flex-row justify-content-between mt-5\">\n               <div className=\"\">\n                  <h4 className=\"p-0 m-0\">Diamond Tiles</h4>\n                  <p className=\"p-0 m-0\">Main G. T Road, Bahtr Mor, Wah Cantt</p>\n                  <p className=\"p-0 m-0\">0305-2200111</p>\n                  <p className=\"p-0 m-0\">diamondtiles.pk</p>\n               </div>\n               {/* <div className=\"\">\n                  <h4 className=\"p-0 m-0\">INVOICE TO</h4>\n                  <p className=\"p-0 m-0\">John Doe</p>\n                  <p className=\"p-0 m-0\">0305-2200111</p>\n               </div> */}\n               <div className=\"\">\n                  <h4 className=\"p-0 m-0 text-right\">Invoice Number</h4>\n                  <p className=\"p-0 m-0 text-right\">{`#${this.props.invoiceNum}`}</p>\n                  <h4 className=\"p-0 m-0 text-right\">Date of Invoice</h4>\n                  <p className=\"p-0 m-0 text-right\">{dayjs().format('DD-MMM-YYYY')}</p>\n               </div>\n            </div>\n            <table className=\"table table-striped my-4\">\n               <thead>\n                  <tr>\n                     <th className=\"center\">#</th>\n                     <th className=\"center\">Model Number</th>\n                     <th className=\"center\">Quantity</th>\n                     <th className=\"center\">Unit</th>\n                     <th className=\"center\">Subtotal</th>\n                  </tr>\n               </thead>\n               <tbody>\n                  {this.props?.data().data &&\n                     this.props?.data().data.map((e) => (\n                        <tr key={e?._id}>\n                           <td>{e?.serialNumber ?? ''}</td>\n                           <td>{e?.modelNumber ?? ''}</td>\n                           <td>{e?.quantity ?? ''}</td>\n                           <td>{e?.unit ?? ''}</td>\n                           <td>{e?.price ?? ''}</td>\n                        </tr>\n                     ))}\n               </tbody>\n            </table>\n            <div className=\"row mt-5\">\n               <div className=\"col-lg-4 col-sm-5\"> </div>\n               <div className=\"col-lg-4 col-sm-5 ml-auto\">\n                  <table className=\"table table-clear\">\n                     <tbody>\n                        <tr>\n                           <td className=\"left\">\n                              <strong>Total</strong>\n                           </td>\n                           <td className=\"right\">\n                              <strong>{this.props?.data().total}</strong>\n                           </td>\n                        </tr>\n                        <tr>\n                           <td className=\"left\">\n                              <strong>Paid</strong>\n                           </td>\n                           <td className=\"right\">\n                              <strong>{this.props?.data().paid}</strong>\n                           </td>\n                        </tr>\n                        <tr>\n                           <td className=\"left\">\n                              <strong>Remaining</strong>\n                           </td>\n                           <td className=\"right\">\n                              <strong>{this.props?.data().remaining}</strong>\n                           </td>\n                        </tr>\n                     </tbody>\n                  </table>\n               </div>\n            </div>\n            <div className=\"d-flex flex-row justify-content-center mt-5\">\n               <p>POS Developed by Hassan Naveed - 03415615279</p>\n            </div>\n         </div>\n      );\n   }\n}\n\nclass Print extends React.Component {\n   render() {\n      return (\n         <div>\n            <ReactToPrint\n               // eslint-disable-next-line react/button-has-type\n               trigger={() => <button ref={this.props.printRef} className=\"tw-invisible\" />}\n               content={() => this.componentRef}\n            />\n            <PurchaseInvoice\n               ref={(el) => (this.componentRef = el)}\n               data={this.props.data}\n               invoiceNum={this.props.invoiceNum}\n            />\n         </div>\n      );\n   }\n}\n\nconst mapStateToProps = ({ auth }) => ({\n   user: auth.user,\n});\n\nconst mapDispatchToProps = {};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Print);\n",["609","610","611","612","613"],"/home/muneeb/dev/diamond-tiles-frontend/src/jsx/pages/sale/SaleInvoice.js",["614","615","616","617","618","619","620","621","622"],"import React from 'react';\nimport ReactToPrint from 'react-to-print';\nimport { connect } from 'react-redux';\nimport dayjs from 'dayjs';\nimport logo from '../../../images/diamond-tiles-logo.png';\n\nclass SaleInvoice extends React.Component {\n   render() {\n      return (\n         <div className=\"m-5\">\n            <div className=\"row mb-2\">\n               <h1 className=\"col-10 text-center flex-2\">INVOICE</h1>\n               <img className=\"col-2 flex-1 text-end\" src={logo} style={{ maxWidth: '100px', maxHeight: '100px' }} />\n            </div>\n            <div className=\"d-flex flex-row justify-content-between mt-5\">\n               <div className=\"\">\n                  <h4 className=\"p-0 m-0\">Diamond Tiles</h4>\n                  <p className=\"p-0 m-0\">Main G. T Road, Bahtr Mor, Wah Cantt</p>\n                  <p className=\"p-0 m-0\">0305-2200111</p>\n                  <p className=\"p-0 m-0\">diamondtiles.pk</p>\n               </div>\n               {/* <div className=\"\">\n                  <h4 className=\"p-0 m-0\">INVOICE TO</h4>\n                  <p className=\"p-0 m-0\">John Doe</p>\n                  <p className=\"p-0 m-0\">0305-2200111</p>\n               </div> */}\n               <div className=\"\">\n                  <h4 className=\"p-0 m-0 text-right\">Invoice Number</h4>\n                  <p className=\"p-0 m-0 text-right\">{`#${this.props.invoiceNum}`}</p>\n                  <h4 className=\"p-0 m-0 text-right\">Date of Invoice</h4>\n                  <p className=\"p-0 m-0 text-right\">{dayjs().format('DD-MMM-YYYY')}</p>\n               </div>\n            </div>\n            <table className=\"table table-striped my-4\">\n               <thead>\n                  <tr>\n                     <th className=\"center\">Serial Number</th>\n                     <th className=\"center\">Model Number</th>\n                     <th className=\"center\">Price</th>\n                     <th className=\"center\">Quantity</th>\n                     <th className=\"center\">Unit</th>\n                     <th className=\"center\">Subtotal</th>\n                  </tr>\n               </thead>\n               <tbody>\n                  {this.props?.data().data &&\n                     this.props?.data().data.map((e) => (\n                        <tr key={e?._id}>\n                           <td>{e?.serialNumber ?? ''}</td>\n                           <td>{e?.modelNumber ?? ''}</td>\n                           <td>{e?.price ?? ''}</td>\n                           <td>{e?.quantity ?? ''}</td>\n                           <td>{e?.unit ?? ''}</td>\n                           <td>{e?.subTotal ?? ''}</td>\n                        </tr>\n                     ))}\n               </tbody>\n            </table>\n            <div className=\"row mt-5\">\n               <div className=\"col-lg-4 col-sm-5\"> </div>\n               <div className=\"col-lg-4 col-sm-5 ml-auto\">\n                  <table className=\"table table-clear\">\n                     <tbody>\n                        <tr>\n                           <td className=\"left\">\n                              <strong>Total</strong>\n                           </td>\n                           <td className=\"right\">\n                              <strong>{this.props?.data().total}</strong>\n                           </td>\n                        </tr>\n                        <tr>\n                           <td className=\"left\">\n                              <strong>Paid</strong>\n                           </td>\n                           <td className=\"right\">\n                              <strong>{this.props?.data().paid}</strong>\n                           </td>\n                        </tr>\n                        <tr>\n                           <td className=\"left\">\n                              <strong>Remaining</strong>\n                           </td>\n                           <td className=\"right\">\n                              <strong>{this.props?.data().remaining}</strong>\n                           </td>\n                        </tr>\n                     </tbody>\n                  </table>\n               </div>\n            </div>\n            <div className=\"d-flex flex-row justify-content-center mt-5\">\n               <p>POS Developed by Hassan Naveed - 03415615279</p>\n            </div>\n         </div>\n      );\n   }\n}\n\nclass Print extends React.Component {\n   render() {\n      return (\n         <div>\n            <ReactToPrint\n               // eslint-disable-next-line react/button-has-type\n               trigger={() => <button ref={this.props.printRef} className=\"tw-invisible\" />}\n               content={() => this.componentRef}\n            />\n            <SaleInvoice\n               ref={(el) => (this.componentRef = el)}\n               data={this.props.data}\n               invoiceNum={this.props.invoiceNum}\n            />\n         </div>\n      );\n   }\n}\n\nconst mapStateToProps = ({ auth }) => ({\n   user: auth.user,\n});\n\nconst mapDispatchToProps = {};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Print);\n","/home/muneeb/dev/diamond-tiles-frontend/src/jsx/pages/purchase/RefundPurchase.js",["623","624","625","626","627","628","629","630"],"import produce from 'immer';\nimport ModalWrapper from 'jsx/components/ModalWrapper';\nimport Select from 'jsx/components/Select';\nimport SpinnerOverlay from 'jsx/components/SpinnerOverlay';\nimport { get, getV2, put, useAlert, useQuery } from 'jsx/helpers';\nimport _, { isArray } from 'lodash';\nimport React, { useEffect, useState } from 'react';\nimport { Col, Form, Row } from 'react-bootstrap';\nimport { When } from 'react-if';\nimport { useMutation, useQueryClient } from 'react-query';\nimport { useHistory } from 'react-router-dom';\n\nconst RefundPurchase = ({ refundPurchase, toggle, onClose, onOpen, ...props }) => {\n   const queryClient = useQueryClient();\n\n   const alert = useAlert();\n\n   const [refund, setRefund] = useState([]);\n\n   const purchase = useQuery(\n      ['refund-purchase', refundPurchase],\n      () => getV2(`/purchases/id/${refundPurchase}`, { page: 1, limit: 1000 }),\n      {\n         onSuccess: (data) => {\n            const refunds = data.products.map(({ product }) => {\n               const returned = {};\n               returned.product = product._id;\n\n               if (product.type.title.toLowerCase() === 'tile') returned.variants = { a: '', b: '', c: '', d: '' };\n               else returned.quantity = '';\n\n               return returned;\n            });\n            if (!refund.length) setRefund(refunds);\n         },\n      }\n   );\n\n   const mutation = useMutation((payload) => put(`/purchases/${refundPurchase}/refund`, payload), {\n      onSuccess: async () => {\n         await queryClient.invalidateQueries('purchases');\n         onClose();\n         setRefund([]);\n      },\n      onError: (err) => {\n         alert.setErrorAlert({ message: 'Unable to refund purchase', err });\n      },\n   });\n\n   const alertMarkup = alert.getAlert();\n\n   const handleChangeQuantity = (index, q) => {\n      const updatedRefund = produce(refund, (draft) => {\n         draft[index].quantity = q;\n      });\n      setRefund(updatedRefund);\n   };\n\n   const handleChangeVariantQuantity = (index, variant, q) => {\n      const updatedRefund = produce(refund, (draft) => {\n         draft[index].variants[variant] = q;\n      });\n      setRefund(updatedRefund);\n   };\n\n   const handleSubmit = (e) => {\n      e.preventDefault();\n\n      const referenceRefund = _.cloneDeep(refund);\n\n      const payload = [];\n\n      referenceRefund.forEach((r) => {\n         if (r.quantity) payload.push(r);\n         if (r.variants) {\n            const variants = _.cloneDeep(r.variants);\n            Object.entries(variants).forEach(([key, value]) => {\n               if (!value) delete variants[key];\n            });\n\n            if (Object.keys(variants).length) {\n               r.variants = variants;\n               payload.push(r);\n            }\n         }\n      });\n\n      mutation.mutate(payload);\n   };\n\n   return (\n      <>\n         <ModalWrapper\n            show={refundPurchase}\n            onHide={() => {\n               if (!mutation.isLoading || !purchase.isLoading) {\n                  onClose();\n                  setRefund([]);\n               }\n            }}\n            isLoading={mutation.isLoading || purchase.isLoading}\n            isDisabled={mutation.isLoading || purchase.isLoading}\n            title=\"Refund Purchase\"\n            onSubmit={handleSubmit}\n            submitButtonText=\"Refund\"\n            size=\"xl\"\n            {...props}\n         >\n            {alertMarkup ? (\n               <Row>\n                  <Col lg={12}>{alertMarkup}</Col>\n               </Row>\n            ) : null}\n            <form onSubmit={handleSubmit}>\n               {purchase.data?.products.map((product, index) => {\n                  const isVarianted = product.variants;\n                  return (\n                     <div className=\"form-group\" key={`product-${index}`}>\n                        <label className=\"col-form-label\">Product</label>\n                        <div className=\"tw-flex\">\n                           <input\n                              className=\"form-control\"\n                              type=\"text\"\n                              value={product.product.modelNumber}\n                              style={{ flex: isVarianted ? 1 : 2 }}\n                              disabled\n                           />\n                           {isVarianted ? (\n                              <div className=\"tw-flex\" style={{ flex: 3 }}>\n                                 <input\n                                    className=\"form-control\"\n                                    type=\"text\"\n                                    placeholder=\"A\"\n                                    value={refund[index]?.variants.a}\n                                    onChange={(e) => handleChangeVariantQuantity(index, 'a', e.target.value)}\n                                 />\n                                 <input\n                                    className=\"form-control\"\n                                    type=\"text\"\n                                    placeholder=\"B\"\n                                    value={refund[index]?.variants.b}\n                                    onChange={(e) => handleChangeVariantQuantity(index, 'b', e.target.value)}\n                                 />\n                                 <input\n                                    className=\"form-control\"\n                                    type=\"text\"\n                                    placeholder=\"C\"\n                                    value={refund[index]?.variants.c}\n                                    onChange={(e) => handleChangeVariantQuantity(index, 'c', e.target.value)}\n                                 />\n                                 <input\n                                    className=\"form-control\"\n                                    type=\"text\"\n                                    placeholder=\"D\"\n                                    value={refund[index]?.variants.d}\n                                    onChange={(e) => handleChangeVariantQuantity(index, 'd', e.target.value)}\n                                 />\n                              </div>\n                           ) : (\n                              <input\n                                 className=\"form-control\"\n                                 style={{ flex: 1 }}\n                                 type=\"text\"\n                                 name=\"modelNumber\"\n                                 placeholder=\"Quantity\"\n                                 value={refund[index]?.quantity}\n                                 onChange={(e) => handleChangeQuantity(index, e.target.value)}\n                              />\n                           )}\n                        </div>\n                     </div>\n                  );\n               })}\n            </form>\n         </ModalWrapper>\n      </>\n   );\n};\n\nexport default RefundPurchase;\n","/home/muneeb/dev/diamond-tiles-frontend/src/jsx/helpers/getQuantity.js",["631"],"import { Fragment } from 'react';\n\n/* eslint-disable prefer-destructuring */\nexport default (array) => {\n   if (!array) return null;\n   if (array[0] > 0) return `${array[0]} Units`;\n   return `${array[1]} ${array[1] > 0 ? 'Singles' : ''}`;\n};\n","/home/muneeb/dev/diamond-tiles-frontend/src/jsx/pages/purchase/ClearPurchase.js",["632","633","634","635","636"],"import ModalWrapper from 'jsx/components/ModalWrapper';\nimport Select from 'jsx/components/Select';\nimport SpinnerOverlay from 'jsx/components/SpinnerOverlay';\nimport { get, post, put, useAlert, useQuery } from 'jsx/helpers';\nimport { isArray } from 'lodash';\nimport React, { useEffect, useState } from 'react';\nimport { Col, Form, Row } from 'react-bootstrap';\nimport { When } from 'react-if';\nimport { useMutation, useQueryClient } from 'react-query';\n\nconst ClearPurchase = ({ initialAmount, clearPurchase, toggle, onClose, onOpen, ...props }) => {\n   const [amount, setAmount] = useState(0);\n\n   useEffect(() => setAmount(initialAmount), [initialAmount]);\n\n   const queryClient = useQueryClient();\n\n   const alert = useAlert();\n\n   const clearMutation = useMutation((payload) => post(`/purchases/pay/id/${clearPurchase}/amount/${payload}`), {\n      onSuccess: async () => {\n         await queryClient.invalidateQueries('purchases');\n         onClose();\n         setAmount(0);\n      },\n      onError: (err) => {\n         alert.setErrorAlert({ message: 'Unable to clear purchase', err });\n      },\n   });\n\n   const alertMarkup = alert.getAlert();\n\n   return (\n      <>\n         <ModalWrapper\n            show={clearPurchase}\n            onHide={() => {\n               onClose();\n               setAmount(0);\n            }}\n            isLoading={clearMutation.isLoading}\n            title=\"Clear Purchase\"\n            onSubmit={() => {\n               clearMutation.mutate(amount);\n            }}\n            submitButtonText=\"Clear\"\n            size=\"xl\"\n            {...props}\n         >\n            <When condition={clearMutation.isLoading}>\n               <SpinnerOverlay />\n            </When>\n            {alertMarkup ? (\n               <Row>\n                  <Col lg={12}>{alertMarkup}</Col>\n               </Row>\n            ) : null}\n            <Form onSubmit={() => clearMutation.mutate(amount)}>\n               <Form.Group>\n                  <Form.Label>Amount</Form.Label>\n                  <Form.Control type=\"number\" value={amount} onChange={(e) => setAmount(e.target.value)} />\n               </Form.Group>\n            </Form>\n            {/* <PurchaseInvoice printRef={printRef} data={getPrintData} invoiceNum={invoiceNum} /> */}\n         </ModalWrapper>\n      </>\n   );\n};\n\nexport default ClearPurchase;\n","/home/muneeb/dev/diamond-tiles-frontend/src/jsx/pages/sale/RefundSale.js",["637","638","639","640","641","642","643","644"],"import ModalWrapper from 'jsx/components/ModalWrapper';\nimport Select from 'jsx/components/Select';\nimport SpinnerOverlay from 'jsx/components/SpinnerOverlay';\nimport { get, put, useAlert, useQuery } from 'jsx/helpers';\nimport { isArray } from 'lodash';\nimport React, { useEffect, useState } from 'react';\nimport { Col, Form, Row } from 'react-bootstrap';\nimport { When } from 'react-if';\nimport { useMutation, useQueryClient } from 'react-query';\nimport { useHistory } from 'react-router-dom';\n\nconst initialValues = {\n   quantity: '',\n   total: '',\n   unit: '',\n};\n\nconst RefundSale = ({ refundSale, toggle, onClose, onOpen, ...props }) => {\n   const [isError, setIsError] = useState(false);\n\n   const [quantity, setQuantity] = useState('');\n   const [total, setTotal] = useState('');\n\n   const queryClient = useQueryClient();\n\n   const alert = useAlert();\n\n   const handleChangeTotal = (t) => {\n      setTotal(t);\n   };\n\n   const handleChangeQuantity = (q, i = null) => {\n      setQuantity(q);\n      console.log('handle', i);\n      console.log('q:%s,retailPrice:%s,quantity:%s', q, i?.retailPrice, i?.quantity);\n      handleChangeTotal(q * (i?.retailPrice ?? 0 / i?.quantity ?? 0));\n   };\n\n   const inventory = useQuery(['sale', refundSale], () => get(`/sales/id/${refundSale}`), {\n      onSuccess: (data) => {\n         handleChangeQuantity(1, data);\n      },\n   });\n\n   const refundMutation = useMutation((payload) => put(`/sales/${refundSale}/refund/${payload}`), {\n      onSuccess: () => {\n         onClose();\n         handleChangeQuantity(0, inventory.data);\n         queryClient.invalidateQueries('sales');\n      },\n      onError: (err) => {\n         alert.setErrorAlert({ message: 'Unable to refund sale', err });\n      },\n   });\n\n   const alertMarkup = alert.getAlert();\n\n   return (\n      <>\n         <ModalWrapper\n            show={refundSale}\n            onHide={() => {\n               onClose();\n               handleChangeQuantity(0);\n            }}\n            isLoading={refundMutation.isLoading}\n            title=\"Refund Sale\"\n            onSubmit={() => {\n               refundMutation.mutate(quantity);\n            }}\n            submitButtonText=\"Refund\"\n            size=\"xl\"\n            isDisabled={isError}\n            {...props}\n         >\n            <When condition={inventory.isLoading}>\n               <SpinnerOverlay />\n            </When>\n            {alertMarkup ? (\n               <Row>\n                  <Col lg={12}>{alertMarkup}</Col>\n               </Row>\n            ) : null}\n            <Form>\n               <Form.Group>\n                  <Form.Label>Quantity</Form.Label>\n                  <Form.Control\n                     type=\"number\"\n                     value={quantity}\n                     onChange={(e) => handleChangeQuantity(e.target.value, inventory.data)}\n                  />\n               </Form.Group>\n\n               <Form.Group>\n                  <Form.Label>Total</Form.Label>\n                  <Form.Control type=\"number\" value={total} onChange={(e) => handleChangeTotal(e.target.value)} />\n               </Form.Group>\n            </Form>\n            {/* <PurchaseInvoice printRef={printRef} data={getPrintData} invoiceNum={invoiceNum} /> */}\n         </ModalWrapper>\n      </>\n   );\n};\n\nexport default RefundSale;\n","/home/muneeb/dev/diamond-tiles-frontend/src/store/products/reducer.js",[],"/home/muneeb/dev/diamond-tiles-frontend/src/store/products/actionTypes.js",[],"/home/muneeb/dev/diamond-tiles-frontend/src/jsx/pages/products/AddNewProduct.js",["645","646","647","648"],"import ModalWrapper from 'jsx/components/ModalWrapper';\nimport React, { useEffect, useRef } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport CreatableSelect from 'jsx/components/CreatableSelect';\nimport { get, getV2, post, useAlert, useQuery } from 'jsx/helpers';\nimport Select from 'jsx/components/Select';\nimport {\n   setProductsData,\n   setProductsVisibility,\n   setTypesData,\n   setTypesVisibility,\n   setUnitsData,\n   setUnitsVisibility,\n} from 'store/actions';\nimport { useFormik } from 'formik';\nimport { QueryClient, useMutation, useQueryClient } from 'react-query';\nimport SpinnerOverlay from 'jsx/components/SpinnerOverlay';\nimport { When } from 'react-if';\n\nconst AddNewProduct = () => {\n   const state = useSelector((s) => s.products);\n   const dispatch = useDispatch();\n   const alert = useAlert();\n\n   const modelNumberRef = useRef();\n\n   const queryClient = useQueryClient();\n\n   const types = useQuery('types', () => getV2('/types'));\n   const units = useQuery('units', () => getV2('/units'));\n\n   const mutation = useMutation((payload) => post('/products', payload), {\n      onSuccess: async () => {\n         await queryClient.invalidateQueries('all-products');\n         dispatch(setProductsVisibility(false));\n      },\n      onError: (err) => {\n         alert.setErrorAlert({ message: 'Unable to add product', err });\n      },\n   });\n\n   const formik = useFormik({\n      initialValues: {\n         modelNumber: state.data.modelNumber ?? '',\n         type: state.data.type,\n         unit: state.data.unit,\n      },\n      onSubmit: (values, form) => {\n         const payload = { modelNumber: values.modelNumber, type: values.type._id, unit: values.unit._id };\n         mutation.mutate(payload);\n         form.resetForm();\n         dispatch(setProductsData({}));\n      },\n   });\n\n   useEffect(() => {\n      if (state.visible) modelNumberRef.current.focus();\n      if (state.data.modelNumber) formik.setFieldValue('modelNumber', state.data.modelNumber);\n   }, [state.visible]);\n\n   return (\n      <>\n         <ModalWrapper\n            show={state.visible}\n            onHide={() => {\n               dispatch(setProductsVisibility(false));\n            }}\n            title=\"Add New Product\"\n            isLoading={types.isLoading || units.isLoading || mutation.isLoading}\n            size=\"md\"\n            onSubmit={formik.handleSubmit}\n            submitButtonText=\"Save\"\n         >\n            <When condition={types.isLoading || units.isLoading || mutation.isLoading}>\n               <SpinnerOverlay />\n            </When>\n            {alert.getAlert()}\n            <form onSubmit={formik.handleSubmit}>\n               <div className=\"row\">\n                  <div className=\"form-group col-xl-12\">\n                     <label className=\"col-form-label\">Model Number</label>\n                     <input\n                        ref={modelNumberRef}\n                        className=\"form-control\"\n                        onChange={formik.handleChange}\n                        type=\"text\"\n                        name=\"modelNumber\"\n                        value={formik.values.modelNumber}\n                     />\n                  </div>\n                  <div className=\"form-group col-xl-12\">\n                     <label className=\"col-form-label\">Type</label>\n                     {!types.isLoading && !types.isError && (\n                        <CreatableSelect\n                           onChange={(type) => formik.setFieldValue('type', type.value)}\n                           options={types.data?.map((type) => ({ label: type.title, value: type }))}\n                           onCreateOption={(title) => {\n                              dispatch(setTypesData({ title }));\n                              dispatch(setTypesVisibility(true));\n                           }}\n                        />\n                     )}\n                  </div>\n                  <div className=\"form-group col-xl-12\">\n                     <label className=\"col-form-label\">Unit</label>\n                     <CreatableSelect\n                        width=\"tw-w-full\"\n                        onChange={(unit) => formik.setFieldValue('unit', unit.value)}\n                        options={units.data?.map((unit) => ({ label: unit.title, value: unit }))}\n                        onCreateOption={(title) => {\n                           dispatch(setUnitsData({ title }));\n                           dispatch(setUnitsVisibility(true));\n                        }}\n                        //    options={units.data?.map((e) => ({ label: e.title, value: e }))}\n                     />\n                  </div>\n               </div>\n            </form>\n         </ModalWrapper>\n      </>\n   );\n};\n\nexport default AddNewProduct;\n","/home/muneeb/dev/diamond-tiles-frontend/src/store/actions.js",[],"/home/muneeb/dev/diamond-tiles-frontend/src/store/products/actions.js",[],"/home/muneeb/dev/diamond-tiles-frontend/src/store/types/actions.js",[],"/home/muneeb/dev/diamond-tiles-frontend/src/store/types/actionTypes.js",[],"/home/muneeb/dev/diamond-tiles-frontend/src/store/types/reducer.js",[],"/home/muneeb/dev/diamond-tiles-frontend/src/jsx/pages/types/AddNewType.js",["649","650","651","652","653","654"],"import ModalWrapper from 'jsx/components/ModalWrapper';\nimport React, { useEffect, useRef } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport CreatableSelect from 'jsx/components/CreatableSelect';\nimport { get, getV2, post, useAlert, useQuery } from 'jsx/helpers';\nimport Select from 'jsx/components/Select';\nimport { setTypesData, setTypesVisibility } from 'store/actions';\nimport { useFormik } from 'formik';\nimport { useMutation, useQueryClient } from 'react-query';\nimport { When } from 'react-if';\nimport SpinnerOverlay from 'jsx/components/SpinnerOverlay';\n\nconst AddNewType = () => {\n   const state = useSelector((s) => s.types);\n   const dispatch = useDispatch();\n   const alert = useAlert();\n   const queryClient = useQueryClient();\n   const titleRef = useRef();\n\n   const mutation = useMutation((payload) => post('/types', payload), {\n      onSuccess: async () => {\n         await queryClient.invalidateQueries('types');\n         dispatch(setTypesVisibility(false));\n      },\n      onError: (err) => {\n         alert.setErrorAlert({ message: 'Unable to add type', err });\n      },\n   });\n\n   const formik = useFormik({\n      initialValues: {\n         title: state.data.title ?? '',\n      },\n      onSubmit: (values, form) => {\n         mutation.mutate(values);\n         form.resetForm();\n         dispatch(setTypesData({}));\n      },\n   });\n\n   useEffect(() => {\n      if (state.visible) titleRef.current.focus();\n      if (state.data.title) formik.setFieldValue('title', state.data.title);\n   }, [state.visible]);\n\n   return (\n      <>\n         <ModalWrapper\n            show={state.visible}\n            onHide={() => {\n               dispatch(setTypesVisibility(false));\n            }}\n            title=\"Add New Type\"\n            isLoading={mutation.isLoading}\n            size=\"md\"\n            onSubmit={formik.handleSubmit}\n            submitButtonText=\"Save\"\n         >\n            <When condition={mutation.isLoading}>\n               <SpinnerOverlay />\n            </When>\n            {alert.getAlert()}\n\n            <form onSubmit={formik.handleSubmit}>\n               <div className=\"row\">\n                  <div className=\"form-group col-xl-12\">\n                     <label className=\"col-form-label\">Title</label>\n                     <input\n                        ref={titleRef}\n                        className=\"form-control\"\n                        onChange={formik.handleChange}\n                        type=\"text\"\n                        name=\"title\"\n                        value={formik.values.title}\n                     />\n                  </div>\n               </div>\n            </form>\n         </ModalWrapper>\n      </>\n   );\n};\n\nexport default AddNewType;\n","/home/muneeb/dev/diamond-tiles-frontend/src/store/units/actions.js",[],"/home/muneeb/dev/diamond-tiles-frontend/src/store/units/actionTypes.js",[],"/home/muneeb/dev/diamond-tiles-frontend/src/jsx/pages/units/AddNewUnit.js",["655","656","657"],"import ModalWrapper from 'jsx/components/ModalWrapper';\nimport React, { useEffect, useRef } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport CreatableSelect from 'jsx/components/CreatableSelect';\nimport { get, getV2, post, useAlert, useQuery } from 'jsx/helpers';\nimport Select from 'jsx/components/Select';\nimport { setUnitsData, setUnitsVisibility } from 'store/actions';\nimport { useFormik } from 'formik';\nimport { useMutation, useQueryClient } from 'react-query';\nimport { When } from 'react-if';\nimport SpinnerOverlay from 'jsx/components/SpinnerOverlay';\n\nconst AddNewUnit = () => {\n   const state = useSelector((s) => s.units);\n   const dispatch = useDispatch();\n   const alert = useAlert();\n   const queryClient = useQueryClient();\n   const titleRef = useRef();\n\n   const types = useQuery('types', () => getV2('/types'));\n\n   const mutation = useMutation((payload) => post('/units', payload), {\n      onSuccess: async () => {\n         await queryClient.invalidateQueries('units');\n         dispatch(setUnitsVisibility(false));\n      },\n      onError: (err) => {\n         alert.setErrorAlert({ message: 'Unable to add unit', err });\n      },\n   });\n\n   const formik = useFormik({\n      initialValues: {\n         title: state.data.title ?? '',\n         value: state.data.value ?? '',\n         type: state.data.type,\n      },\n      onSubmit: (values, form) => {\n         mutation.mutate(values);\n         form.resetForm();\n         dispatch(setUnitsData({}));\n      },\n   });\n\n   useEffect(() => {\n      if (state.visible) titleRef.current.focus();\n      if (state.data.title) formik.setFieldValue('title', state.data.title);\n      if (state.data.value) formik.setFieldValue('value', state.data.value);\n      if (state.data.type) formik.setFieldValue('type', state.data.type);\n   }, [state.visible]);\n\n   return (\n      <>\n         <ModalWrapper\n            show={state.visible}\n            onHide={() => {\n               dispatch(setUnitsVisibility(false));\n            }}\n            title=\"Add New Unit\"\n            isLoading={mutation.isLoading}\n            size=\"md\"\n            onSubmit={formik.handleSubmit}\n            submitButtonText=\"Save\"\n         >\n            <When condition={mutation.isLoading}>\n               <SpinnerOverlay />\n            </When>\n            {alert.getAlert()}\n\n            <form onSubmit={formik.handleSubmit}>\n               <div className=\"row\">\n                  <div className=\"form-group col-xl-12\">\n                     <label className=\"col-form-label\">Title</label>\n                     <input\n                        ref={titleRef}\n                        className=\"form-control\"\n                        onChange={formik.handleChange}\n                        type=\"text\"\n                        name=\"title\"\n                        value={formik.values.title}\n                     />\n                  </div>\n               </div>\n               <div className=\"row\">\n                  <div className=\"form-group col-xl-12\">\n                     <label className=\"col-form-label\">Value</label>\n                     <input\n                        className=\"form-control\"\n                        onChange={formik.handleChange}\n                        type=\"number\"\n                        name=\"value\"\n                        value={formik.values.value}\n                     />\n                  </div>\n               </div>\n               <div className=\"row\">\n                  <div className=\"form-group col-xl-12\">\n                     <label className=\"col-form-label\">Type</label>\n                     {!types.isLoading && !types.isError && (\n                        <CreatableSelect\n                           onChange={(type) => formik.setFieldValue('type', type.value)}\n                           options={types.data?.map((type) => ({ label: type.title, value: type }))}\n                           onCreateOption={(title) => {\n                              dispatch(setUnitsData({ title }));\n                              dispatch(setUnitsVisibility(true));\n                           }}\n                        />\n                     )}\n                  </div>\n               </div>\n            </form>\n         </ModalWrapper>\n      </>\n   );\n};\n\nexport default AddNewUnit;\n","/home/muneeb/dev/diamond-tiles-frontend/src/store/units/reducer.js",[],"/home/muneeb/dev/diamond-tiles-frontend/src/store/suppliers/actions.js",[],"/home/muneeb/dev/diamond-tiles-frontend/src/store/suppliers/actionTypes.js",[],"/home/muneeb/dev/diamond-tiles-frontend/src/jsx/pages/suppliers/AddNewSupplier.js",["658","659","660","661","662","663","664","665","666"],"import ModalWrapper from 'jsx/components/ModalWrapper';\nimport React, { useEffect, useRef } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport CreatableSelect from 'jsx/components/CreatableSelect';\nimport { get, getV2, post, useAlert, useQuery } from 'jsx/helpers';\nimport Select from 'jsx/components/Select';\nimport {\n   setTypesData,\n   setSu,\n   setSuppliersVisibilityppliersVisibility,\n   setSuppliersVisibility,\n   setSuppliersData,\n} from 'store/actions';\nimport { useFormik } from 'formik';\nimport { useMutation, useQueryClient } from 'react-query';\nimport { When } from 'react-if';\nimport SpinnerOverlay from 'jsx/components/SpinnerOverlay';\n\nconst AddNewSupplier = () => {\n   const state = useSelector((s) => s.suppliers);\n   const dispatch = useDispatch();\n   const alert = useAlert();\n   const queryClient = useQueryClient();\n   const nameRef = useRef();\n\n   const mutation = useMutation((payload) => post('/suppliers', payload), {\n      onSuccess: async () => {\n         await queryClient.invalidateQueries('all-suppliers', 'suppliers');\n         dispatch(setSuppliersVisibility(false));\n      },\n      onError: (err) => {\n         alert.setErrorAlert({ message: 'Unable to add supplier', err });\n      },\n   });\n\n   const formik = useFormik({\n      initialValues: {\n         name: state.data.name ?? '',\n         phone: state.data.phone ?? '',\n         company: state.data.company ?? '',\n      },\n      onSubmit: (values, form) => {\n         mutation.mutate(values);\n         form.resetForm();\n         dispatch(setSuppliersData({}));\n      },\n   });\n\n   useEffect(() => {\n      if (state.visible) nameRef.current.focus();\n      if (state.data.name) formik.setFieldValue('name', state.data.name);\n      if (state.data.phone) formik.setFieldValue('phone', state.data.phone);\n      if (state.data.company) formik.setFieldValue('company', state.data.company);\n   }, [state.visible]);\n\n   return (\n      <>\n         <ModalWrapper\n            show={state.visible}\n            onHide={() => {\n               dispatch(setSuppliersVisibility(false));\n            }}\n            title=\"Add New Supplier\"\n            isLoading={mutation.isLoading}\n            size=\"md\"\n            onSubmit={formik.handleSubmit}\n            submitButtonText=\"Save\"\n         >\n            <When condition={mutation.isLoading}>\n               <SpinnerOverlay />\n            </When>\n            {alert.getAlert()}\n\n            <form onSubmit={formik.handleSubmit}>\n               <div className=\"row\">\n                  <div className=\"form-group col-xl-12\">\n                     <label className=\"col-form-label\">Name</label>\n                     <input\n                        ref={nameRef}\n                        className=\"form-control\"\n                        onChange={formik.handleChange}\n                        type=\"text\"\n                        name=\"name\"\n                        value={formik.values.name}\n                     />\n                  </div>\n               </div>\n               <div className=\"row\">\n                  <div className=\"form-group col-xl-12\">\n                     <label className=\"col-form-label\">Phone</label>\n                     <input\n                        className=\"form-control\"\n                        onChange={formik.handleChange}\n                        type=\"text\"\n                        name=\"phone\"\n                        value={formik.values.phone}\n                     />\n                  </div>\n               </div>\n               <div className=\"row\">\n                  <div className=\"form-group col-xl-12\">\n                     <label className=\"col-form-label\">Company</label>\n                     <input\n                        className=\"form-control\"\n                        onChange={formik.handleChange}\n                        type=\"text\"\n                        name=\"company\"\n                        value={formik.values.company}\n                     />\n                  </div>\n               </div>\n            </form>\n         </ModalWrapper>\n      </>\n   );\n};\n\nexport default AddNewSupplier;\n","/home/muneeb/dev/diamond-tiles-frontend/src/store/suppliers/reducer.js",[],"/home/muneeb/dev/diamond-tiles-frontend/src/jsx/pages/sale/ClearSale.js",["667","668","669","670","671"],"import ModalWrapper from 'jsx/components/ModalWrapper';\nimport Select from 'jsx/components/Select';\nimport SpinnerOverlay from 'jsx/components/SpinnerOverlay';\nimport { get, post, put, useAlert, useQuery } from 'jsx/helpers';\nimport { isArray } from 'lodash';\nimport React, { useEffect, useState } from 'react';\nimport { Col, Form, Row } from 'react-bootstrap';\nimport { When } from 'react-if';\nimport { useMutation, useQueryClient } from 'react-query';\n\nconst ClearSale = ({ initialAmount, clearSale, toggle, onClose, onOpen, ...props }) => {\n   const [amount, setAmount] = useState(0);\n\n   useEffect(() => setAmount(initialAmount), [initialAmount]);\n\n   const queryClient = useQueryClient();\n\n   const alert = useAlert();\n\n   const clearMutation = useMutation((payload) => post(`/sales/pay/id/${clearSale}/amount/${payload}`), {\n      onSuccess: async () => {\n         await queryClient.invalidateQueries('sales');\n         onClose();\n         setAmount(0);\n      },\n      onError: (err) => {\n         alert.setErrorAlert({ message: 'Unable to clear sale', err });\n      },\n   });\n\n   const alertMarkup = alert.getAlert();\n\n   return (\n      <>\n         <ModalWrapper\n            show={clearSale}\n            onHide={() => {\n               onClose();\n               setAmount(0);\n            }}\n            isLoading={clearMutation.isLoading}\n            title=\"Clear Sale\"\n            onSubmit={() => {\n               clearMutation.mutate(amount);\n            }}\n            submitButtonText=\"Clear\"\n            size=\"xl\"\n            {...props}\n         >\n            <When condition={clearMutation.isLoading}>\n               <SpinnerOverlay />\n            </When>\n            {alertMarkup ? (\n               <Row>\n                  <Col lg={12}>{alertMarkup}</Col>\n               </Row>\n            ) : null}\n            <Form onSubmit={() => clearMutation.mutate(amount)}>\n               <Form.Group>\n                  <Form.Label>Amount</Form.Label>\n                  <Form.Control type=\"number\" value={amount} onChange={(e) => setAmount(e.target.value)} />\n               </Form.Group>\n            </Form>\n            {/* <PurchaseInvoice printRef={printRef} data={getPrintData} invoiceNum={invoiceNum} /> */}\n         </ModalWrapper>\n      </>\n   );\n};\n\nexport default ClearSale;\n","/home/muneeb/dev/diamond-tiles-frontend/src/store/customers/actions.js",[],"/home/muneeb/dev/diamond-tiles-frontend/src/store/customers/actionTypes.js",[],"/home/muneeb/dev/diamond-tiles-frontend/src/store/customers/reducer.js",[],"/home/muneeb/dev/diamond-tiles-frontend/src/jsx/pages/customers/AddNewCustomer.js",["672","673","674","675","676","677"],"import ModalWrapper from 'jsx/components/ModalWrapper';\nimport React, { useEffect, useRef } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport CreatableSelect from 'jsx/components/CreatableSelect';\nimport { get, getV2, post, useAlert, useQuery } from 'jsx/helpers';\nimport Select from 'jsx/components/Select';\nimport { setCustomersVisibility, setCustomersData } from 'store/actions';\nimport { useFormik } from 'formik';\nimport { useMutation, useQueryClient } from 'react-query';\nimport { When } from 'react-if';\nimport SpinnerOverlay from 'jsx/components/SpinnerOverlay';\n\nconst AddNewCustomer = () => {\n   const state = useSelector((s) => s.customers);\n   const dispatch = useDispatch();\n   const alert = useAlert();\n   const queryClient = useQueryClient();\n   const nameRef = useRef();\n\n   const mutation = useMutation((payload) => post('/customers', payload), {\n      onSuccess: async () => {\n         await queryClient.invalidateQueries('all-customers', 'customers');\n         dispatch(setCustomersVisibility(false));\n      },\n      onError: (err) => {\n         alert.setErrorAlert({ message: 'Unable to add customer', err });\n      },\n   });\n\n   const formik = useFormik({\n      initialValues: {\n         name: state.data.name ?? '',\n         phone: state.data.phone ?? '',\n      },\n      onSubmit: (values, form) => {\n         mutation.mutate(values);\n         form.resetForm();\n         dispatch(setCustomersData({}));\n      },\n   });\n\n   useEffect(() => {\n      if (state.visible) nameRef.current.focus();\n      if (state.data.name) formik.setFieldValue('name', state.data.name);\n      if (state.data.phone) formik.setFieldValue('phone', state.data.phone);\n   }, [state.visible]);\n\n   return (\n      <>\n         <ModalWrapper\n            show={state.visible}\n            onHide={() => {\n               dispatch(setCustomersVisibility(false));\n            }}\n            title=\"Add New Customer\"\n            isLoading={mutation.isLoading}\n            size=\"md\"\n            onSubmit={formik.handleSubmit}\n            submitButtonText=\"Save\"\n         >\n            <When condition={mutation.isLoading}>\n               <SpinnerOverlay />\n            </When>\n            {alert.getAlert()}\n\n            <form onSubmit={formik.handleSubmit}>\n               <div className=\"row\">\n                  <div className=\"form-group col-xl-12\">\n                     <label className=\"col-form-label\">Name</label>\n                     <input\n                        ref={nameRef}\n                        className=\"form-control\"\n                        onChange={formik.handleChange}\n                        type=\"text\"\n                        name=\"name\"\n                        value={formik.values.name}\n                     />\n                  </div>\n               </div>\n               <div className=\"row\">\n                  <div className=\"form-group col-xl-12\">\n                     <label className=\"col-form-label\">Phone</label>\n                     <input\n                        className=\"form-control\"\n                        onChange={formik.handleChange}\n                        type=\"text\"\n                        name=\"phone\"\n                        value={formik.values.phone}\n                     />\n                  </div>\n               </div>\n            </form>\n         </ModalWrapper>\n      </>\n   );\n};\n\nexport default AddNewCustomer;\n","/home/muneeb/dev/diamond-tiles-frontend/src/jsx/pages/users/index.js",["678","679","680","681","682","683","684","685","686","687","688","689","690","691","692","693"],"import Button from 'jsx/components/Button';\nimport Pagination from 'jsx/components/Pagination';\nimport SpinnerOverlay from 'jsx/components/SpinnerOverlay';\nimport { del, get, getV2, put, useAlert, useMutation, useQuery } from 'jsx/helpers';\nimport PageTItle from 'jsx/layouts/PageTitle';\nimport _ from 'lodash';\nimport React, { useEffect, useState } from 'react';\nimport { ButtonGroup, Card, Col, Row, Table, Popover, OverlayTrigger } from 'react-bootstrap';\nimport { AiFillDelete, AiFillEdit, AiFillEye, AiFillPlusCircle, AiOutlineQuestionCircle } from 'react-icons/ai';\nimport { Else, If, Then, When } from 'react-if';\nimport { useQueryClient } from 'react-query';\nimport { useHistory } from 'react-router-dom';\nimport dayjs from 'dayjs';\nimport relativeTime from 'dayjs/plugin/relativeTime';\nimport swal from 'sweetalert';\nimport { FaSort, FaSortDown, FaSortUp } from 'react-icons/fa';\nimport { useDebounce } from 'ahooks';\nimport { connect } from 'react-redux';\nimport { userRoles } from 'jsx/helpers/enums';\nimport cls from 'classnames';\nimport Select from 'jsx/components/Select';\nimport ClearSale from '../sale/ClearSale';\n\ndayjs.extend(relativeTime);\nconst Users = (props) => {\n   const history = useHistory();\n   const [page, setPage] = useState(1);\n   const [limit, setLimit] = useState(5);\n   const [sort, setSort] = useState({ field: null, order: 1 });\n   const [search, setSearch] = useState('');\n   const debouncedSearchValue = useDebounce(search, { wait: 500 });\n   const [roles, setRoles] = useState({});\n\n   const alert = useAlert();\n   const queryClient = useQueryClient();\n\n   const query = useQuery(['auth', page, limit, sort.field, sort.order, debouncedSearchValue], () =>\n      getV2('/auth', { page, limit, search: debouncedSearchValue })\n   );\n   const rejectMutation = useMutation((id) => del(`/auth/id/${id}`), {\n      onSuccess: async () => {\n         await queryClient.invalidateQueries('auth');\n         alert.setAlert({\n            message: 'User rejected successfully',\n            variant: 'success',\n         });\n      },\n      onError: (err) => {\n         alert.setErrorAlert({ message: 'Unable to reject user', err });\n      },\n   });\n\n   const acceptMutation = useMutation(({ id, role }) => put(`/auth/confirm/${id}/${role}`), {\n      onSuccess: async () => {\n         await queryClient.invalidateQueries('auth');\n         alert.setAlert({\n            message: 'User accepted successfully',\n            variant: 'success',\n         });\n      },\n      onError: (err) => {\n         alert.setErrorAlert({ message: 'Unable to accepted user', err });\n      },\n   });\n\n   const handleOnClickDelete = (id) => {\n      swal({\n         title: 'Are you sure?',\n         text: 'Once deleted, you will not be able to recover it!',\n         icon: 'warning',\n         buttons: true,\n         dangerMode: true,\n      }).then((willDelete) => {\n         if (willDelete) {\n            rejectMutation.mutate(id);\n         }\n      });\n   };\n\n   const alertMarkup = alert.getAlert();\n\n   const handleAcceptUser = (id) => {\n      console.log(id, roles, roles[id]);\n      acceptMutation.mutate({ id, role: roles[id] });\n   };\n\n   useEffect(() => {\n      if (page > query.data?.totalPages) {\n         setPage((prev) => prev - 1);\n      }\n   }, [page, query.data?.totalPages]);\n\n   return (\n      <>\n         <PageTItle activeMenu=\"Users\" motherMenu=\"Manage\" />\n         <div className=\"row tw-mb-8\">\n            <div className=\"col-xl-6\" />\n\n            <div className=\"col-xl-6\">\n               <ButtonGroup className=\"tw-float-right\">\n                  <input\n                     type=\"text\"\n                     className=\"input-rounded tw-rounded-r-none tw-pl-6\"\n                     placeholder=\"Search Users...\"\n                     disabled={rejectMutation.isLoading}\n                     onChange={(e) => setSearch(e.target.value)}\n                  />\n                  <Button variant=\"secondary\" className=\"btn btn-secondary tw-pl-6\" loading={query.isLoading}>\n                     Search\n                  </Button>\n               </ButtonGroup>\n            </div>\n         </div>\n         {alertMarkup ? (\n            <Row>\n               <Col lg={12}>{alertMarkup}</Col>\n            </Row>\n         ) : null}\n         <div className=\"row\">\n            <Col lg={12}>\n               <Card>\n                  <When condition={query.isLoading || rejectMutation.isLoading || acceptMutation.isLoading}>\n                     <SpinnerOverlay />\n                  </When>\n                  <Card.Header>\n                     <Card.Title>Manage Users</Card.Title>\n                  </Card.Header>\n                  <Card.Body>\n                     <If condition={query.data?.totalDocs > 0}>\n                        <Then>\n                           <Table className=\"tw-relative\" responsive>\n                              <thead>\n                                 <tr>\n                                    <th className=\"width80\">\n                                       <strong>#</strong>\n                                    </th>\n                                    <th>\n                                       <strong className=\"tw-cursor-pointer\">Name</strong>\n                                    </th>\n                                    <th>\n                                       <strong className=\"tw-cursor-pointer\">Role</strong>\n                                    </th>\n                                    <th />\n                                 </tr>\n                              </thead>\n\n                              <tbody>\n                                 {query.data?.docs.map((e, index) => {\n                                    const DeleteButton = (p) => (\n                                       <Button\n                                          variant=\"danger\"\n                                          size=\"sm\"\n                                          icon={AiFillDelete}\n                                          onClick={() => handleOnClickDelete(e._id)}\n                                       >\n                                          {p.children}\n                                       </Button>\n                                    );\n                                    return (\n                                       <tr key={`${e._id}`}>\n                                          <td>\n                                             <b>{query.data.pagingCounter * (index + 1)}</b>\n                                          </td>\n                                          <td className=\"tw-capitalize\">{e.name}</td>\n                                          <td className=\"tw-capitalize\">{e.role?.toLowerCase()}</td>\n                                          <td className=\"tw-flex tw-items-center tw-gap-4\">\n                                             <If condition={!e.isConfirmed}>\n                                                <Then>\n                                                   <Select\n                                                      width=\"tw-w-[200px]\"\n                                                      placeholder=\"Assign Role\"\n                                                      options={[\n                                                         { label: 'Administrator', value: 'Administrator' },\n                                                         { label: 'Cashier', value: 'Cashier' },\n                                                      ]}\n                                                      onChange={(role) =>\n                                                         setRoles((prev) => ({ ...prev, [e._id]: role.value }))\n                                                      }\n                                                   />\n                                                   <ButtonGroup>\n                                                      <DeleteButton>Reject</DeleteButton>\n                                                      <Button\n                                                         variant=\"secondary\"\n                                                         size=\"sm\"\n                                                         icon={AiFillEdit}\n                                                         disabled={!roles[e._id]}\n                                                         onClick={() => handleAcceptUser(e._id)}\n                                                      >\n                                                         Accept\n                                                      </Button>\n                                                   </ButtonGroup>\n                                                </Then>\n                                                <Else>\n                                                   <When condition={props.user._id !== e._id}>\n                                                      <DeleteButton>Delete</DeleteButton>\n                                                   </When>\n                                                </Else>\n                                             </If>\n                                          </td>\n                                       </tr>\n                                    );\n                                 })}\n                              </tbody>\n                           </Table>\n                        </Then>\n                        <Else>\n                           <When condition={!query.isLoading && !debouncedSearchValue}>\n                              <p className=\"tw-m-0\">No customers created</p>\n                           </When>\n                           <When condition={!query.isLoading && debouncedSearchValue}>\n                              <p className=\"tw-m-0\">No result found!</p>\n                           </When>\n                        </Else>\n                     </If>\n                  </Card.Body>\n               </Card>\n            </Col>\n         </div>\n         <When condition={limit > 5 ? true : query.data?.totalPages > 1}>\n            <Pagination\n               page={page}\n               onPageChange={setPage}\n               onLimitChange={setLimit}\n               {..._.omit(query.data, ['docs'])}\n               isLimitDisabled={query.isLoading || rejectMutation.isLoading}\n            />\n         </When>\n      </>\n   );\n};\nconst mapStateToProps = ({ auth }) => ({\n   user: auth.user,\n});\n\nconst mapDispatchToProps = {};\nexport default connect(mapStateToProps, mapDispatchToProps)(Users);\n","/home/muneeb/dev/diamond-tiles-frontend/src/jsx/helpers/getSortingIcon.js",[],"/home/muneeb/dev/diamond-tiles-frontend/src/jsx/pages/purchase/ManagePurchase.js",["694","695","696","697","698","699","700","701","702","703","704","705","706","707","708"],"import dayjs from 'dayjs';\nimport relativeTime from 'dayjs/plugin/relativeTime';\nimport produce from 'immer';\nimport Button from 'jsx/components/Button';\nimport Pagination from 'jsx/components/Pagination';\nimport SpinnerOverlay from 'jsx/components/SpinnerOverlay';\nimport { del, get, useAlert, useMutation, useQuery } from 'jsx/helpers';\nimport { userRoles } from 'jsx/helpers/enums';\nimport getQuantity from 'jsx/helpers/getQuantity';\nimport PageTItle from 'jsx/layouts/PageTitle';\nimport _, { isArray } from 'lodash';\nimport React, { useEffect, useState } from 'react';\nimport { ButtonGroup, Card, Col, OverlayTrigger, Popover, Row, Table } from 'react-bootstrap';\nimport { AiFillDelete, AiFillEdit, AiFillEye, AiFillPlusCircle, AiOutlineQuestionCircle } from 'react-icons/ai';\nimport { FaSort, FaSortDown, FaSortUp } from 'react-icons/fa';\nimport { Else, If, Then, When } from 'react-if';\nimport { useQueryClient } from 'react-query';\nimport { connect } from 'react-redux';\nimport { useHistory } from 'react-router-dom';\nimport swal from 'sweetalert';\nimport getSortingIcon from 'jsx/helpers/getSortingIcon';\nimport ClearPurchase from './ClearPurchase';\nimport RefundPurchase from './RefundPurchase';\n\nconst ManagePurchase = (props) => {\n   const [refundPurchase, setRefundPurchase] = useState(null);\n   const [clearPurchase, setClearPurchase] = useState({ id: null, amount: null });\n\n   const alert = useAlert();\n   const queryClient = useQueryClient();\n\n   const [page, setPage] = useState(1);\n   const [limit, setLimit] = useState(5);\n   const [sort, setSort] = useState({ field: null, order: -1 });\n\n   const query = useQuery(['purchases', page, limit, sort.field, sort.order], () =>\n      get('/purchases', page, limit, sort.field, sort.order)\n   );\n\n   useEffect(() => {\n      if (page > query.data?.totalPages) {\n         setPage((prev) => prev - 1);\n      }\n   }, [page, query.data?.totalPages]);\n\n   const deleteMutation = useMutation((id) => del(`/purchases/id/${id}`), {\n      onSuccess: async () => {\n         await queryClient.invalidateQueries('purchases');\n         alert.setAlert({\n            message: 'Purchase deleted successfully',\n            variant: 'success',\n         });\n      },\n      onError: (err) => {\n         alert.setErrorAlert({ message: 'Unable to delete purchase', err });\n      },\n   });\n\n   const handleOnClickDelete = (id) => {\n      swal({\n         title: 'Are you sure?',\n         text: 'Once deleted, you will not be able to recover it!',\n         icon: 'warning',\n         buttons: true,\n         dangerMode: true,\n      }).then((willDelete) => {\n         if (willDelete) {\n            deleteMutation.mutate(id);\n         }\n      });\n   };\n\n   const alertMarkup = alert.getAlert();\n\n   const handleSort = (key) => {\n      setSort((prev) => ({ field: key, order: prev.order * -1 }));\n   };\n   return (\n      <>\n         {alertMarkup ? (\n            <Row>\n               <Col lg={12}>{alertMarkup}</Col>\n            </Row>\n         ) : null}\n         <div className=\"row\">\n            <Col lg={12}>\n               <Card>\n                  <When condition={query.isLoading || deleteMutation.isLoading}>\n                     <SpinnerOverlay />\n                  </When>\n                  <Card.Header>\n                     <Card.Title>Manage Purchase</Card.Title>\n                  </Card.Header>\n                  <Card.Body>\n                     <If condition={query.data?.totalDocs > 0}>\n                        <Then>\n                           <Table className=\"tw-relative\" responsive>\n                              <thead>\n                                 <tr>\n                                    <th className=\"width80\">\n                                       <strong>#</strong>\n                                    </th>\n                                    <th>{getSortingIcon({ label: 'Supplier' })}</th>\n                                    <th>{getSortingIcon({ label: 'Products' })}</th>\n                                    <th>\n                                       {getSortingIcon({\n                                          label: 'Price',\n                                          key: 'totalSourcePrice',\n                                          onSort: handleSort,\n                                          sort,\n                                       })}\n                                    </th>\n                                    <th>\n                                       {getSortingIcon({\n                                          label: 'Paid',\n                                          key: 'paid',\n                                          onSort: handleSort,\n                                          sort,\n                                       })}\n                                    </th>\n                                 </tr>\n                              </thead>\n                              <tbody>\n                                 {query.data?.docs.map((e) => {\n                                    const getId = () => {\n                                       const id = e._id;\n                                       return id.slice(id.length - 4);\n                                    };\n\n                                    const getProducts = () => {\n                                       const products = [];\n\n                                       e.products.forEach((d, i) => {\n                                          products.push(\n                                             <>\n                                                <b>{`${d.product.modelNumber} - ${d.sourcePrice} PKR`}</b>\n                                                {d.variants ? (\n                                                   <>\n                                                      <br />\n                                                      {Object.entries(d.variants).map(([key, value]) => (\n                                                         <span className=\"tw-mr-4\">{`${key.toUpperCase()}: ${getQuantity(\n                                                            value\n                                                         )}`}</span>\n                                                      ))}\n                                                   </>\n                                                ) : (\n                                                   <>\n                                                      <br />\n                                                      {getQuantity(d.quantity)}\n                                                   </>\n                                                )}\n                                             </>\n                                          );\n                                          if (i < e.products.length - 1) products.push(<br />);\n                                       });\n\n                                       return products;\n                                    };\n\n                                    return (\n                                       <tr\n                                          key={`${e._id}`}\n                                          className={e.isRemaining && 'tw-bg-red-400 tw-text-gray-50'}\n                                       >\n                                          <td>\n                                             <strong className={e.isRemaining && 'tw-text-gray-50'}>{getId()}</strong>\n                                          </td>\n                                          <td>{e.supplier?.name}</td>\n                                          <td>{getProducts()}</td>\n                                          <td>{`${e.totalSourcePrice} PKR`}</td>\n                                          <td>{`${e.paid} PKR`}</td>\n                                          <td>\n                                             <ButtonGroup>\n                                                <When condition={props.user?.role !== userRoles.CASHIER}>\n                                                   <When condition={e.isRemaining}>\n                                                      <Button\n                                                         variant=\"warning\"\n                                                         size=\"sm\"\n                                                         icon={AiFillDelete}\n                                                         onClick={() =>\n                                                            setClearPurchase({ id: e._id, amount: e.totalSourcePrice })\n                                                         }\n                                                      >\n                                                         Pay\n                                                      </Button>\n                                                   </When>\n                                                   <Button\n                                                      variant=\"danger\"\n                                                      size=\"sm\"\n                                                      icon={AiFillDelete}\n                                                      onClick={() => handleOnClickDelete(e._id)}\n                                                   >\n                                                      Delete\n                                                   </Button>\n                                                </When>\n                                             </ButtonGroup>\n                                          </td>\n                                       </tr>\n                                    );\n                                 })}\n                              </tbody>\n                           </Table>\n                        </Then>\n                        <Else>\n                           <When condition={!query.isLoading}>\n                              <p className=\"tw-m-0\">No purchases created</p>\n                           </When>\n                        </Else>\n                     </If>\n                  </Card.Body>\n               </Card>\n            </Col>\n         </div>\n         <When condition={limit > 5 ? true : query.data?.totalPages > 1}>\n            <Pagination\n               page={page}\n               onPageChange={setPage}\n               onLimitChange={setLimit}\n               {..._.omit(query.data, ['docs'])}\n               isLimitDisabled={query.isLoading || deleteMutation.isLoading}\n            />\n         </When>\n         <RefundPurchase refundPurchase={refundPurchase} onClose={() => setRefundPurchase(null)} size=\"md\" />\n         <ClearPurchase\n            clearPurchase={clearPurchase.id}\n            initialAmount={clearPurchase.amount}\n            onClose={() => setClearPurchase((prev) => ({ ...prev, id: null }))}\n            size=\"md\"\n         />\n      </>\n   );\n};\n\nconst mapStateToProps = ({ auth }) => ({\n   user: auth.user,\n});\n\nconst mapDispatchToProps = {};\nexport default connect(mapStateToProps, mapDispatchToProps)(ManagePurchase);\n",{"ruleId":"709","replacedBy":"710"},{"ruleId":"711","replacedBy":"712"},{"ruleId":"713","replacedBy":"714"},{"ruleId":"715","replacedBy":"716"},{"ruleId":"717","replacedBy":"718"},{"ruleId":"719","severity":1,"message":"720","line":21,"column":8,"nodeType":"721","messageId":"722","endLine":21,"endColumn":14},{"ruleId":"723","severity":1,"message":"724","line":48,"column":26,"nodeType":"725","messageId":"726","endLine":48,"endColumn":61},{"ruleId":"727","severity":1,"message":"728","line":79,"column":28,"nodeType":"729","messageId":"730","endLine":79,"endColumn":38},{"ruleId":"719","severity":1,"message":"731","line":82,"column":28,"nodeType":"721","messageId":"722","endLine":82,"endColumn":40},{"ruleId":"719","severity":1,"message":"731","line":94,"column":28,"nodeType":"721","messageId":"722","endLine":94,"endColumn":40},{"ruleId":"719","severity":1,"message":"732","line":10,"column":29,"nodeType":"721","messageId":"722","endLine":10,"endColumn":34},{"ruleId":"719","severity":1,"message":"733","line":10,"column":36,"nodeType":"721","messageId":"722","endLine":10,"endColumn":50},{"ruleId":"719","severity":1,"message":"734","line":10,"column":52,"nodeType":"721","messageId":"722","endLine":10,"endColumn":59},{"ruleId":"719","severity":1,"message":"735","line":11,"column":39,"nodeType":"721","messageId":"722","endLine":11,"endColumn":62},{"ruleId":"719","severity":1,"message":"736","line":12,"column":10,"nodeType":"721","messageId":"722","endLine":12,"endColumn":16},{"ruleId":"719","severity":1,"message":"737","line":12,"column":18,"nodeType":"721","messageId":"722","endLine":12,"endColumn":28},{"ruleId":"719","severity":1,"message":"738","line":12,"column":30,"nodeType":"721","messageId":"722","endLine":12,"endColumn":38},{"ruleId":"719","severity":1,"message":"739","line":20,"column":21,"nodeType":"721","messageId":"722","endLine":20,"endColumn":32},{"ruleId":"719","severity":1,"message":"740","line":24,"column":11,"nodeType":"721","messageId":"722","endLine":24,"endColumn":15},{"ruleId":"719","severity":1,"message":"741","line":25,"column":19,"nodeType":"721","messageId":"722","endLine":25,"endColumn":28},{"ruleId":"719","severity":1,"message":"742","line":26,"column":10,"nodeType":"721","messageId":"722","endLine":26,"endColumn":30},{"ruleId":"719","severity":1,"message":"743","line":28,"column":21,"nodeType":"721","messageId":"722","endLine":28,"endColumn":32},{"ruleId":"719","severity":1,"message":"744","line":88,"column":10,"nodeType":"721","messageId":"722","endLine":88,"endColumn":20},{"ruleId":"745","severity":1,"message":"746","line":99,"column":7,"nodeType":"747","endLine":99,"endColumn":30,"suggestions":"748"},{"ruleId":"719","severity":1,"message":"749","line":21,"column":16,"nodeType":"721","messageId":"722","endLine":21,"endColumn":19},{"ruleId":"719","severity":1,"message":"750","line":24,"column":17,"nodeType":"721","messageId":"722","endLine":24,"endColumn":24},{"ruleId":"719","severity":1,"message":"751","line":25,"column":18,"nodeType":"721","messageId":"722","endLine":25,"endColumn":26},{"ruleId":"719","severity":1,"message":"752","line":26,"column":17,"nodeType":"721","messageId":"722","endLine":26,"endColumn":24},{"ruleId":"719","severity":1,"message":"741","line":27,"column":19,"nodeType":"721","messageId":"722","endLine":27,"endColumn":28},{"ruleId":"719","severity":1,"message":"743","line":30,"column":21,"nodeType":"721","messageId":"722","endLine":30,"endColumn":32},{"ruleId":"719","severity":1,"message":"753","line":3,"column":8,"nodeType":"721","messageId":"722","endLine":3,"endColumn":20},{"ruleId":"719","severity":1,"message":"754","line":7,"column":17,"nodeType":"721","messageId":"722","endLine":7,"endColumn":24},{"ruleId":"719","severity":1,"message":"755","line":7,"column":26,"nodeType":"721","messageId":"722","endLine":7,"endColumn":32},{"ruleId":"719","severity":1,"message":"732","line":8,"column":29,"nodeType":"721","messageId":"722","endLine":8,"endColumn":34},{"ruleId":"719","severity":1,"message":"756","line":10,"column":10,"nodeType":"721","messageId":"722","endLine":10,"endColumn":23},{"ruleId":"719","severity":1,"message":"757","line":10,"column":25,"nodeType":"721","messageId":"722","endLine":10,"endColumn":37},{"ruleId":"719","severity":1,"message":"758","line":92,"column":55,"nodeType":"721","messageId":"722","endLine":92,"endColumn":60},{"ruleId":"719","severity":1,"message":"753","line":3,"column":8,"nodeType":"721","messageId":"722","endLine":3,"endColumn":20},{"ruleId":"719","severity":1,"message":"759","line":5,"column":10,"nodeType":"721","messageId":"722","endLine":5,"endColumn":13},{"ruleId":"719","severity":1,"message":"754","line":7,"column":17,"nodeType":"721","messageId":"722","endLine":7,"endColumn":24},{"ruleId":"719","severity":1,"message":"755","line":7,"column":26,"nodeType":"721","messageId":"722","endLine":7,"endColumn":32},{"ruleId":"719","severity":1,"message":"732","line":8,"column":29,"nodeType":"721","messageId":"722","endLine":8,"endColumn":34},{"ruleId":"719","severity":1,"message":"756","line":10,"column":10,"nodeType":"721","messageId":"722","endLine":10,"endColumn":23},{"ruleId":"719","severity":1,"message":"757","line":10,"column":25,"nodeType":"721","messageId":"722","endLine":10,"endColumn":37},{"ruleId":"719","severity":1,"message":"760","line":18,"column":4,"nodeType":"721","messageId":"722","endLine":18,"endColumn":20},{"ruleId":"719","severity":1,"message":"761","line":19,"column":4,"nodeType":"721","messageId":"722","endLine":19,"endColumn":26},{"ruleId":"719","severity":1,"message":"762","line":14,"column":4,"nodeType":"721","messageId":"722","endLine":14,"endColumn":16},{"ruleId":"719","severity":1,"message":"763","line":15,"column":4,"nodeType":"721","messageId":"722","endLine":15,"endColumn":14},{"ruleId":"719","severity":1,"message":"764","line":16,"column":4,"nodeType":"721","messageId":"722","endLine":16,"endColumn":13},{"ruleId":"719","severity":1,"message":"765","line":17,"column":4,"nodeType":"721","messageId":"722","endLine":17,"endColumn":20},{"ruleId":"719","severity":1,"message":"751","line":29,"column":18,"nodeType":"721","messageId":"722","endLine":29,"endColumn":26},{"ruleId":"719","severity":1,"message":"766","line":50,"column":10,"nodeType":"721","messageId":"722","endLine":50,"endColumn":27},{"ruleId":"719","severity":1,"message":"767","line":54,"column":10,"nodeType":"721","messageId":"722","endLine":54,"endColumn":27},{"ruleId":"719","severity":1,"message":"768","line":57,"column":10,"nodeType":"721","messageId":"722","endLine":57,"endColumn":26},{"ruleId":"719","severity":1,"message":"769","line":1,"column":20,"nodeType":"721","messageId":"722","endLine":1,"endColumn":24},{"ruleId":"719","severity":1,"message":"770","line":7,"column":10,"nodeType":"721","messageId":"722","endLine":7,"endColumn":19},{"ruleId":"745","severity":1,"message":"771","line":49,"column":7,"nodeType":"747","endLine":49,"endColumn":9,"suggestions":"772"},{"ruleId":"719","severity":1,"message":"773","line":151,"column":28,"nodeType":"721","messageId":"722","endLine":151,"endColumn":32},{"ruleId":"719","severity":1,"message":"774","line":26,"column":21,"nodeType":"721","messageId":"722","endLine":26,"endColumn":32},{"ruleId":"719","severity":1,"message":"743","line":29,"column":21,"nodeType":"721","messageId":"722","endLine":29,"endColumn":32},{"ruleId":"719","severity":1,"message":"741","line":33,"column":19,"nodeType":"721","messageId":"722","endLine":33,"endColumn":28},{"ruleId":"745","severity":1,"message":"775","line":39,"column":7,"nodeType":"747","endLine":39,"endColumn":22,"suggestions":"776"},{"ruleId":"745","severity":1,"message":"746","line":103,"column":7,"nodeType":"747","endLine":103,"endColumn":30,"suggestions":"777"},{"ruleId":"719","severity":1,"message":"758","line":319,"column":66,"nodeType":"721","messageId":"722","endLine":319,"endColumn":71},{"ruleId":"719","severity":1,"message":"764","line":16,"column":27,"nodeType":"721","messageId":"722","endLine":16,"endColumn":36},{"ruleId":"719","severity":1,"message":"778","line":30,"column":21,"nodeType":"721","messageId":"722","endLine":30,"endColumn":32},{"ruleId":"719","severity":1,"message":"779","line":31,"column":22,"nodeType":"721","messageId":"722","endLine":31,"endColumn":34},{"ruleId":"719","severity":1,"message":"780","line":32,"column":21,"nodeType":"721","messageId":"722","endLine":32,"endColumn":32},{"ruleId":"719","severity":1,"message":"743","line":37,"column":21,"nodeType":"721","messageId":"722","endLine":37,"endColumn":32},{"ruleId":"745","severity":1,"message":"775","line":45,"column":7,"nodeType":"747","endLine":45,"endColumn":22,"suggestions":"781"},{"ruleId":"782","severity":1,"message":"783","line":122,"column":10,"nodeType":"729","messageId":"784","endLine":122,"endColumn":21},{"ruleId":"782","severity":1,"message":"783","line":132,"column":4,"nodeType":"729","messageId":"784","endLine":132,"endColumn":15},{"ruleId":"745","severity":1,"message":"746","line":152,"column":7,"nodeType":"747","endLine":152,"endColumn":39,"suggestions":"785"},{"ruleId":"719","severity":1,"message":"786","line":3,"column":8,"nodeType":"721","messageId":"722","endLine":3,"endColumn":20},{"ruleId":"719","severity":1,"message":"743","line":25,"column":21,"nodeType":"721","messageId":"722","endLine":25,"endColumn":32},{"ruleId":"745","severity":1,"message":"775","line":30,"column":7,"nodeType":"747","endLine":30,"endColumn":22,"suggestions":"787"},{"ruleId":"719","severity":1,"message":"788","line":36,"column":11,"nodeType":"721","messageId":"722","endLine":36,"endColumn":16},{"ruleId":"745","severity":1,"message":"746","line":97,"column":7,"nodeType":"747","endLine":97,"endColumn":30,"suggestions":"789"},{"ruleId":"719","severity":1,"message":"758","line":304,"column":77,"nodeType":"721","messageId":"722","endLine":304,"endColumn":82},{"ruleId":"719","severity":1,"message":"790","line":11,"column":13,"nodeType":"721","messageId":"722","endLine":11,"endColumn":20},{"ruleId":"719","severity":1,"message":"733","line":14,"column":34,"nodeType":"721","messageId":"722","endLine":14,"endColumn":48},{"ruleId":"719","severity":1,"message":"734","line":14,"column":50,"nodeType":"721","messageId":"722","endLine":14,"endColumn":57},{"ruleId":"719","severity":1,"message":"735","line":15,"column":10,"nodeType":"721","messageId":"722","endLine":15,"endColumn":33},{"ruleId":"719","severity":1,"message":"791","line":23,"column":10,"nodeType":"721","messageId":"722","endLine":23,"endColumn":17},{"ruleId":"719","severity":1,"message":"792","line":31,"column":10,"nodeType":"721","messageId":"722","endLine":31,"endColumn":21},{"ruleId":"719","severity":1,"message":"793","line":2,"column":10,"nodeType":"721","messageId":"722","endLine":2,"endColumn":18},{"ruleId":"719","severity":1,"message":"732","line":2,"column":20,"nodeType":"721","messageId":"722","endLine":2,"endColumn":25},{"ruleId":"719","severity":1,"message":"794","line":2,"column":27,"nodeType":"721","messageId":"722","endLine":2,"endColumn":38},{"ruleId":"719","severity":1,"message":"764","line":5,"column":10,"nodeType":"721","messageId":"722","endLine":5,"endColumn":19},{"ruleId":"719","severity":1,"message":"795","line":6,"column":10,"nodeType":"721","messageId":"722","endLine":6,"endColumn":17},{"ruleId":"719","severity":1,"message":"796","line":4,"column":10,"nodeType":"721","messageId":"722","endLine":4,"endColumn":26},{"ruleId":"719","severity":1,"message":"797","line":5,"column":8,"nodeType":"721","messageId":"722","endLine":5,"endColumn":14},{"ruleId":"719","severity":1,"message":"770","line":9,"column":10,"nodeType":"721","messageId":"722","endLine":9,"endColumn":19},{"ruleId":"719","severity":1,"message":"794","line":13,"column":10,"nodeType":"721","messageId":"722","endLine":13,"endColumn":21},{"ruleId":"719","severity":1,"message":"762","line":15,"column":4,"nodeType":"721","messageId":"722","endLine":15,"endColumn":16},{"ruleId":"719","severity":1,"message":"763","line":16,"column":4,"nodeType":"721","messageId":"722","endLine":16,"endColumn":14},{"ruleId":"719","severity":1,"message":"764","line":17,"column":4,"nodeType":"721","messageId":"722","endLine":17,"endColumn":13},{"ruleId":"719","severity":1,"message":"765","line":18,"column":4,"nodeType":"721","messageId":"722","endLine":18,"endColumn":20},{"ruleId":"719","severity":1,"message":"798","line":19,"column":4,"nodeType":"721","messageId":"722","endLine":19,"endColumn":18},{"ruleId":"719","severity":1,"message":"799","line":28,"column":17,"nodeType":"721","messageId":"722","endLine":28,"endColumn":22},{"ruleId":"719","severity":1,"message":"791","line":30,"column":10,"nodeType":"721","messageId":"722","endLine":30,"endColumn":17},{"ruleId":"719","severity":1,"message":"741","line":34,"column":19,"nodeType":"721","messageId":"722","endLine":34,"endColumn":28},{"ruleId":"719","severity":1,"message":"792","line":38,"column":10,"nodeType":"721","messageId":"722","endLine":38,"endColumn":21},{"ruleId":"719","severity":1,"message":"758","line":170,"column":62,"nodeType":"721","messageId":"722","endLine":170,"endColumn":67},{"ruleId":"745","severity":1,"message":"800","line":33,"column":7,"nodeType":"747","endLine":33,"endColumn":14,"suggestions":"801"},{"ruleId":"719","severity":1,"message":"802","line":63,"column":26,"nodeType":"721","messageId":"722","endLine":63,"endColumn":31},{"ruleId":"719","severity":1,"message":"763","line":13,"column":24,"nodeType":"721","messageId":"722","endLine":13,"endColumn":34},{"ruleId":"719","severity":1,"message":"803","line":20,"column":8,"nodeType":"721","messageId":"722","endLine":20,"endColumn":20},{"ruleId":"719","severity":1,"message":"733","line":11,"column":34,"nodeType":"721","messageId":"722","endLine":11,"endColumn":48},{"ruleId":"719","severity":1,"message":"734","line":11,"column":50,"nodeType":"721","messageId":"722","endLine":11,"endColumn":57},{"ruleId":"719","severity":1,"message":"763","line":12,"column":24,"nodeType":"721","messageId":"722","endLine":12,"endColumn":34},{"ruleId":"719","severity":1,"message":"764","line":12,"column":36,"nodeType":"721","messageId":"722","endLine":12,"endColumn":45},{"ruleId":"719","severity":1,"message":"735","line":12,"column":65,"nodeType":"721","messageId":"722","endLine":12,"endColumn":88},{"ruleId":"719","severity":1,"message":"804","line":18,"column":32,"nodeType":"721","messageId":"722","endLine":18,"endColumn":43},{"ruleId":"719","severity":1,"message":"753","line":20,"column":8,"nodeType":"721","messageId":"722","endLine":20,"endColumn":20},{"ruleId":"719","severity":1,"message":"791","line":28,"column":10,"nodeType":"721","messageId":"722","endLine":28,"endColumn":17},{"ruleId":"719","severity":1,"message":"805","line":3,"column":8,"nodeType":"721","messageId":"722","endLine":3,"endColumn":15},{"ruleId":"719","severity":1,"message":"790","line":10,"column":13,"nodeType":"721","messageId":"722","endLine":10,"endColumn":20},{"ruleId":"719","severity":1,"message":"763","line":13,"column":24,"nodeType":"721","messageId":"722","endLine":13,"endColumn":34},{"ruleId":"719","severity":1,"message":"764","line":13,"column":36,"nodeType":"721","messageId":"722","endLine":13,"endColumn":45},{"ruleId":"719","severity":1,"message":"758","line":201,"column":60,"nodeType":"721","messageId":"722","endLine":201,"endColumn":65},{"ruleId":"719","severity":1,"message":"805","line":3,"column":8,"nodeType":"721","messageId":"722","endLine":3,"endColumn":15},{"ruleId":"719","severity":1,"message":"806","line":5,"column":8,"nodeType":"721","messageId":"722","endLine":5,"endColumn":18},{"ruleId":"719","severity":1,"message":"807","line":6,"column":8,"nodeType":"721","messageId":"722","endLine":6,"endColumn":22},{"ruleId":"719","severity":1,"message":"808","line":7,"column":10,"nodeType":"721","messageId":"722","endLine":7,"endColumn":13},{"ruleId":"719","severity":1,"message":"759","line":7,"column":15,"nodeType":"721","messageId":"722","endLine":7,"endColumn":18},{"ruleId":"719","severity":1,"message":"809","line":7,"column":20,"nodeType":"721","messageId":"722","endLine":7,"endColumn":28},{"ruleId":"719","severity":1,"message":"810","line":7,"column":30,"nodeType":"721","messageId":"722","endLine":7,"endColumn":41},{"ruleId":"719","severity":1,"message":"811","line":7,"column":43,"nodeType":"721","messageId":"722","endLine":7,"endColumn":51},{"ruleId":"719","severity":1,"message":"770","line":8,"column":10,"nodeType":"721","messageId":"722","endLine":8,"endColumn":19},{"ruleId":"719","severity":1,"message":"812","line":9,"column":8,"nodeType":"721","messageId":"722","endLine":9,"endColumn":19},{"ruleId":"719","severity":1,"message":"813","line":11,"column":8,"nodeType":"721","messageId":"722","endLine":11,"endColumn":9},{"ruleId":"719","severity":1,"message":"790","line":11,"column":13,"nodeType":"721","messageId":"722","endLine":11,"endColumn":20},{"ruleId":"719","severity":1,"message":"814","line":12,"column":17,"nodeType":"721","messageId":"722","endLine":12,"endColumn":26},{"ruleId":"719","severity":1,"message":"815","line":12,"column":28,"nodeType":"721","messageId":"722","endLine":12,"endColumn":36},{"ruleId":"719","severity":1,"message":"794","line":13,"column":10,"nodeType":"721","messageId":"722","endLine":13,"endColumn":21},{"ruleId":"719","severity":1,"message":"816","line":13,"column":23,"nodeType":"721","messageId":"722","endLine":13,"endColumn":27},{"ruleId":"719","severity":1,"message":"817","line":13,"column":29,"nodeType":"721","messageId":"722","endLine":13,"endColumn":32},{"ruleId":"719","severity":1,"message":"733","line":13,"column":34,"nodeType":"721","messageId":"722","endLine":13,"endColumn":48},{"ruleId":"719","severity":1,"message":"734","line":13,"column":50,"nodeType":"721","messageId":"722","endLine":13,"endColumn":57},{"ruleId":"719","severity":1,"message":"818","line":13,"column":59,"nodeType":"721","messageId":"722","endLine":13,"endColumn":62},{"ruleId":"719","severity":1,"message":"732","line":13,"column":64,"nodeType":"721","messageId":"722","endLine":13,"endColumn":69},{"ruleId":"719","severity":1,"message":"762","line":14,"column":10,"nodeType":"721","messageId":"722","endLine":14,"endColumn":22},{"ruleId":"719","severity":1,"message":"763","line":14,"column":24,"nodeType":"721","messageId":"722","endLine":14,"endColumn":34},{"ruleId":"719","severity":1,"message":"764","line":14,"column":36,"nodeType":"721","messageId":"722","endLine":14,"endColumn":45},{"ruleId":"719","severity":1,"message":"735","line":14,"column":65,"nodeType":"721","messageId":"722","endLine":14,"endColumn":88},{"ruleId":"719","severity":1,"message":"736","line":15,"column":10,"nodeType":"721","messageId":"722","endLine":15,"endColumn":16},{"ruleId":"719","severity":1,"message":"737","line":15,"column":18,"nodeType":"721","messageId":"722","endLine":15,"endColumn":28},{"ruleId":"719","severity":1,"message":"738","line":15,"column":30,"nodeType":"721","messageId":"722","endLine":15,"endColumn":38},{"ruleId":"719","severity":1,"message":"819","line":16,"column":10,"nodeType":"721","messageId":"722","endLine":16,"endColumn":14},{"ruleId":"719","severity":1,"message":"820","line":16,"column":16,"nodeType":"721","messageId":"722","endLine":16,"endColumn":18},{"ruleId":"719","severity":1,"message":"821","line":16,"column":20,"nodeType":"721","messageId":"722","endLine":16,"endColumn":24},{"ruleId":"719","severity":1,"message":"822","line":16,"column":26,"nodeType":"721","messageId":"722","endLine":16,"endColumn":30},{"ruleId":"719","severity":1,"message":"823","line":17,"column":10,"nodeType":"721","messageId":"722","endLine":17,"endColumn":24},{"ruleId":"719","severity":1,"message":"824","line":20,"column":8,"nodeType":"721","messageId":"722","endLine":20,"endColumn":12},{"ruleId":"719","severity":1,"message":"825","line":21,"column":8,"nodeType":"721","messageId":"722","endLine":21,"endColumn":22},{"ruleId":"719","severity":1,"message":"826","line":22,"column":8,"nodeType":"721","messageId":"722","endLine":22,"endColumn":21},{"ruleId":"719","severity":1,"message":"827","line":23,"column":8,"nodeType":"721","messageId":"722","endLine":23,"endColumn":22},{"ruleId":"719","severity":1,"message":"802","line":14,"column":31,"nodeType":"721","messageId":"722","endLine":14,"endColumn":36},{"ruleId":"719","severity":1,"message":"802","line":18,"column":21,"nodeType":"721","messageId":"722","endLine":18,"endColumn":26},{"ruleId":"782","severity":1,"message":"783","line":13,"column":7,"nodeType":"729","messageId":"784","endLine":13,"endColumn":18},{"ruleId":"719","severity":1,"message":"802","line":17,"column":31,"nodeType":"721","messageId":"722","endLine":17,"endColumn":36},{"ruleId":"719","severity":1,"message":"802","line":22,"column":21,"nodeType":"721","messageId":"722","endLine":22,"endColumn":26},{"ruleId":"719","severity":1,"message":"828","line":46,"column":7,"nodeType":"721","messageId":"722","endLine":46,"endColumn":19},{"ruleId":"719","severity":1,"message":"829","line":73,"column":4,"nodeType":"721","messageId":"722","endLine":73,"endColumn":15},{"ruleId":"709","replacedBy":"830"},{"ruleId":"711","replacedBy":"831"},{"ruleId":"713","replacedBy":"832"},{"ruleId":"715","replacedBy":"833"},{"ruleId":"717","replacedBy":"834"},{"ruleId":"719","severity":1,"message":"835","line":1,"column":8,"nodeType":"721","messageId":"722","endLine":1,"endColumn":13},{"ruleId":"719","severity":1,"message":"736","line":11,"column":10,"nodeType":"721","messageId":"722","endLine":11,"endColumn":16},{"ruleId":"719","severity":1,"message":"737","line":11,"column":18,"nodeType":"721","messageId":"722","endLine":11,"endColumn":28},{"ruleId":"719","severity":1,"message":"738","line":11,"column":30,"nodeType":"721","messageId":"722","endLine":11,"endColumn":38},{"ruleId":"719","severity":1,"message":"753","line":5,"column":8,"nodeType":"721","messageId":"722","endLine":5,"endColumn":20},{"ruleId":"719","severity":1,"message":"836","line":8,"column":8,"nodeType":"721","messageId":"722","endLine":8,"endColumn":17},{"ruleId":"719","severity":1,"message":"814","line":9,"column":17,"nodeType":"721","messageId":"722","endLine":9,"endColumn":26},{"ruleId":"719","severity":1,"message":"794","line":10,"column":10,"nodeType":"721","messageId":"722","endLine":10,"endColumn":21},{"ruleId":"719","severity":1,"message":"764","line":11,"column":67,"nodeType":"721","messageId":"722","endLine":11,"endColumn":76},{"ruleId":"719","severity":1,"message":"837","line":16,"column":10,"nodeType":"721","messageId":"722","endLine":16,"endColumn":19},{"ruleId":"719","severity":1,"message":"838","line":20,"column":8,"nodeType":"721","messageId":"722","endLine":20,"endColumn":23},{"ruleId":"719","severity":1,"message":"791","line":23,"column":10,"nodeType":"721","messageId":"722","endLine":23,"endColumn":17},{"ruleId":"719","severity":1,"message":"750","line":25,"column":17,"nodeType":"721","messageId":"722","endLine":25,"endColumn":24},{"ruleId":"719","severity":1,"message":"751","line":26,"column":18,"nodeType":"721","messageId":"722","endLine":26,"endColumn":26},{"ruleId":"719","severity":1,"message":"741","line":28,"column":19,"nodeType":"721","messageId":"722","endLine":28,"endColumn":28},{"ruleId":"719","severity":1,"message":"839","line":30,"column":11,"nodeType":"721","messageId":"722","endLine":30,"endColumn":20},{"ruleId":"719","severity":1,"message":"840","line":31,"column":11,"nodeType":"721","messageId":"722","endLine":31,"endColumn":22},{"ruleId":"719","severity":1,"message":"841","line":31,"column":24,"nodeType":"721","messageId":"722","endLine":31,"endColumn":38},{"ruleId":"719","severity":1,"message":"842","line":40,"column":10,"nodeType":"721","messageId":"722","endLine":40,"endColumn":18},{"ruleId":"719","severity":1,"message":"843","line":64,"column":10,"nodeType":"721","messageId":"722","endLine":64,"endColumn":26},{"ruleId":"719","severity":1,"message":"844","line":70,"column":10,"nodeType":"721","messageId":"722","endLine":70,"endColumn":15},{"ruleId":"719","severity":1,"message":"845","line":71,"column":10,"nodeType":"721","messageId":"722","endLine":71,"endColumn":18},{"ruleId":"719","severity":1,"message":"753","line":5,"column":8,"nodeType":"721","messageId":"722","endLine":5,"endColumn":20},{"ruleId":"719","severity":1,"message":"743","line":22,"column":21,"nodeType":"721","messageId":"722","endLine":22,"endColumn":32},{"ruleId":"719","severity":1,"message":"750","line":24,"column":17,"nodeType":"721","messageId":"722","endLine":24,"endColumn":24},{"ruleId":"719","severity":1,"message":"751","line":25,"column":18,"nodeType":"721","messageId":"722","endLine":25,"endColumn":26},{"ruleId":"719","severity":1,"message":"741","line":26,"column":19,"nodeType":"721","messageId":"722","endLine":26,"endColumn":28},{"ruleId":"719","severity":1,"message":"839","line":27,"column":11,"nodeType":"721","messageId":"722","endLine":27,"endColumn":20},{"ruleId":"719","severity":1,"message":"846","line":28,"column":18,"nodeType":"721","messageId":"722","endLine":28,"endColumn":26},{"ruleId":"719","severity":1,"message":"847","line":87,"column":10,"nodeType":"721","messageId":"722","endLine":87,"endColumn":22},{"ruleId":"719","severity":1,"message":"848","line":5,"column":8,"nodeType":"721","messageId":"722","endLine":5,"endColumn":15},{"ruleId":"719","severity":1,"message":"750","line":20,"column":17,"nodeType":"721","messageId":"722","endLine":20,"endColumn":24},{"ruleId":"719","severity":1,"message":"751","line":21,"column":18,"nodeType":"721","messageId":"722","endLine":21,"endColumn":26},{"ruleId":"719","severity":1,"message":"822","line":3,"column":10,"nodeType":"721","messageId":"722","endLine":3,"endColumn":14},{"ruleId":"719","severity":1,"message":"849","line":4,"column":8,"nodeType":"721","messageId":"722","endLine":4,"endColumn":24},{"ruleId":"719","severity":1,"message":"850","line":7,"column":8,"nodeType":"721","messageId":"722","endLine":7,"endColumn":12},{"ruleId":"719","severity":1,"message":"851","line":8,"column":8,"nodeType":"721","messageId":"722","endLine":8,"endColumn":16},{"ruleId":"719","severity":1,"message":"852","line":10,"column":19,"nodeType":"721","messageId":"722","endLine":10,"endColumn":25},{"ruleId":"719","severity":1,"message":"853","line":10,"column":46,"nodeType":"721","messageId":"722","endLine":10,"endColumn":60},{"ruleId":"719","severity":1,"message":"854","line":10,"column":62,"nodeType":"721","messageId":"722","endLine":10,"endColumn":67},{"ruleId":"745","severity":1,"message":"855","line":34,"column":7,"nodeType":"747","endLine":34,"endColumn":9,"suggestions":"856"},{"ruleId":"719","severity":1,"message":"773","line":89,"column":28,"nodeType":"721","messageId":"722","endLine":89,"endColumn":32},{"ruleId":"727","severity":1,"message":"728","line":30,"column":17,"nodeType":"729","messageId":"730","endLine":30,"endColumn":36},{"ruleId":"727","severity":1,"message":"728","line":55,"column":33,"nodeType":"729","messageId":"730","endLine":55,"endColumn":43},{"ruleId":"727","severity":1,"message":"728","line":87,"column":39,"nodeType":"729","messageId":"730","endLine":87,"endColumn":49},{"ruleId":"782","severity":1,"message":"783","line":9,"column":7,"nodeType":"729","messageId":"784","endLine":9,"endColumn":18},{"ruleId":"727","severity":1,"message":"728","line":9,"column":19,"nodeType":"729","messageId":"730","endLine":9,"endColumn":40},{"ruleId":"727","severity":1,"message":"728","line":30,"column":58,"nodeType":"729","messageId":"730","endLine":30,"endColumn":79},{"ruleId":"727","severity":1,"message":"728","line":46,"column":20,"nodeType":"729","messageId":"730","endLine":46,"endColumn":36},{"ruleId":"727","severity":1,"message":"728","line":47,"column":22,"nodeType":"729","messageId":"730","endLine":47,"endColumn":38},{"ruleId":"727","severity":1,"message":"728","line":68,"column":40,"nodeType":"729","messageId":"730","endLine":68,"endColumn":56},{"ruleId":"727","severity":1,"message":"728","line":76,"column":40,"nodeType":"729","messageId":"730","endLine":76,"endColumn":56},{"ruleId":"727","severity":1,"message":"728","line":84,"column":40,"nodeType":"729","messageId":"730","endLine":84,"endColumn":56},{"ruleId":"727","severity":1,"message":"728","line":105,"column":44,"nodeType":"729","messageId":"730","endLine":105,"endColumn":63},{"ruleId":"727","severity":1,"message":"728","line":110,"column":22,"nodeType":"729","messageId":"730","endLine":110,"endColumn":37},{"ruleId":"727","severity":1,"message":"728","line":111,"column":28,"nodeType":"729","messageId":"730","endLine":111,"endColumn":49},{"ruleId":"709","replacedBy":"857"},{"ruleId":"711","replacedBy":"858"},{"ruleId":"713","replacedBy":"859"},{"ruleId":"715","replacedBy":"860"},{"ruleId":"717","replacedBy":"861"},{"ruleId":"727","severity":1,"message":"728","line":29,"column":58,"nodeType":"729","messageId":"730","endLine":29,"endColumn":79},{"ruleId":"727","severity":1,"message":"728","line":46,"column":20,"nodeType":"729","messageId":"730","endLine":46,"endColumn":36},{"ruleId":"727","severity":1,"message":"728","line":47,"column":22,"nodeType":"729","messageId":"730","endLine":47,"endColumn":38},{"ruleId":"727","severity":1,"message":"728","line":69,"column":40,"nodeType":"729","messageId":"730","endLine":69,"endColumn":56},{"ruleId":"727","severity":1,"message":"728","line":77,"column":40,"nodeType":"729","messageId":"730","endLine":77,"endColumn":56},{"ruleId":"727","severity":1,"message":"728","line":85,"column":40,"nodeType":"729","messageId":"730","endLine":85,"endColumn":56},{"ruleId":"727","severity":1,"message":"728","line":106,"column":44,"nodeType":"729","messageId":"730","endLine":106,"endColumn":63},{"ruleId":"727","severity":1,"message":"728","line":111,"column":22,"nodeType":"729","messageId":"730","endLine":111,"endColumn":37},{"ruleId":"727","severity":1,"message":"728","line":112,"column":28,"nodeType":"729","messageId":"730","endLine":112,"endColumn":49},{"ruleId":"719","severity":1,"message":"862","line":3,"column":8,"nodeType":"721","messageId":"722","endLine":3,"endColumn":14},{"ruleId":"719","severity":1,"message":"807","line":4,"column":8,"nodeType":"721","messageId":"722","endLine":4,"endColumn":22},{"ruleId":"719","severity":1,"message":"759","line":5,"column":10,"nodeType":"721","messageId":"722","endLine":5,"endColumn":13},{"ruleId":"719","severity":1,"message":"790","line":6,"column":13,"nodeType":"721","messageId":"722","endLine":6,"endColumn":20},{"ruleId":"719","severity":1,"message":"814","line":7,"column":17,"nodeType":"721","messageId":"722","endLine":7,"endColumn":26},{"ruleId":"719","severity":1,"message":"863","line":8,"column":15,"nodeType":"721","messageId":"722","endLine":8,"endColumn":19},{"ruleId":"719","severity":1,"message":"822","line":9,"column":10,"nodeType":"721","messageId":"722","endLine":9,"endColumn":14},{"ruleId":"719","severity":1,"message":"864","line":11,"column":10,"nodeType":"721","messageId":"722","endLine":11,"endColumn":20},{"ruleId":"719","severity":1,"message":"865","line":1,"column":10,"nodeType":"721","messageId":"722","endLine":1,"endColumn":18},{"ruleId":"719","severity":1,"message":"862","line":2,"column":8,"nodeType":"721","messageId":"722","endLine":2,"endColumn":14},{"ruleId":"719","severity":1,"message":"759","line":4,"column":10,"nodeType":"721","messageId":"722","endLine":4,"endColumn":13},{"ruleId":"719","severity":1,"message":"866","line":4,"column":21,"nodeType":"721","messageId":"722","endLine":4,"endColumn":24},{"ruleId":"719","severity":1,"message":"811","line":4,"column":36,"nodeType":"721","messageId":"722","endLine":4,"endColumn":44},{"ruleId":"719","severity":1,"message":"790","line":5,"column":10,"nodeType":"721","messageId":"722","endLine":5,"endColumn":17},{"ruleId":"719","severity":1,"message":"862","line":2,"column":8,"nodeType":"721","messageId":"722","endLine":2,"endColumn":14},{"ruleId":"719","severity":1,"message":"790","line":5,"column":10,"nodeType":"721","messageId":"722","endLine":5,"endColumn":17},{"ruleId":"719","severity":1,"message":"814","line":6,"column":17,"nodeType":"721","messageId":"722","endLine":6,"endColumn":26},{"ruleId":"719","severity":1,"message":"864","line":10,"column":10,"nodeType":"721","messageId":"722","endLine":10,"endColumn":20},{"ruleId":"719","severity":1,"message":"867","line":12,"column":7,"nodeType":"721","messageId":"722","endLine":12,"endColumn":20},{"ruleId":"719","severity":1,"message":"868","line":19,"column":20,"nodeType":"721","messageId":"722","endLine":19,"endColumn":30},{"ruleId":"782","severity":1,"message":"783","line":34,"column":7,"nodeType":"729","messageId":"784","endLine":34,"endColumn":18},{"ruleId":"782","severity":1,"message":"783","line":35,"column":7,"nodeType":"729","messageId":"784","endLine":35,"endColumn":18},{"ruleId":"719","severity":1,"message":"759","line":5,"column":10,"nodeType":"721","messageId":"722","endLine":5,"endColumn":13},{"ruleId":"719","severity":1,"message":"862","line":6,"column":8,"nodeType":"721","messageId":"722","endLine":6,"endColumn":14},{"ruleId":"719","severity":1,"message":"869","line":16,"column":10,"nodeType":"721","messageId":"722","endLine":16,"endColumn":21},{"ruleId":"745","severity":1,"message":"870","line":59,"column":7,"nodeType":"747","endLine":59,"endColumn":22,"suggestions":"871"},{"ruleId":"719","severity":1,"message":"838","line":4,"column":8,"nodeType":"721","messageId":"722","endLine":4,"endColumn":23},{"ruleId":"719","severity":1,"message":"759","line":5,"column":10,"nodeType":"721","messageId":"722","endLine":5,"endColumn":13},{"ruleId":"719","severity":1,"message":"872","line":5,"column":15,"nodeType":"721","messageId":"722","endLine":5,"endColumn":20},{"ruleId":"719","severity":1,"message":"811","line":5,"column":38,"nodeType":"721","messageId":"722","endLine":5,"endColumn":46},{"ruleId":"719","severity":1,"message":"862","line":6,"column":8,"nodeType":"721","messageId":"722","endLine":6,"endColumn":14},{"ruleId":"745","severity":1,"message":"873","line":44,"column":7,"nodeType":"747","endLine":44,"endColumn":22,"suggestions":"874"},{"ruleId":"719","severity":1,"message":"759","line":5,"column":10,"nodeType":"721","messageId":"722","endLine":5,"endColumn":13},{"ruleId":"719","severity":1,"message":"862","line":6,"column":8,"nodeType":"721","messageId":"722","endLine":6,"endColumn":14},{"ruleId":"745","severity":1,"message":"875","line":50,"column":7,"nodeType":"747","endLine":50,"endColumn":22,"suggestions":"876"},{"ruleId":"719","severity":1,"message":"838","line":4,"column":8,"nodeType":"721","messageId":"722","endLine":4,"endColumn":23},{"ruleId":"719","severity":1,"message":"759","line":5,"column":10,"nodeType":"721","messageId":"722","endLine":5,"endColumn":13},{"ruleId":"719","severity":1,"message":"872","line":5,"column":15,"nodeType":"721","messageId":"722","endLine":5,"endColumn":20},{"ruleId":"719","severity":1,"message":"811","line":5,"column":38,"nodeType":"721","messageId":"722","endLine":5,"endColumn":46},{"ruleId":"719","severity":1,"message":"862","line":6,"column":8,"nodeType":"721","messageId":"722","endLine":6,"endColumn":14},{"ruleId":"719","severity":1,"message":"877","line":8,"column":4,"nodeType":"721","messageId":"722","endLine":8,"endColumn":16},{"ruleId":"719","severity":1,"message":"878","line":9,"column":4,"nodeType":"721","messageId":"722","endLine":9,"endColumn":9},{"ruleId":"719","severity":1,"message":"879","line":10,"column":4,"nodeType":"721","messageId":"722","endLine":10,"endColumn":43},{"ruleId":"745","severity":1,"message":"880","line":54,"column":7,"nodeType":"747","endLine":54,"endColumn":22,"suggestions":"881"},{"ruleId":"719","severity":1,"message":"862","line":2,"column":8,"nodeType":"721","messageId":"722","endLine":2,"endColumn":14},{"ruleId":"719","severity":1,"message":"759","line":4,"column":10,"nodeType":"721","messageId":"722","endLine":4,"endColumn":13},{"ruleId":"719","severity":1,"message":"866","line":4,"column":21,"nodeType":"721","messageId":"722","endLine":4,"endColumn":24},{"ruleId":"719","severity":1,"message":"811","line":4,"column":36,"nodeType":"721","messageId":"722","endLine":4,"endColumn":44},{"ruleId":"719","severity":1,"message":"790","line":5,"column":10,"nodeType":"721","messageId":"722","endLine":5,"endColumn":17},{"ruleId":"719","severity":1,"message":"838","line":4,"column":8,"nodeType":"721","messageId":"722","endLine":4,"endColumn":23},{"ruleId":"719","severity":1,"message":"759","line":5,"column":10,"nodeType":"721","messageId":"722","endLine":5,"endColumn":13},{"ruleId":"719","severity":1,"message":"872","line":5,"column":15,"nodeType":"721","messageId":"722","endLine":5,"endColumn":20},{"ruleId":"719","severity":1,"message":"811","line":5,"column":38,"nodeType":"721","messageId":"722","endLine":5,"endColumn":46},{"ruleId":"719","severity":1,"message":"862","line":6,"column":8,"nodeType":"721","messageId":"722","endLine":6,"endColumn":14},{"ruleId":"745","severity":1,"message":"882","line":46,"column":7,"nodeType":"747","endLine":46,"endColumn":22,"suggestions":"883"},{"ruleId":"719","severity":1,"message":"759","line":4,"column":15,"nodeType":"721","messageId":"722","endLine":4,"endColumn":18},{"ruleId":"719","severity":1,"message":"734","line":8,"column":46,"nodeType":"721","messageId":"722","endLine":8,"endColumn":53},{"ruleId":"719","severity":1,"message":"733","line":8,"column":55,"nodeType":"721","messageId":"722","endLine":8,"endColumn":69},{"ruleId":"719","severity":1,"message":"764","line":9,"column":36,"nodeType":"721","messageId":"722","endLine":9,"endColumn":45},{"ruleId":"719","severity":1,"message":"765","line":9,"column":47,"nodeType":"721","messageId":"722","endLine":9,"endColumn":63},{"ruleId":"719","severity":1,"message":"735","line":9,"column":65,"nodeType":"721","messageId":"722","endLine":9,"endColumn":88},{"ruleId":"719","severity":1,"message":"736","line":16,"column":10,"nodeType":"721","messageId":"722","endLine":16,"endColumn":16},{"ruleId":"719","severity":1,"message":"737","line":16,"column":18,"nodeType":"721","messageId":"722","endLine":16,"endColumn":28},{"ruleId":"719","severity":1,"message":"738","line":16,"column":30,"nodeType":"721","messageId":"722","endLine":16,"endColumn":38},{"ruleId":"719","severity":1,"message":"770","line":19,"column":10,"nodeType":"721","messageId":"722","endLine":19,"endColumn":19},{"ruleId":"719","severity":1,"message":"884","line":20,"column":8,"nodeType":"721","messageId":"722","endLine":20,"endColumn":11},{"ruleId":"719","severity":1,"message":"885","line":22,"column":8,"nodeType":"721","messageId":"722","endLine":22,"endColumn":17},{"ruleId":"719","severity":1,"message":"791","line":26,"column":10,"nodeType":"721","messageId":"722","endLine":26,"endColumn":17},{"ruleId":"719","severity":1,"message":"752","line":29,"column":17,"nodeType":"721","messageId":"722","endLine":29,"endColumn":24},{"ruleId":"782","severity":1,"message":"783","line":83,"column":7,"nodeType":"729","messageId":"784","endLine":83,"endColumn":18},{"ruleId":"727","severity":1,"message":"886","line":156,"column":44,"nodeType":"729","messageId":"730","endLine":156,"endColumn":54},{"ruleId":"719","severity":1,"message":"835","line":1,"column":8,"nodeType":"721","messageId":"722","endLine":1,"endColumn":13},{"ruleId":"719","severity":1,"message":"786","line":2,"column":8,"nodeType":"721","messageId":"722","endLine":2,"endColumn":20},{"ruleId":"719","severity":1,"message":"805","line":3,"column":8,"nodeType":"721","messageId":"722","endLine":3,"endColumn":15},{"ruleId":"719","severity":1,"message":"836","line":10,"column":8,"nodeType":"721","messageId":"722","endLine":10,"endColumn":17},{"ruleId":"719","severity":1,"message":"790","line":11,"column":13,"nodeType":"721","messageId":"722","endLine":11,"endColumn":20},{"ruleId":"719","severity":1,"message":"733","line":13,"column":34,"nodeType":"721","messageId":"722","endLine":13,"endColumn":48},{"ruleId":"719","severity":1,"message":"734","line":13,"column":50,"nodeType":"721","messageId":"722","endLine":13,"endColumn":57},{"ruleId":"719","severity":1,"message":"763","line":14,"column":24,"nodeType":"721","messageId":"722","endLine":14,"endColumn":34},{"ruleId":"719","severity":1,"message":"764","line":14,"column":36,"nodeType":"721","messageId":"722","endLine":14,"endColumn":45},{"ruleId":"719","severity":1,"message":"765","line":14,"column":47,"nodeType":"721","messageId":"722","endLine":14,"endColumn":63},{"ruleId":"719","severity":1,"message":"735","line":14,"column":65,"nodeType":"721","messageId":"722","endLine":14,"endColumn":88},{"ruleId":"719","severity":1,"message":"736","line":15,"column":10,"nodeType":"721","messageId":"722","endLine":15,"endColumn":16},{"ruleId":"719","severity":1,"message":"737","line":15,"column":18,"nodeType":"721","messageId":"722","endLine":15,"endColumn":28},{"ruleId":"719","severity":1,"message":"738","line":15,"column":30,"nodeType":"721","messageId":"722","endLine":15,"endColumn":38},{"ruleId":"719","severity":1,"message":"864","line":19,"column":10,"nodeType":"721","messageId":"722","endLine":19,"endColumn":20},"lines-around-directive",["887"],"global-require",[],"no-buffer-constructor",[],"no-new-require",[],"no-path-concat",[],"no-unused-vars","'Khaata' is defined but never used.","Identifier","unusedVar","react/display-name","Component definition is missing display name","ArrowFunctionExpression","noDisplayName","react/destructuring-assignment","Must use destructuring props assignment","MemberExpression","useDestructAssignment","'getComponent' is assigned a value but never used.","'Table' is defined but never used.","'OverlayTrigger' is defined but never used.","'Popover' is defined but never used.","'AiOutlineQuestionCircle' is defined but never used.","'FaSort' is defined but never used.","'FaSortDown' is defined but never used.","'FaSortUp' is defined but never used.","'setEmployee' is assigned a value but never used.","'sort' is assigned a value but never used.","'setSearch' is assigned a value but never used.","'debouncedSearchValue' is assigned a value but never used.","'setUrlState' is assigned a value but never used.","'handleSort' is assigned a value but never used.","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'formik'. Either include it or remove the dependency array.","ArrayExpression",["888"],"'res' is assigned a value but never used.","'setPage' is assigned a value but never used.","'setLimit' is assigned a value but never used.","'setSort' is assigned a value but never used.","'ModalWrapper' is defined but never used.","'useMemo' is defined but never used.","'useRef' is defined but never used.","'FaMinusCircle' is defined but never used.","'FaPlusCircle' is defined but never used.","'index' is defined but never used. Allowed unused args must match /res|next|^err/u.","'get' is defined but never used.","'setSuppliersData' is defined but never used.","'setSuppliersVisibility' is defined but never used.","'AiFillDelete' is defined but never used.","'AiFillEdit' is defined but never used.","'AiFillEye' is defined but never used.","'AiFillPlusCircle' is defined but never used.","'handleOnClickEdit' is assigned a value but never used.","'handleOnClickView' is assigned a value but never used.","'handleOnClickAdd' is assigned a value but never used.","'post' is defined but never used.","'userRoles' is defined but never used.","React Hook useEffect has missing dependencies: 'alert', 'history', and 'props'. Either include them or remove the dependency array. However, 'props' will change when *any* prop changes, so the preferred fix is to destructure the 'props' object outside of the useEffect call and refer to those specific props inside useEffect.",["889"],"'auth' is defined but never used. Allowed unused args must match /res|next|^err/u.","'setCustomer' is assigned a value but never used.","React Hook useMemo has a missing dependency: 'props.user?.role'. Either include it or remove the dependency array.",["890"],["891"],"'setSalePage' is assigned a value but never used.","'setSaleLimit' is assigned a value but never used.","'setSaleSort' is assigned a value but never used.",["892"],"no-console","Unexpected console statement.","unexpected",["893"],"'relativeTime' is defined but never used.",["894"],"'limit' is assigned a value but never used.",["895"],"'isArray' is defined but never used.","'history' is assigned a value but never used.","'queryClient' is assigned a value but never used.","'Dropdown' is defined but never used.","'ButtonGroup' is defined but never used.","'connect' is defined but never used.","'getActiveElement' is defined but never used.","'Button' is defined but never used.","'AiOutlineClear' is defined but never used.","'props' is defined but never used. Allowed unused args must match /res|next|^err/u.","React Hook useEffect has a missing dependency: 'getUserProfile'. Either include it or remove the dependency array. Outer scope values like 'token' aren't valid dependencies because mutating them doesn't re-render the component.",["896"],"'state' is defined but never used. Allowed unused args must match /res|next|^err/u.","'ExpenseTypes' is defined but never used.","'useSelector' is defined but never used.","'produce' is defined but never used.","'Pagination' is defined but never used.","'SpinnerOverlay' is defined but never used.","'del' is defined but never used.","'useAlert' is defined but never used.","'useMutation' is defined but never used.","'useQuery' is defined but never used.","'getQuantity' is defined but never used.","'_' is defined but never used.","'useEffect' is defined but never used.","'useState' is defined but never used.","'Card' is defined but never used.","'Col' is defined but never used.","'Row' is defined but never used.","'Else' is defined but never used.","'If' is defined but never used.","'Then' is defined but never used.","'When' is defined but never used.","'useQueryClient' is defined but never used.","'swal' is defined but never used.","'getSortingIcon' is defined but never used.","'ClearPurchase' is defined but never used.","'RefundPurchase' is defined but never used.","'EllipsisPage' is assigned a value but never used.","'hasPrevPage' is defined but never used. Allowed unused args must match /res|next|^err/u.",["887"],[],[],[],[],"'dayjs' is defined but never used.","'PageTItle' is defined but never used.","'useFormik' is defined but never used.","'CreatableSelect' is defined but never used.","'showModal' is assigned a value but never used.","'selectedRow' is assigned a value but never used.","'setSelectedRow' is assigned a value but never used.","'getTypes' is assigned a value but never used.","'postTypeMutation' is assigned a value but never used.","'isAdd' is assigned a value but never used.","'mutation' is assigned a value but never used.","'setTitle' is assigned a value but never used.","'handleSubmit' is assigned a value but never used.","'ChatBox' is defined but never used.","'PerfectScrollbar' is defined but never used.","'logo' is defined but never used.","'logoText' is defined but never used.","'onNote' is defined but never used. Allowed unused args must match /res|next|^err/u.","'onNotification' is defined but never used. Allowed unused args must match /res|next|^err/u.","'onBox' is defined but never used. Allowed unused args must match /res|next|^err/u.","React Hook React.useEffect has missing dependencies: 'history' and 'logout'. Either include them or remove the dependency array. If 'logout' changes too often, find the parent component that defines it and wrap that definition in useCallback.",["897"],["887"],[],[],[],[],"'Select' is defined but never used.","'Form' is defined but never used.","'useHistory' is defined but never used.","'Fragment' is defined but never used.","'put' is defined but never used.","'initialValues' is assigned a value but never used.","'setIsError' is assigned a value but never used.","'QueryClient' is defined but never used.","React Hook useEffect has missing dependencies: 'formik' and 'state.data.modelNumber'. Either include them or remove the dependency array.",["898"],"'getV2' is defined but never used.","React Hook useEffect has missing dependencies: 'formik' and 'state.data.title'. Either include them or remove the dependency array.",["899"],"React Hook useEffect has missing dependencies: 'formik', 'state.data.title', 'state.data.type', and 'state.data.value'. Either include them or remove the dependency array.",["900"],"'setTypesData' is defined but never used.","'setSu' is defined but never used.","'setSuppliersVisibilityppliersVisibility' is defined but never used.","React Hook useEffect has missing dependencies: 'formik', 'state.data.company', 'state.data.name', and 'state.data.phone'. Either include them or remove the dependency array.",["901"],"React Hook useEffect has missing dependencies: 'formik', 'state.data.name', and 'state.data.phone'. Either include them or remove the dependency array.",["902"],"'cls' is defined but never used.","'ClearSale' is defined but never used.","Must use destructuring p assignment","padding-line-between-statements",{"desc":"903","fix":"904"},{"desc":"905","fix":"906"},{"desc":"907","fix":"908"},{"desc":"903","fix":"909"},{"desc":"907","fix":"910"},{"desc":"911","fix":"912"},{"desc":"907","fix":"913"},{"desc":"903","fix":"914"},{"desc":"915","fix":"916"},{"desc":"917","fix":"918"},{"desc":"919","fix":"920"},{"desc":"921","fix":"922"},{"desc":"923","fix":"924"},{"desc":"925","fix":"926"},{"desc":"927","fix":"928"},"Update the dependencies array to be: [formik, isEditing, query.data]",{"range":"929","text":"930"},"Update the dependencies array to be: [alert, history, props]",{"range":"931","text":"932"},"Update the dependencies array to be: [props.user?.role, urlState?.type]",{"range":"933","text":"934"},{"range":"935","text":"930"},{"range":"936","text":"934"},"Update the dependencies array to be: [formik, isEditing, query.data?.product]",{"range":"937","text":"938"},{"range":"939","text":"934"},{"range":"940","text":"930"},"Update the dependencies array to be: [getUserProfile]",{"range":"941","text":"942"},"Update the dependencies array to be: [history, logout]",{"range":"943","text":"944"},"Update the dependencies array to be: [formik, state.data.modelNumber, state.visible]",{"range":"945","text":"946"},"Update the dependencies array to be: [formik, state.data.title, state.visible]",{"range":"947","text":"948"},"Update the dependencies array to be: [formik, state.data.title, state.data.type, state.data.value, state.visible]",{"range":"949","text":"950"},"Update the dependencies array to be: [formik, state.data.company, state.data.name, state.data.phone, state.visible]",{"range":"951","text":"952"},"Update the dependencies array to be: [formik, state.data.name, state.data.phone, state.visible]",{"range":"953","text":"954"},[3874,3897],"[formik, isEditing, query.data]",[1973,1975],"[alert, history, props]",[1697,1712],"[props.user?.role, urlState?.type]",[3903,3926],[2016,2031],[5390,5422],"[formik, isEditing, query.data?.product]",[1291,1306],[3390,3413],[916,923],"[getUserProfile]",[1069,1071],"[history, logout]",[2001,2016],"[formik, state.data.modelNumber, state.visible]",[1534,1549],"[formik, state.data.title, state.visible]",[1817,1832],"[formik, state.data.title, state.data.type, state.data.value, state.visible]",[1902,1917],"[formik, state.data.company, state.data.name, state.data.phone, state.visible]",[1697,1712],"[formik, state.data.name, state.data.phone, state.visible]"]