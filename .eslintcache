[{"/home/muneeb/dev/diamond-tiles-frontend/src/index.js":"1","/home/muneeb/dev/diamond-tiles-frontend/src/App.js":"2","/home/muneeb/dev/diamond-tiles-frontend/src/store/index.js":"3","/home/muneeb/dev/diamond-tiles-frontend/src/store/reducers.js":"4","/home/muneeb/dev/diamond-tiles-frontend/src/jsx/index.js":"5","/home/muneeb/dev/diamond-tiles-frontend/src/store/auth/reducer.js":"6","/home/muneeb/dev/diamond-tiles-frontend/src/jsx/pages/Error404.js":"7","/home/muneeb/dev/diamond-tiles-frontend/src/jsx/pages/employees/EmployeeActions.js":"8","/home/muneeb/dev/diamond-tiles-frontend/src/jsx/pages/Registration.js":"9","/home/muneeb/dev/diamond-tiles-frontend/src/jsx/pages/expenses/ExpenseActions.js":"10","/home/muneeb/dev/diamond-tiles-frontend/src/jsx/pages/purchase/AddPurchase.js":"11","/home/muneeb/dev/diamond-tiles-frontend/src/jsx/pages/sale/AddSale.js":"12","/home/muneeb/dev/diamond-tiles-frontend/src/jsx/pages/types/TypeActions.js":"13","/home/muneeb/dev/diamond-tiles-frontend/src/jsx/helpers/enums.js":"14","/home/muneeb/dev/diamond-tiles-frontend/src/jsx/pages/Login.js":"15","/home/muneeb/dev/diamond-tiles-frontend/src/jsx/pages/customers/CustomerActions.js":"16","/home/muneeb/dev/diamond-tiles-frontend/src/jsx/pages/products/ProductActions.js":"17","/home/muneeb/dev/diamond-tiles-frontend/src/jsx/pages/suppliers/SupplierActions.js":"18","/home/muneeb/dev/diamond-tiles-frontend/src/store/auth/actionTypes.js":"19","/home/muneeb/dev/diamond-tiles-frontend/src/jsx/pages/employees/index.js":"20","/home/muneeb/dev/diamond-tiles-frontend/src/jsx/pages/inventory/index.js":"21","/home/muneeb/dev/diamond-tiles-frontend/src/jsx/pages/dashboard/index.js":"22","/home/muneeb/dev/diamond-tiles-frontend/src/jsx/pages/khaata/index.js":"23","/home/muneeb/dev/diamond-tiles-frontend/src/jsx/layouts/index.js":"24","/home/muneeb/dev/diamond-tiles-frontend/src/jsx/pages/expenses/index.js":"25","/home/muneeb/dev/diamond-tiles-frontend/src/jsx/pages/customers/index.js":"26","/home/muneeb/dev/diamond-tiles-frontend/src/jsx/pages/products/index.js":"27","/home/muneeb/dev/diamond-tiles-frontend/src/jsx/pages/sale/index.js":"28","/home/muneeb/dev/diamond-tiles-frontend/src/jsx/pages/purchase/index.js":"29","/home/muneeb/dev/diamond-tiles-frontend/src/jsx/pages/suppliers/index.js":"30","/home/muneeb/dev/diamond-tiles-frontend/src/store/auth/actions.js":"31","/home/muneeb/dev/diamond-tiles-frontend/src/jsx/components/CreatableSelect.js":"32","/home/muneeb/dev/diamond-tiles-frontend/src/jsx/components/Select.js":"33","/home/muneeb/dev/diamond-tiles-frontend/src/jsx/components/Button.js":"34","/home/muneeb/dev/diamond-tiles-frontend/src/jsx/components/Pagination.js":"35","/home/muneeb/dev/diamond-tiles-frontend/src/jsx/components/SpinnerOverlay.js":"36","/home/muneeb/dev/diamond-tiles-frontend/src/jsx/components/ModalWrapper.js":"37","/home/muneeb/dev/diamond-tiles-frontend/src/jsx/layouts/PageTitle.js":"38","/home/muneeb/dev/diamond-tiles-frontend/src/jsx/components/invoice.js":"39","/home/muneeb/dev/diamond-tiles-frontend/src/jsx/layouts/Footer.js":"40","/home/muneeb/dev/diamond-tiles-frontend/src/jsx/helpers/index.js":"41","/home/muneeb/dev/diamond-tiles-frontend/src/jsx/pages/salaries/index.js":"42","/home/muneeb/dev/diamond-tiles-frontend/src/jsx/pages/units/index.js":"43","/home/muneeb/dev/diamond-tiles-frontend/src/jsx/pages/types/index.js":"44","/home/muneeb/dev/diamond-tiles-frontend/src/jsx/layouts/nav/index.js":"45","/home/muneeb/dev/diamond-tiles-frontend/src/jsx/pages/expenseTypes/index.js":"46","/home/muneeb/dev/diamond-tiles-frontend/src/jsx/helpers/useAlert.js":"47","/home/muneeb/dev/diamond-tiles-frontend/src/jsx/helpers/server.js":"48","/home/muneeb/dev/diamond-tiles-frontend/src/jsx/helpers/useQuery.js":"49","/home/muneeb/dev/diamond-tiles-frontend/src/jsx/layouts/ChatBox.js":"50","/home/muneeb/dev/diamond-tiles-frontend/src/jsx/layouts/nav/NavHader.js":"51","/home/muneeb/dev/diamond-tiles-frontend/src/jsx/layouts/nav/Header.js":"52","/home/muneeb/dev/diamond-tiles-frontend/src/jsx/layouts/nav/SideBar.js":"53"},{"size":269,"mtime":1628758796058,"results":"54","hashOfConfig":"55"},{"size":840,"mtime":1628678703694,"results":"56","hashOfConfig":"55"},{"size":373,"mtime":1628758796058,"results":"57","hashOfConfig":"55"},{"size":163,"mtime":1628758796058,"results":"58","hashOfConfig":"55"},{"size":3933,"mtime":1628773267088,"results":"59","hashOfConfig":"55"},{"size":499,"mtime":1628758796058,"results":"60","hashOfConfig":"55"},{"size":825,"mtime":1627653242443,"results":"61","hashOfConfig":"55"},{"size":15832,"mtime":1628674748634,"results":"62","hashOfConfig":"55"},{"size":5866,"mtime":1628674748634,"results":"63","hashOfConfig":"55"},{"size":9988,"mtime":1628621332292,"results":"64","hashOfConfig":"55"},{"size":13657,"mtime":1628794591104,"results":"65","hashOfConfig":"55"},{"size":17093,"mtime":1628801430286,"results":"66","hashOfConfig":"55"},{"size":12873,"mtime":1628520150388,"results":"67","hashOfConfig":"55"},{"size":88,"mtime":1628773267088,"results":"68","hashOfConfig":"55"},{"size":6886,"mtime":1628773267088,"results":"69","hashOfConfig":"55"},{"size":18747,"mtime":1628773267092,"results":"70","hashOfConfig":"55"},{"size":21626,"mtime":1628773267092,"results":"71","hashOfConfig":"55"},{"size":17964,"mtime":1628773267092,"results":"72","hashOfConfig":"55"},{"size":62,"mtime":1628758796058,"results":"73","hashOfConfig":"55"},{"size":15206,"mtime":1628520150388,"results":"74","hashOfConfig":"55"},{"size":9181,"mtime":1628758796058,"results":"75","hashOfConfig":"55"},{"size":18986,"mtime":1628678633586,"results":"76","hashOfConfig":"55"},{"size":12400,"mtime":1628674748634,"results":"77","hashOfConfig":"55"},{"size":1851,"mtime":1628773267088,"results":"78","hashOfConfig":"55"},{"size":13066,"mtime":1628773267092,"results":"79","hashOfConfig":"55"},{"size":12097,"mtime":1628773267092,"results":"80","hashOfConfig":"55"},{"size":13433,"mtime":1628773267092,"results":"81","hashOfConfig":"55"},{"size":16836,"mtime":1628773267092,"results":"82","hashOfConfig":"55"},{"size":15553,"mtime":1628773267092,"results":"83","hashOfConfig":"55"},{"size":13295,"mtime":1628773267092,"results":"84","hashOfConfig":"55"},{"size":303,"mtime":1628758796058,"results":"85","hashOfConfig":"55"},{"size":1083,"mtime":1628258686302,"results":"86","hashOfConfig":"55"},{"size":1098,"mtime":1628796775967,"results":"87","hashOfConfig":"55"},{"size":873,"mtime":1627665532994,"results":"88","hashOfConfig":"55"},{"size":3755,"mtime":1628520150388,"results":"89","hashOfConfig":"55"},{"size":469,"mtime":1627669025267,"results":"90","hashOfConfig":"55"},{"size":1308,"mtime":1628138717409,"results":"91","hashOfConfig":"55"},{"size":467,"mtime":1627653242443,"results":"92","hashOfConfig":"55"},{"size":4973,"mtime":1628773267088,"results":"93","hashOfConfig":"55"},{"size":452,"mtime":1627653887148,"results":"94","hashOfConfig":"55"},{"size":82,"mtime":1627893330692,"results":"95","hashOfConfig":"55"},{"size":5111,"mtime":1628520150388,"results":"96","hashOfConfig":"55"},{"size":10747,"mtime":1628773267092,"results":"97","hashOfConfig":"55"},{"size":8652,"mtime":1628773267092,"results":"98","hashOfConfig":"55"},{"size":800,"mtime":1627794881747,"results":"99","hashOfConfig":"55"},{"size":8752,"mtime":1628773267092,"results":"100","hashOfConfig":"55"},{"size":2604,"mtime":1628578755610,"results":"101","hashOfConfig":"55"},{"size":1485,"mtime":1628799891927,"results":"102","hashOfConfig":"55"},{"size":406,"mtime":1628258678049,"results":"103","hashOfConfig":"55"},{"size":1687,"mtime":1628678609350,"results":"104","hashOfConfig":"55"},{"size":1085,"mtime":1627655776225,"results":"105","hashOfConfig":"55"},{"size":3813,"mtime":1628773267088,"results":"106","hashOfConfig":"55"},{"size":4853,"mtime":1628773267088,"results":"107","hashOfConfig":"55"},{"filePath":"108","messages":"109","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"110"},"1ssctl6",{"filePath":"111","messages":"112","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"110"},{"filePath":"113","messages":"114","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"110"},{"filePath":"115","messages":"116","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"110"},{"filePath":"117","messages":"118","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"119","usedDeprecatedRules":"110"},{"filePath":"120","messages":"121","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"110"},{"filePath":"122","messages":"123","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"110"},{"filePath":"124","messages":"125","errorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":"126","usedDeprecatedRules":"110"},{"filePath":"127","messages":"128","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"129","usedDeprecatedRules":"110"},{"filePath":"130","messages":"131","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"132","usedDeprecatedRules":"110"},{"filePath":"133","messages":"134","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"135","messages":"136","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"137","messages":"138","errorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":"139","usedDeprecatedRules":"110"},{"filePath":"140","messages":"141","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"110"},{"filePath":"142","messages":"143","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"144","usedDeprecatedRules":"110"},{"filePath":"145","messages":"146","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"147","usedDeprecatedRules":"110"},{"filePath":"148","messages":"149","errorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"150","usedDeprecatedRules":"110"},{"filePath":"151","messages":"152","errorCount":0,"warningCount":9,"fixableErrorCount":0,"fixableWarningCount":0,"source":"153","usedDeprecatedRules":"110"},{"filePath":"154","messages":"155","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"110"},{"filePath":"156","messages":"157","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"110"},{"filePath":"158","messages":"159","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"160","usedDeprecatedRules":"110"},{"filePath":"161","messages":"162","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"163","usedDeprecatedRules":"110"},{"filePath":"164","messages":"165","errorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":"166","usedDeprecatedRules":"110"},{"filePath":"167","messages":"168","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"169","usedDeprecatedRules":"110"},{"filePath":"170","messages":"171","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"172","usedDeprecatedRules":"110"},{"filePath":"173","messages":"174","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"110"},{"filePath":"175","messages":"176","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"110"},{"filePath":"177","messages":"178","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"179","usedDeprecatedRules":"110"},{"filePath":"180","messages":"181","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"182","usedDeprecatedRules":"110"},{"filePath":"183","messages":"184","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"110"},{"filePath":"185","messages":"186","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"110"},{"filePath":"187","messages":"188","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"189","usedDeprecatedRules":"110"},{"filePath":"190","messages":"191","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"192","messages":"193","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"110"},{"filePath":"194","messages":"195","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"196","usedDeprecatedRules":"110"},{"filePath":"197","messages":"198","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"110"},{"filePath":"199","messages":"200","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"110"},{"filePath":"201","messages":"202","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"110"},{"filePath":"203","messages":"204","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"110"},{"filePath":"205","messages":"206","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"110"},{"filePath":"207","messages":"208","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"110"},{"filePath":"209","messages":"210","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"110"},{"filePath":"211","messages":"212","errorCount":0,"warningCount":11,"fixableErrorCount":0,"fixableWarningCount":0,"source":"213","usedDeprecatedRules":"110"},{"filePath":"214","messages":"215","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"216","usedDeprecatedRules":"110"},{"filePath":"217","messages":"218","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"219","usedDeprecatedRules":"110"},{"filePath":"220","messages":"221","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"222","usedDeprecatedRules":"110"},{"filePath":"223","messages":"224","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"225","usedDeprecatedRules":"110"},{"filePath":"226","messages":"227","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"228","messages":"229","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"110"},{"filePath":"230","messages":"231","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"232","usedDeprecatedRules":"110"},{"filePath":"233","messages":"234","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"235","usedDeprecatedRules":"110"},{"filePath":"236","messages":"237","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"238","usedDeprecatedRules":"110"},{"filePath":"239","messages":"240","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"241","usedDeprecatedRules":"110"},"/home/muneeb/dev/diamond-tiles-frontend/src/index.js",[],["242","243","244","245","246"],"/home/muneeb/dev/diamond-tiles-frontend/src/App.js",[],"/home/muneeb/dev/diamond-tiles-frontend/src/store/index.js",[],"/home/muneeb/dev/diamond-tiles-frontend/src/store/reducers.js",[],"/home/muneeb/dev/diamond-tiles-frontend/src/jsx/index.js",["247","248","249","250"],"import React, { Suspense } from 'react';\nimport { Else, If, Then } from 'react-if';\nimport { connect } from 'react-redux';\n/// React router dom\nimport { BrowserRouter as Router, Redirect, Route, Switch } from 'react-router-dom';\nimport './chart.css';\nimport { userRoles } from './helpers/enums';\n/// Css\nimport './index.css';\nimport Layout from './layouts';\nimport Customers from './pages/customers';\nimport CustomerActions from './pages/customers/CustomerActions';\nimport Dashboard from './pages/dashboard';\nimport Employees from './pages/employees';\nimport EmployeeActions from './pages/employees/EmployeeActions';\nimport Error404 from './pages/Error404';\nimport Expenses from './pages/expenses';\nimport ExpensesActions from './pages/expenses/ExpenseActions';\nimport Inventory from './pages/inventory';\nimport Khaata from './pages/khaata';\nimport Login from './pages/Login';\nimport Products from './pages/products';\nimport ProductActions from './pages/products/ProductActions';\nimport Purchase from './pages/purchase';\nimport AddPurchase from './pages/purchase/AddPurchase';\n/// Pages\nimport Registration from './pages/Registration';\nimport Sales from './pages/sale';\nimport AddSale from './pages/sale/AddSale';\nimport Suppliers from './pages/suppliers';\nimport SupplierActions from './pages/suppliers/SupplierActions';\nimport TypeActions from './pages/types/TypeActions';\n\nconst protectedRoutes = [\n   { url: 'employees', component: Employees },\n   { url: 'dashboard', component: Dashboard },\n   { url: 'employees/:id', component: EmployeeActions },\n];\n\nconst routes = [\n   /// Deshborad\n   { url: '', component: () => <Redirect to=\"/page-login\" /> },\n   { url: 'page-register', component: Registration, isPublic: true },\n   { url: 'page-login', component: Login, isPublic: true },\n\n   { url: 'customers', component: Customers },\n   { url: 'customers/:id', component: CustomerActions },\n   { url: 'suppliers', component: Suppliers },\n   { url: 'suppliers/:id', component: SupplierActions },\n   { url: 'products', component: Products },\n   { url: 'products/:id', component: ProductActions },\n   { url: 'products/types/:id', component: TypeActions },\n   { url: 'purchase', component: Purchase },\n   { url: 'purchase/add', component: AddPurchase },\n   { url: 'sale', component: Sales },\n   { url: 'sale/add', component: AddSale },\n   { url: 'expenses', component: Expenses },\n   { url: 'expenses/:id', component: ExpensesActions },\n   { url: 'khaata', component: Khaata },\n   { url: 'inventory', component: Inventory },\n];\n\nconst Markup = (props) => (\n   <Suspense fallback={<p>Loading</p>}>\n      <Router>\n         <Switch>\n            <If condition={props.user?.role === userRoles.CASHIER}>\n               <Then>\n                  {routes.map((data, i) => {\n                     const getComponent = () => {};\n                     return (\n                        <Route key={i} exact path={`/${data.url}`}>\n                           <Layout isPublic={data.isPublic}>\n                              <data.component />\n                           </Layout>\n                        </Route>\n                     );\n                  })}\n               </Then>\n               <Else>\n                  {[...routes, ...protectedRoutes].map((data, i) => {\n                     const getComponent = () => {};\n                     return (\n                        <Route key={i} exact path={`/${data.url}`}>\n                           <Layout isPublic={data.isPublic}>\n                              <data.component />\n                           </Layout>\n                        </Route>\n                     );\n                  })}\n               </Else>\n            </If>\n\n            <Route component={Error404} />\n         </Switch>\n      </Router>\n   </Suspense>\n);\n\nconst mapStateToProps = ({ auth }) => ({\n   user: auth.user,\n});\n\nconst mapDispatchToProps = {};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Markup);\n","/home/muneeb/dev/diamond-tiles-frontend/src/store/auth/reducer.js",[],"/home/muneeb/dev/diamond-tiles-frontend/src/jsx/pages/Error404.js",[],"/home/muneeb/dev/diamond-tiles-frontend/src/jsx/pages/employees/EmployeeActions.js",["251","252","253","254","255","256","257","258"],"import useUrlState from '@ahooksjs/use-url-state';\nimport { useDebounce } from 'ahooks';\nimport { useFormik } from 'formik';\nimport Button from 'jsx/components/Button';\nimport Pagination from 'jsx/components/Pagination';\nimport SpinnerOverlay from 'jsx/components/SpinnerOverlay';\nimport { get, patch, post, useAlert, useMutation, useQuery } from 'jsx/helpers';\nimport PageTItle from 'jsx/layouts/PageTitle';\nimport React, { useEffect, useMemo, useState } from 'react';\nimport { ButtonGroup, Card, Table, OverlayTrigger, Popover } from 'react-bootstrap';\nimport { AiFillCaretLeft, AiFillSave, AiOutlineQuestionCircle } from 'react-icons/ai';\nimport { FaSort, FaSortDown, FaSortUp } from 'react-icons/fa';\nimport { Else, If, Then, When } from 'react-if';\nimport { useHistory, useParams } from 'react-router-dom';\nimport _ from 'lodash';\n\nconst EmployeeActions = () => {\n   const history = useHistory();\n   const params = useParams();\n   const [employee, setEmployee] = useState(null);\n   const [isError, setIsError] = useState(false);\n   const [page, setPage] = useState(1);\n   const [limit, setLimit] = useState(5);\n   const [sort, setSort] = useState({ field: null, order: 1 });\n   const [search, setSearch] = useState('');\n   const debouncedSearchValue = useDebounce(search, { wait: 500 });\n\n   const [urlState, setUrlState] = useUrlState({});\n\n   const alert = useAlert();\n   const isEditing = useMemo(() => urlState?.type === 'edit', [urlState.type]);\n   const isViewEmployee = useMemo(() => urlState?.type === 'view', [urlState.type]);\n   const isAddEmployee = useMemo(() => params?.id === 'add', [params.id]);\n\n   const query = useQuery(['employee', params.id], () => get(`/employees/id/${params.id}`), {\n      enabled: !isAddEmployee,\n      onError: (err) => {\n         setIsError(true);\n         alert.setErrorAlert({\n            message: 'Invalid URL!',\n            err: { message: ['The page will redirect to manage employees.'] },\n            callback: () => history.push('/employees'),\n            duration: 3000,\n         });\n      },\n   });\n   const patchMutation = useMutation((payload) => patch(`/employees/id/${params.id}`, payload), {\n      onError: (err) => {\n         alert.setErrorAlert({\n            message: 'Unable to edit employee.',\n            err,\n         });\n      },\n   });\n\n   const postMutation = useMutation((payload) => post('/employees', payload), {\n      onSuccess: () => {\n         history.push('/employees');\n      },\n      onError: (err) => {\n         alert.setErrorAlert({ message: 'Unable to add employee', err });\n      },\n   });\n\n   const mutation = useMemo(() => (isEditing ? patchMutation : postMutation), [isEditing, patchMutation, postMutation]);\n\n   if (!isEditing && !isViewEmployee && !isAddEmployee) {\n      history.push('/employees');\n   }\n\n   const formik = useFormik({\n      initialValues: {\n         name: isEditing ? employee?.name : '',\n         phone: isEditing ? employee?.phone : '',\n         cnic: isEditing ? employee?.cnic : '',\n         address: isEditing ? employee?.address : '',\n         salary: isEditing ? employee?.salary : '',\n      },\n      validateOnChange: false,\n      validateOnBlur: false,\n      onSubmit: (values) => {\n         mutation.mutate(values);\n      },\n   });\n   const handleSort = (key) => {\n      setSort((prev) => ({ field: key, order: prev.order * -1 }));\n   };\n   useEffect(() => {\n      if (isEditing && query.data) {\n         formik.setFieldValue('name', query.data?.employee?.name ?? '');\n         formik.setFieldValue('phone', query.data?.employee?.phone ?? '');\n         formik.setFieldValue('cnic', query.data?.employee?.cnic ?? '');\n         formik.setFieldValue('address', query.data?.employee?.address ?? '');\n         formik.setFieldValue('salary', query.data?.employee?.salary ?? '');\n      }\n   }, [isEditing, query.data]);\n   useEffect(() => {\n      if (page > query.data?.sales?.totalPages) {\n         setPage((prev) => prev - 1);\n      }\n   }, [page, query.data?.sales?.totalPages]);\n   return (\n      <>\n         <PageTItle activeMenu=\"employees\" motherMenu=\"Manage\" />\n         {alert.getAlert()}\n         <Card>\n            <When condition={patchMutation.isLoading || postMutation.isLoading || query.isLoading}>\n               <SpinnerOverlay />\n            </When>\n            <If condition={isAddEmployee || isEditing}>\n               <Then>\n                  <form onSubmit={formik.handleSubmit}>\n                     <Card.Header>\n                        <Card.Title>{isEditing ? 'Edit Employee' : 'Add New Employee'}</Card.Title>\n                     </Card.Header>\n                     <Card.Body>\n                        <div className=\"row\">\n                           <div className=\"form-group col-xl-6\">\n                              <label className=\"col-form-label\">Name</label>\n                              <input\n                                 className=\"form-control\"\n                                 onChange={formik.handleChange}\n                                 type=\"text\"\n                                 name=\"name\"\n                                 disabled={isError}\n                                 value={formik.values.name}\n                              />\n                           </div>\n                        </div>\n                        <div className=\"row\">\n                           <div className=\"form-group col-xl-6\">\n                              <label className=\"col-form-label\">Phone</label>\n                              <input\n                                 className=\"form-control\"\n                                 onChange={formik.handleChange}\n                                 type=\"text\"\n                                 name=\"phone\"\n                                 disabled={isError}\n                                 value={formik.values.phone}\n                              />\n                           </div>\n                        </div>\n                        <div className=\"row\">\n                           <div className=\"form-group col-xl-6\">\n                              <label className=\"col-form-label\">CNIC</label>\n                              <input\n                                 className=\"form-control\"\n                                 onChange={formik.handleChange}\n                                 type=\"text\"\n                                 name=\"cnic\"\n                                 disabled={isError}\n                                 value={formik.values.cnic}\n                              />\n                           </div>\n                        </div>\n                        <div className=\"row\">\n                           <div className=\"form-group col-xl-6\">\n                              <label className=\"col-form-label\">Address</label>\n                              <input\n                                 className=\"form-control\"\n                                 onChange={formik.handleChange}\n                                 type=\"text\"\n                                 name=\"address\"\n                                 disabled={isError}\n                                 value={formik.values.address}\n                              />\n                           </div>\n                        </div>\n                        <div className=\"row\">\n                           <div className=\"form-group col-xl-6\">\n                              <label className=\"col-form-label\">Salary</label>\n                              <input\n                                 className=\"form-control\"\n                                 onChange={formik.handleChange}\n                                 type=\"text\"\n                                 name=\"salary\"\n                                 disabled={isError}\n                                 value={formik.values.salary}\n                              />\n                           </div>\n                        </div>\n                     </Card.Body>\n                     <Card.Footer>\n                        <div className=\"row\">\n                           <div className=\"col-xl-12 tw-justify-center\">\n                              <ButtonGroup>\n                                 <Button\n                                    icon={AiFillCaretLeft}\n                                    variant=\"warning light\"\n                                    onClick={() => history.replace('/employees')}\n                                    loading={mutation.isLoading}\n                                 >\n                                    Back\n                                 </Button>\n                                 <Button\n                                    icon={AiFillSave}\n                                    variant=\"primary\"\n                                    type=\"submit\"\n                                    loading={mutation.isLoading}\n                                    disabled={isError}\n                                 >\n                                    Save\n                                 </Button>\n                              </ButtonGroup>\n                           </div>\n                        </div>\n                     </Card.Footer>\n                  </form>\n               </Then>\n               <Else>\n                  <Card.Header>\n                     <Card.Title>View Employee</Card.Title>\n                  </Card.Header>\n                  <Card.Body>\n                     <div className=\"row\">\n                        <div className=\"form-group col-xl-6\">\n                           <label className=\"col-form-label\">Name</label>\n                           <h4>{query.data?.employee?.name}</h4>\n                        </div>\n                     </div>\n                     <div className=\"row\">\n                        <div className=\"form-group col-xl-6\">\n                           <label className=\"col-form-label\">Phone</label>\n                           <h4>{query.data?.employee?.phone}</h4>\n                        </div>\n                     </div>\n                     <div className=\"row\">\n                        <div className=\"form-group col-xl-6\">\n                           <label className=\"col-form-label\">CNIC</label>\n                           <h4>{query.data?.employee?.cnic}</h4>\n                        </div>\n                     </div>\n                     <div className=\"row\">\n                        <div className=\"form-group col-xl-6\">\n                           <label className=\"col-form-label\">Address</label>\n                           <h4>{query.data?.employee?.address}</h4>\n                        </div>\n                     </div>\n                     <div className=\"row\">\n                        <div className=\"form-group col-xl-6\">\n                           <label className=\"col-form-label\">Salary</label>\n                           <h4>{query.data?.employee?.salary}</h4>\n                        </div>\n                     </div>\n                  </Card.Body>\n                  <Card.Footer>\n                     <div className=\"row\">\n                        <div className=\"col-xl-12 tw-justify-center\">\n                           <Button\n                              icon={AiFillCaretLeft}\n                              variant=\"warning light\"\n                              onClick={() => history.replace('/employees')}\n                              loading={mutation.isLoading}\n                           >\n                              Back\n                           </Button>\n                        </div>\n                     </div>\n                  </Card.Footer>\n               </Else>\n            </If>\n         </Card>\n         <When condition={isViewEmployee}>\n            <Card>\n               <When condition={query.isLoading}>\n                  <SpinnerOverlay />\n               </When>\n               <Card.Header>\n                  <Card.Title>View Related Salaries</Card.Title>\n               </Card.Header>\n               <Card.Body>\n                  <If condition={query.data?.salaries?.totalDocs > 0}>\n                     <Then>\n                        <Table className=\"tw-relative\" responsive>\n                           <thead>\n                              <tr>\n                                 <th className=\"width80\">\n                                    <strong>#</strong>\n                                 </th>\n                                 {/* <th>\n                                 <strong className=\"tw-cursor-pointer\" onClick={() => handleSort('employee')}>\n                                    EMPLOYEE\n                                    <span>\n                                       <When condition={sort.field !== 'employee'}>\n                                          <FaSort className=\"d-inline mx-1\" />\n                                       </When>\n                                       <When condition={sort.field === 'employee' && sort.order === -1}>\n                                          <FaSortDown className=\"d-inline mx-1\" />\n                                       </When>\n                                       <When condition={sort.field === 'employee' && sort.order === 1}>\n                                          <FaSortUp className=\"d-inline mx-1\" />\n                                       </When>\n                                    </span>\n                                 </strong>\n                              </th> */}\n                                 <th>\n                                    <strong className=\"tw-cursor-pointer\" onClick={() => handleSort('salary')}>\n                                       SALARY\n                                       <span>\n                                          <When condition={sort.field !== 'salary'}>\n                                             <FaSort className=\"d-inline mx-1\" />\n                                          </When>\n                                          <When condition={sort.field === 'salary' && sort.order === -1}>\n                                             <FaSortDown className=\"d-inline mx-1\" />\n                                          </When>\n                                          <When condition={sort.field === 'salary' && sort.order === 1}>\n                                             <FaSortUp className=\"d-inline mx-1\" />\n                                          </When>\n                                       </span>\n                                    </strong>\n                                 </th>\n                              </tr>\n                           </thead>\n                           <tbody>\n                              {query.data?.salaries?.docs?.map((e, index) => (\n                                 <tr key={`${e._id}`}>\n                                    <td>\n                                       <strong>{index + 1}</strong>\n                                    </td>\n                                    {/* <td>{e?.employee?.name ?? 'N/A'}</td> */}\n                                    <td>{e?.employee?.salary ?? 'N/A'}</td>\n                                 </tr>\n                              ))}\n                           </tbody>\n                        </Table>\n                     </Then>\n                     <Else>\n                        <When condition={!query.isLoading}>\n                           <p className=\"tw-m-0\">No Salaries created</p>\n                        </When>\n                     </Else>\n                  </If>\n               </Card.Body>\n            </Card>\n         </When>\n         <When condition={limit > 5 ? true : query.data?.salaries?.totalPages > 1}>\n            <Pagination\n               page={page}\n               onPageChange={setPage}\n               onLimitChange={setLimit}\n               {..._.omit(query.data?.salaries, ['docs'])}\n               isLimitDisabled={query.isLoading}\n            />\n         </When>\n      </>\n   );\n};\n\nexport default EmployeeActions;\n","/home/muneeb/dev/diamond-tiles-frontend/src/jsx/pages/Registration.js",["259"],"import { post } from 'jsx/helpers';\r\nimport React, { useState } from 'react';\r\nimport { Link, useHistory } from 'react-router-dom';\r\nimport { When } from 'react-if';\r\nimport SpinnerOverlay from 'jsx/components/SpinnerOverlay';\r\n\r\nconst Register = () => {\r\n   const history = useHistory();\r\n\r\n   const [registrationData, setRegistrationData] = useState({});\r\n   const [isLoading, setIsLoading] = useState(false);\r\n   const handleBlur = (e) => {\r\n      const newRegistrationData = { ...registrationData };\r\n      newRegistrationData[e.target.name] = e.target.value;\r\n      setRegistrationData(newRegistrationData);\r\n   };\r\n   const handleRegister = async (e) => {\r\n      e.preventDefault();\r\n      setIsLoading(true);\r\n      try {\r\n         const res = await post('/auth/register', registrationData);\r\n         setIsLoading(false);\r\n         // localStorage.setItem('auth_token', res.token);\r\n         history.push('/page-login');\r\n      } catch (err) {\r\n         setIsLoading(false);\r\n         alert(err.response?.data?.data ?? err.message);\r\n      }\r\n   };\r\n   return (\r\n      <>\r\n         <When condition={isLoading}>\r\n            <SpinnerOverlay />\r\n         </When>\r\n         <div className=\"authincation\">\r\n            <div className=\"container p-0\">\r\n               <div className=\"row justify-content-center align-items-center tw-h-screen\">\r\n                  <div className=\"col-lg-6 col-md-9\">\r\n                     <div className=\"authincation-content\">\r\n                        <div className=\"row no-gutters\">\r\n                           <div className=\"col-xl-12\">\r\n                              <div className=\"auth-form\">\r\n                                 <h4 className=\"text-center mb-4\">Sign up your account</h4>\r\n                                 <form action=\"\" onSubmit={handleRegister}>\r\n                                    <div className=\"form-group\">\r\n                                       <label className=\"mb-1\" htmlFor=\"registration-username\">\r\n                                          <strong>Username</strong>\r\n                                       </label>\r\n                                       <input\r\n                                          id=\"registration-username\"\r\n                                          type=\"text\"\r\n                                          className=\"form-control\"\r\n                                          name=\"name\"\r\n                                          onChange={handleBlur}\r\n                                       />\r\n                                    </div>\r\n                                    {/* <div className=\"form-group\">\r\n                                    <label className=\"mb-1\" htmlFor=\"registration-email\">\r\n                                       <strong>Email</strong>\r\n                                    </label>\r\n                                    <input\r\n                                       id=\"registration-email\"\r\n                                       type=\"email\"\r\n                                       className=\"form-control\"\r\n                                       placeholder=\"hello@example.com\"\r\n                                       name=\"Email\"\r\n                                       onChange={handleBlur}\r\n                                    />\r\n                                 </div> */}\r\n                                    <div className=\"form-group\">\r\n                                       <label className=\"mb-1\" htmlFor=\"registration-password\">\r\n                                          <strong>Password</strong>\r\n                                       </label>\r\n                                       <input\r\n                                          id=\"registration-password\"\r\n                                          type=\"password\"\r\n                                          className=\"form-control\"\r\n                                          name=\"password\"\r\n                                          onChange={handleBlur}\r\n                                       />\r\n                                    </div>\r\n                                    <div className=\"form-group\">\r\n                                       <label className=\"mb-1\" htmlFor=\"registration-password\">\r\n                                          <strong>Password</strong>\r\n                                       </label>\r\n                                       <input\r\n                                          id=\"registration-password\"\r\n                                          type=\"password\"\r\n                                          className=\"form-control\"\r\n                                          name=\"passwordConfirm\"\r\n                                          onChange={handleBlur}\r\n                                       />\r\n                                    </div>\r\n                                    <div className=\"text-center mt-4\">\r\n                                       <button type=\"submit\" className=\"btn btn-primary btn-block\">\r\n                                          Sign me up\r\n                                       </button>\r\n                                    </div>\r\n                                 </form>\r\n                                 <div className=\"new-account mt-3\">\r\n                                    <p>\r\n                                       Already have an account?{' '}\r\n                                       <Link className=\"text-primary\" to=\"/page-login\">\r\n                                          Sign in\r\n                                       </Link>\r\n                                    </p>\r\n                                 </div>\r\n                              </div>\r\n                           </div>\r\n                        </div>\r\n                     </div>\r\n                  </div>\r\n               </div>\r\n            </div>\r\n         </div>\r\n      </>\r\n   );\r\n};\r\n\r\nexport default Register;\r\n","/home/muneeb/dev/diamond-tiles-frontend/src/jsx/pages/expenses/ExpenseActions.js",["260","261","262","263","264"],"import useUrlState from '@ahooksjs/use-url-state';\nimport { useDebounce } from 'ahooks';\nimport dayjs from 'dayjs';\nimport relativeTime from 'dayjs/plugin/relativeTime';\nimport { useFormik } from 'formik';\nimport Button from 'jsx/components/Button';\nimport SpinnerOverlay from 'jsx/components/SpinnerOverlay';\nimport { get, post, useAlert, useMutation, useQuery } from 'jsx/helpers';\nimport PageTItle from 'jsx/layouts/PageTitle';\nimport React, { useMemo, useState } from 'react';\nimport { ButtonGroup, Card } from 'react-bootstrap';\nimport { AiFillCaretLeft, AiFillSave } from 'react-icons/ai';\nimport { Else, If, Then, When } from 'react-if';\nimport { useQueryClient } from 'react-query';\nimport { useHistory, useParams } from 'react-router-dom';\nimport CreatableSelect from '../../components/CreatableSelect';\n\nconst ExpenseActions = () => {\n   dayjs.extend(relativeTime);\n\n   const history = useHistory();\n   const params = useParams();\n   const [isError, setIsError] = useState(false);\n   const [page, setPage] = useState(1);\n   const [limit, setLimit] = useState(5);\n   const [sort, setSort] = useState({ field: null, order: -1 });\n   const [search, setSearch] = useState('');\n   const debouncedSearchValue = useDebounce(search, { wait: 500 });\n\n   const [urlState, setUrlState] = useUrlState({});\n\n   const alert = useAlert();\n   const getTypes = useQuery('expenses/types', () => get('/expenses/types', 1, 999));\n   const queryClient = useQueryClient();\n\n   const isView = useMemo(() => urlState?.type === 'view', [urlState.type]);\n   const isAdd = useMemo(() => params?.id === 'add', [params.id]);\n\n   const query = useQuery(\n      ['expenses', params.id, page, limit, sort.field, sort.order, debouncedSearchValue],\n      () => get(`/expenses/id/${params.id}`, page, limit, sort.field, sort.order, debouncedSearchValue),\n      {\n         enabled: !isAdd,\n         onError: (err) => {\n            setIsError(true);\n            alert.setErrorAlert({\n               message: 'Invalid URL!',\n               err: { message: ['The page will redirect to manage expenses.'] },\n               callback: () => history.push('/expenses'),\n               duration: 3000,\n            });\n         },\n      }\n   );\n\n   const postMutation = useMutation((payload) => post('/expenses', payload), {\n      onSuccess: () => {\n         history.push('/expenses');\n      },\n      onError: (err) => {\n         alert.setErrorAlert({ message: 'Unable to add product', err });\n      },\n   });\n   const postTypeMutation = useMutation((payload) => post('/expenses/types', payload), {\n      onSuccess: async () => {\n         await queryClient.invalidateQueries('expenses/types');\n      },\n   });\n\n   const mutation = useMemo(() => postMutation, [postMutation]);\n\n   if (!isView && !isAdd) {\n      history.push('/expenses');\n   }\n\n   const formik = useFormik({\n      initialValues: {\n         title: '',\n         amount: '',\n         type: '',\n         comments: '',\n      },\n      validateOnChange: false,\n      validateOnBlur: false,\n      onSubmit: (values) => {\n         mutation.mutate(values);\n      },\n   });\n\n   const handleCreateType = async (title) => {\n      postTypeMutation.mutate({ title });\n      // history.push({ pathname: '/types', search: `?action=add&title=${title}&redirect=/products/add` });\n   };\n   return (\n      <>\n         <div className=\"row p-0 m-0\">\n            <div className=\"col-10\">\n               <PageTItle activeMenu=\"View\" motherMenu=\"Products\" />\n            </div>\n            <div className=\"col-1\">\n               <Button\n                  icon={AiFillCaretLeft}\n                  variant=\"warning light\"\n                  onClick={() => history.goBack()}\n                  loading={mutation.isLoading}\n               >\n                  Back\n               </Button>\n            </div>\n         </div>\n         {alert.getAlert()}\n         <Card>\n            <When condition={getTypes.isLoading || postTypeMutation.isLoading || query.isLoading}>\n               <SpinnerOverlay />\n            </When>\n            <If condition={isAdd}>\n               <Then>\n                  <form onSubmit={formik.handleSubmit}>\n                     <Card.Header>\n                        <Card.Title>Add New Expense</Card.Title>\n                     </Card.Header>\n                     <Card.Body>\n                        <div className=\"row\">\n                           <div className=\"form-group col-xl-6\">\n                              <label className=\"col-form-label\">Title</label>\n                              <input\n                                 className=\"form-control\"\n                                 onChange={formik.handleChange}\n                                 type=\"text\"\n                                 name=\"title\"\n                                 disabled={isError}\n                                 value={formik.values.title}\n                              />\n                           </div>\n                        </div>\n                        <div className=\"row\">\n                           <div className=\"form-group col-xl-6\">\n                              <label className=\"col-form-label\">Amount</label>\n                              <input\n                                 className=\"form-control\"\n                                 onChange={formik.handleChange}\n                                 type=\"text\"\n                                 name=\"amount\"\n                                 disabled={isError}\n                                 value={formik.values.amount}\n                              />\n                           </div>\n                        </div>\n                        <div className=\"row\">\n                           <div className=\"form-group col-xl-6\">\n                              <label className=\"col-form-label\">Comments</label>\n                              <input\n                                 className=\"form-control\"\n                                 onChange={formik.handleChange}\n                                 type=\"text\"\n                                 name=\"comments\"\n                                 disabled={isError}\n                                 value={formik.values.comments}\n                              />\n                           </div>\n                        </div>\n                        <div className=\"row\">\n                           <div className=\"form-group col-xl-6\">\n                              <label className=\"col-form-label\">Type</label>\n                              {isAdd && (\n                                 <CreatableSelect\n                                    isClearable\n                                    onChange={(e) => formik.setFieldValue('type', e?._id)}\n                                    options={\n                                       getTypes.data?.length > 0 &&\n                                       getTypes.data.map((e) => ({ ...e, label: e.title, value: e.title }))\n                                    }\n                                    onCreateOption={handleCreateType}\n                                 />\n                              )}\n                           </div>\n                        </div>\n                     </Card.Body>\n                     <Card.Footer>\n                        <div className=\"row\">\n                           <div className=\"col-xl-12 tw-justify-center\">\n                              <ButtonGroup>\n                                 {/* <Button\n                                    icon={AiFillCaretLeft}\n                                    variant=\"warning light\"\n                                    onClick={() => history.replace('/products')}\n                                    loading={mutation.isLoading}\n                                 >\n                                    Back\n                                 </Button> */}\n                                 <Button\n                                    icon={AiFillSave}\n                                    variant=\"primary\"\n                                    type=\"submit\"\n                                    loading={mutation.isLoading}\n                                    disabled={isError}\n                                 >\n                                    Save\n                                 </Button>\n                              </ButtonGroup>\n                           </div>\n                        </div>\n                     </Card.Footer>\n                  </form>\n               </Then>\n               <Else>\n                  <Card.Header>\n                     <Card.Title>View product</Card.Title>\n                  </Card.Header>\n                  <Card.Body>\n                     <div className=\"row\">\n                        <div className=\"form-group col-xl-6\">\n                           <label className=\"col-form-label\">Title</label>\n                           <h4>{query.data?.title ?? 'N/A'}</h4>\n                        </div>\n                     </div>\n                     <div className=\"row\">\n                        <div className=\"form-group col-xl-6\">\n                           <label className=\"col-form-label\">Amount</label>\n                           <h4>{query.data?.amount ?? 'N/A'}</h4>\n                        </div>\n                     </div>\n                     <div className=\"row\">\n                        <div className=\"form-group col-xl-6\">\n                           <label className=\"col-form-label\">Type</label>\n                           <h4>{query.data?.type?.title ?? 'N/A'}</h4>\n                        </div>\n                     </div>\n                     <div className=\"row\">\n                        <div className=\"form-group col-xl-6\">\n                           <label className=\"col-form-label\">Comments</label>\n                           <h4>{query.data?.comments ?? 'N/A'}</h4>\n                        </div>\n                     </div>\n                  </Card.Body>\n               </Else>\n            </If>\n         </Card>\n      </>\n   );\n};\n\nexport default ExpenseActions;\n","/home/muneeb/dev/diamond-tiles-frontend/src/jsx/pages/purchase/AddPurchase.js",["265","266"],"/home/muneeb/dev/diamond-tiles-frontend/src/jsx/pages/sale/AddSale.js",["267","268"],"/home/muneeb/dev/diamond-tiles-frontend/src/jsx/pages/types/TypeActions.js",["269","270","271","272","273","274","275","276"],"import { useDebounce } from 'ahooks';\nimport Button from 'jsx/components/Button';\nimport SpinnerOverlay from 'jsx/components/SpinnerOverlay';\nimport { get, useAlert, useQuery } from 'jsx/helpers';\nimport PageTItle from 'jsx/layouts/PageTitle';\nimport React, { useState, useEffect } from 'react';\nimport { Card, ButtonGroup, Table, OverlayTrigger, Popover } from 'react-bootstrap';\nimport { When, If, Else, Then } from 'react-if';\nimport { useHistory, useParams } from 'react-router-dom';\nimport dayjs from 'dayjs';\nimport relativeTime from 'dayjs/plugin/relativeTime';\n\nimport {\n   AiFillDelete,\n   AiFillEdit,\n   AiFillEye,\n   AiFillPlusCircle,\n   AiOutlineQuestionCircle,\n   AiFillCaretLeft,\n} from 'react-icons/ai';\nimport { FaSort, FaSortDown, FaSortUp } from 'react-icons/fa';\n\nconst TypeActions = () => {\n   dayjs.extend(relativeTime);\n\n   const history = useHistory();\n   const params = useParams();\n   const [page, setPage] = useState(1);\n   const [limit, setLimit] = useState(5);\n   const [sort, setSort] = useState({ field: null, order: -1 });\n   const [search, setSearch] = useState('');\n   const debouncedSearchValue = useDebounce(search, { wait: 500 });\n   const alert = useAlert();\n\n   const query = useQuery(\n      ['type', params.id, page, limit, sort.field, sort.order, debouncedSearchValue],\n      () => get(`/types/id/${params.id}`, page, limit, sort.field, sort.order, debouncedSearchValue),\n      {\n         onError: (err) => {\n            alert.setErrorAlert({\n               message: 'Invalid URL!',\n               err: { message: ['The page will redirect to manage products.'] },\n               callback: () => history.push('/products'),\n               duration: 3000,\n            });\n         },\n      }\n   );\n\n   const handleOnClickEdit = (obj) => {\n      history.push({ pathname: `/products/${obj._id}`, search: `?type=edit` });\n   };\n\n   const handleOnClickView = (obj) => {\n      history.push({ pathname: `/products/${obj._id}`, search: `?type=view` });\n   };\n   const handleOnClickAdd = () => {\n      history.push('/products/add');\n   };\n\n   const handleSort = (key) => {\n      setSort((prev) => ({ field: key, order: prev.order * -1 }));\n   };\n\n   useEffect(() => {\n      if (page > query.data?.totalPages) {\n         setPage((prev) => prev - 1);\n      }\n   }, [page, query.data?.totalPages]);\n   return (\n      <>\n         <div className=\"row p-0 m-0\">\n            <div className=\"col-10\">\n               <PageTItle activeMenu=\"Type\" motherMenu=\"Products\" />\n            </div>\n            <div className=\"col-1\">\n               <Button\n                  icon={AiFillCaretLeft}\n                  variant=\"warning light\"\n                  onClick={() => history.goBack()}\n                  loading={query.isLoading}\n               >\n                  Back\n               </Button>\n            </div>\n         </div>\n         {alert.getAlert()}\n         <div className=\"row mb-3\">\n            <div className=\"col-xl-5 my-2\">\n               <Card className=\"h-100\">\n                  <When condition={query.isLoading}>\n                     <SpinnerOverlay />\n                  </When>\n\n                  <Card.Header>\n                     <Card.Title>View Type</Card.Title>\n                  </Card.Header>\n                  <Card.Body>\n                     <div className=\"row\">\n                        <div className=\"form-group col-xl-6\">\n                           <label className=\"col-form-label\">Title</label>\n                           <h4>{query.data?.type?.title ?? 'N/A'}</h4>\n                        </div>\n                     </div>\n                  </Card.Body>\n               </Card>\n            </div>\n            <div className=\"col-xl-7 my-2\">\n               <Card className=\"h-100\">\n                  <When condition={query.isLoading}>\n                     <SpinnerOverlay />\n                  </When>\n\n                  <Card.Header>\n                     <Card.Title>View Units</Card.Title>\n                  </Card.Header>\n                  <Card.Body>\n                     <Table className=\"tw-relative\" responsive>\n                        <thead>\n                           <tr>\n                              <th className=\"width80\">\n                                 <strong>#</strong>\n                              </th>\n                              <th>\n                                 <strong className=\"tw-cursor-pointer\">TITLE</strong>\n                              </th>\n                              <th>\n                                 <strong className=\"tw-cursor-pointer\">VALUE</strong>\n                              </th>\n                           </tr>\n                        </thead>\n                        <tbody>\n                           {query.data?.units?.map((e, index) => (\n                              <tr key={`${e._id}`}>\n                                 <td>\n                                    <strong>{index + 1}</strong>\n                                 </td>\n                                 <td>{e.title}</td>\n                                 <td>{e.value}</td>\n                                 <td>\n                                    <OverlayTrigger\n                                       trigger={['hover', 'hover']}\n                                       placement=\"top\"\n                                       overlay={\n                                          <Popover className=\"tw-border-gray-500\">\n                                             <Popover.Content>{`Created by ${e.createdBy ?? 'N/A'} ${\n                                                dayjs(e.createdAt).diff(dayjs(), 'day', true) > 7\n                                                   ? `at ${dayjs(e.createdAt).format('DD-MMM-YYYY')}`\n                                                   : dayjs(e.createdAt).fromNow()\n                                             }.`}</Popover.Content>\n                                          </Popover>\n                                       }\n                                    >\n                                       <AiOutlineQuestionCircle className=\"tw-cursor-pointer\" />\n                                    </OverlayTrigger>\n                                 </td>\n                              </tr>\n                           ))}\n                        </tbody>\n                     </Table>\n                  </Card.Body>\n               </Card>\n            </div>\n         </div>\n\n         {/* VIEW PRODUCTS */}\n         <Card>\n            <When condition={query.isLoading}>\n               <SpinnerOverlay />\n            </When>\n            <Card.Header>\n               <Card.Title>View Products</Card.Title>\n               <ButtonGroup className=\"tw-float-right\">\n                  <input\n                     type=\"text\"\n                     className=\"input-rounded tw-pl-6 tw-shadow-inner tw-ring-1 py-1\"\n                     placeholder=\"Search products...\"\n                     onChange={(e) => setSearch(e.target.value)}\n                  />\n               </ButtonGroup>\n            </Card.Header>\n            <Card.Body>\n               <If condition={query.data?.products?.totalDocs > 0}>\n                  <Then>\n                     <Table className=\"tw-relative\" responsive>\n                        <thead>\n                           <tr>\n                              <th className=\"width80\">\n                                 <strong>#</strong>\n                              </th>\n                              <th>\n                                 <strong className=\"tw-cursor-pointer\" onClick={() => handleSort('title')}>\n                                    TITLE\n                                    <span>\n                                       <When condition={sort.field !== 'title'}>\n                                          <FaSort className=\"d-inline mx-1\" />\n                                       </When>\n                                       <When condition={sort.field === 'title' && sort.order === -1}>\n                                          <FaSortDown className=\"d-inline mx-1\" />\n                                       </When>\n                                       <When condition={sort.field === 'title' && sort.order === 1}>\n                                          <FaSortUp className=\"d-inline mx-1\" />\n                                       </When>\n                                    </span>\n                                 </strong>\n                              </th>\n                              <th>\n                                 <strong className=\"tw-cursor-pointer\" onClick={() => handleSort('modelNumber')}>\n                                    MODEL#\n                                    <span>\n                                       <When condition={sort.field !== 'modelNumber'}>\n                                          <FaSort className=\"d-inline mx-1\" />\n                                       </When>\n                                       <When condition={sort.field === 'modelNumber' && sort.order === -1}>\n                                          <FaSortDown className=\"d-inline mx-1\" />\n                                       </When>\n                                       <When condition={sort.field === 'modelNumber' && sort.order === 1}>\n                                          <FaSortUp className=\"d-inline mx-1\" />\n                                       </When>\n                                    </span>\n                                 </strong>\n                              </th>\n                              <th>\n                                 <strong className=\"tw-cursor-pointer\" onClick={() => handleSort('type')}>\n                                    TYPE\n                                    <span>\n                                       <When condition={sort.field !== 'type'}>\n                                          <FaSort className=\"d-inline mx-1\" />\n                                       </When>\n                                       <When condition={sort.field === 'type' && sort.order === -1}>\n                                          <FaSortDown className=\"d-inline mx-1\" />\n                                       </When>\n                                       <When condition={sort.field === 'type' && sort.order === 1}>\n                                          <FaSortUp className=\"d-inline mx-1\" />\n                                       </When>\n                                    </span>\n                                 </strong>\n                              </th>\n                           </tr>\n                        </thead>\n                        <tbody>\n                           {query.data?.products?.docs.map((e, index) => (\n                              <tr key={`${e._id}`}>\n                                 <td>\n                                    <strong>{query.data?.products?.pagingCounter * (index + 1)}</strong>\n                                 </td>\n                                 <td>{e.title}</td>\n                                 <td>{e.modelNumber}</td>\n                                 <td>{(e.type && e.type?.title) ?? 'N/A'}</td>\n                                 <td>\n                                    <OverlayTrigger\n                                       trigger={['hover', 'hover']}\n                                       placement=\"top\"\n                                       overlay={\n                                          <Popover className=\"tw-border-gray-500\">\n                                             <Popover.Content>{`Created by ${e.createdBy ?? 'N/A'} ${\n                                                dayjs(e.createdAt).diff(dayjs(), 'day', true) > 7\n                                                   ? `at ${dayjs(e.createdAt).format('DD-MMM-YYYY')}`\n                                                   : dayjs(e.createdAt).fromNow()\n                                             }.`}</Popover.Content>\n                                          </Popover>\n                                       }\n                                    >\n                                       <AiOutlineQuestionCircle className=\"tw-cursor-pointer\" />\n                                    </OverlayTrigger>\n                                 </td>\n                              </tr>\n                           ))}\n                        </tbody>\n                     </Table>\n                  </Then>\n                  <Else>\n                     <When condition={!query.isLoading && !debouncedSearchValue}>\n                        <p className=\"tw-m-0\">No products created</p>\n                     </When>\n                     <When condition={!query.isLoading && debouncedSearchValue}>\n                        <p className=\"tw-m-0\">No result found!</p>\n                     </When>\n                  </Else>\n               </If>\n            </Card.Body>\n         </Card>\n      </>\n   );\n};\n\nexport default TypeActions;\n","/home/muneeb/dev/diamond-tiles-frontend/src/jsx/helpers/enums.js",[],"/home/muneeb/dev/diamond-tiles-frontend/src/jsx/pages/Login.js",["277","278","279"],"import { api, get, post, useAlert } from 'jsx/helpers';\r\nimport React, { useState, useEffect } from 'react';\r\nimport { Link, useHistory } from 'react-router-dom';\r\nimport { When } from 'react-if';\r\nimport SpinnerOverlay from 'jsx/components/SpinnerOverlay';\r\nimport { connect } from 'react-redux';\r\nimport { userRoles } from 'jsx/helpers/enums';\r\nimport { setLogin } from '../../store/auth/actions';\r\n\r\nconst Login = (props) => {\r\n   const history = useHistory();\r\n   const [loginData, setLoginData] = useState({});\r\n   const [isLoading, setIsLoading] = useState(false);\r\n\r\n   const alert = useAlert();\r\n\r\n   const handleBlur = (e) => {\r\n      const newLoginData = { ...loginData };\r\n      newLoginData[e.target.name] = e.target.value;\r\n      setLoginData(newLoginData);\r\n   };\r\n\r\n   useEffect(() => {\r\n      setIsLoading(true);\r\n      const token = localStorage.getItem('auth_token');\r\n      if (token) {\r\n         get(`auth/decode/${token}`)\r\n            .then((decode) => {\r\n               props.setLogin({ ...decode, auth_token: token });\r\n               localStorage.setItem('auth_token', token);\r\n               setIsLoading(false);\r\n               if (decode?.isConfirmed) {\r\n                  if (decode?.role === userRoles.CASHIER) {\r\n                     history.push('/purchase');\r\n                  } else if (decode?.role === userRoles.ADMINISTRATOR) {\r\n                     history.push('/dashboard');\r\n                  } else {\r\n                     alert.setErrorAlert({ message: 'Unable to login', err: 'Account not confirmed!' });\r\n                  }\r\n               } else {\r\n                  localStorage.clear();\r\n                  props.setLogin({});\r\n                  alert.setErrorAlert({ message: 'Unable to login', err: 'Account not confirmed!' });\r\n               }\r\n            })\r\n            .catch((err) => setIsLoading(false));\r\n      } else setIsLoading(false);\r\n   }, []);\r\n\r\n   const handleLogin = async (e) => {\r\n      e.preventDefault();\r\n      setIsLoading(true);\r\n      try {\r\n         const res = await api.post('/auth/login', loginData);\r\n         setIsLoading(false);\r\n         const decode = await get(`auth/decode/${res.data}`);\r\n         props.setLogin({ ...decode, auth_token: res.data });\r\n         localStorage.setItem('auth_token', res.data);\r\n         if (decode?.isConfirmed) {\r\n            if (decode?.role === userRoles.CASHIER) {\r\n               history.push('/purchase');\r\n            } else if (decode?.role === userRoles.ADMINISTRATOR) {\r\n               history.push('/dashboard');\r\n            } else {\r\n               alert.setErrorAlert({ message: 'Unable to login', err: 'Account not confirmed!' });\r\n            }\r\n         } else {\r\n            localStorage.clear();\r\n            props.setLogin({});\r\n            alert.setErrorAlert({ message: 'Unable to login', err: 'Account not confirmed!' });\r\n         }\r\n      } catch (err) {\r\n         setIsLoading(false);\r\n         alert.setErrorAlert({ message: 'Unable to login', err });\r\n      }\r\n   };\r\n\r\n   return (\r\n      <>\r\n         <When condition={isLoading}>\r\n            <SpinnerOverlay />\r\n         </When>\r\n         <div className=\"authincation\">\r\n            <div className=\"container p-0\">\r\n               <div className=\"row justify-content-center align-items-center tw-h-screen\">\r\n                  <div className=\"col-lg-6 col-md-9\">\r\n                     <div className=\"authincation-content\">\r\n                        <div className=\"row no-gutters\">\r\n                           <div className=\"col-xl-12\">\r\n                              <div className=\"auth-form\">\r\n                                 {alert.getAlert()}\r\n                                 <h4 className=\"text-center mb-4\">Sign in your account</h4>\r\n                                 <form action=\"\" onSubmit={handleLogin}>\r\n                                    <div className=\"form-group\">\r\n                                       <label className=\"mb-1\" htmlFor=\"login-email\">\r\n                                          <strong>Email</strong>\r\n                                       </label>\r\n                                       <input\r\n                                          id=\"login-email\"\r\n                                          type=\"text\"\r\n                                          className=\"form-control\"\r\n                                          name=\"name\"\r\n                                          onChange={handleBlur}\r\n                                       />\r\n                                    </div>\r\n                                    <div className=\"form-group\">\r\n                                       <label className=\"mb-1\" htmlFor=\"login-password\">\r\n                                          <strong>Password</strong>\r\n                                       </label>\r\n                                       <input\r\n                                          id=\"login-password\"\r\n                                          type=\"password\"\r\n                                          className=\"form-control\"\r\n                                          name=\"password\"\r\n                                          onChange={handleBlur}\r\n                                       />\r\n                                    </div>\r\n                                    <div className=\"form-row d-flex justify-content-between mt-4 mb-2\">\r\n                                       <div className=\"form-group\">\r\n                                          <Link to=\"/page-forgot-password\">Forgot Password?</Link>\r\n                                       </div>\r\n                                    </div>\r\n                                    <div className=\"text-center\">\r\n                                       <button type=\"submit\" className=\"btn btn-primary btn-block\">\r\n                                          Sign Me In\r\n                                       </button>\r\n                                    </div>\r\n                                 </form>\r\n                                 <div className=\"new-account mt-3\">\r\n                                    <p>\r\n                                       Don't have an account?{' '}\r\n                                       <Link className=\"text-primary\" to=\"/page-register\">\r\n                                          Sign up\r\n                                       </Link>\r\n                                    </p>\r\n                                 </div>\r\n                              </div>\r\n                           </div>\r\n                        </div>\r\n                     </div>\r\n                  </div>\r\n               </div>\r\n            </div>\r\n         </div>\r\n      </>\r\n   );\r\n};\r\n\r\nconst mapStateToProps = ({ auth }) => ({});\r\n\r\nconst mapDispatchToProps = (dispatch) => ({\r\n   setLogin: (payload) => dispatch(setLogin(payload)),\r\n});\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(Login);\r\n","/home/muneeb/dev/diamond-tiles-frontend/src/jsx/pages/customers/CustomerActions.js",["280","281","282","283","284"],"import useUrlState from '@ahooksjs/use-url-state';\nimport { useFormik } from 'formik';\nimport Button from 'jsx/components/Button';\nimport SpinnerOverlay from 'jsx/components/SpinnerOverlay';\nimport { get, patch, post, useAlert, useMutation, useQuery } from 'jsx/helpers';\nimport PageTItle from 'jsx/layouts/PageTitle';\nimport React, { useEffect, useMemo, useState } from 'react';\nimport { ButtonGroup, Card, OverlayTrigger, Popover, Table } from 'react-bootstrap';\nimport { AiFillCaretLeft, AiFillSave, AiOutlineQuestionCircle } from 'react-icons/ai';\nimport { FaSort, FaSortDown, FaSortUp } from 'react-icons/fa';\nimport { Else, If, Then, When } from 'react-if';\nimport { useHistory, useParams } from 'react-router-dom';\nimport dayjs from 'dayjs';\nimport relativeTime from 'dayjs/plugin/relativeTime';\nimport { useDebounce } from 'ahooks';\nimport Pagination from 'jsx/components/Pagination';\nimport _ from 'lodash';\nimport { connect } from 'react-redux';\nimport { userRoles } from 'jsx/helpers/enums';\n\nconst CustomerActions = (props) => {\n   dayjs.extend(relativeTime);\n\n   const history = useHistory();\n   const params = useParams();\n   const [customer, setCustomer] = useState(null);\n   const [isError, setIsError] = useState(false);\n\n   const [urlState, setUrlState] = useUrlState({});\n   const [page, setPage] = useState(1);\n   const [limit, setLimit] = useState(5);\n   const [sort, setSort] = useState({ field: null, order: 1 });\n   const [search, setSearch] = useState('');\n   const debouncedSearchValue = useDebounce(search, { wait: 500 });\n\n   const alert = useAlert();\n   const isEditing = useMemo(\n      () => props.user?.role !== userRoles.CASHIER && urlState?.type === 'edit',\n      [urlState.type]\n   );\n   const isViewCustomer = useMemo(() => urlState?.type === 'view', [urlState.type]);\n   const isAddCustomer = useMemo(() => params?.id === 'add', [params.id]);\n\n   const query = useQuery(\n      ['customer', params.id, page, limit, sort.field, sort.order, debouncedSearchValue],\n      () => get(`/customers/id/${params.id}`, page, limit, sort.field, sort.order, debouncedSearchValue),\n      {\n         enabled: !isAddCustomer,\n         onError: (err) => {\n            setIsError(true);\n            alert.setErrorAlert({\n               message: 'Invalid URL!',\n               err: { message: ['The page will redirect to manage customers.'] },\n               callback: () => history.push('/customers'),\n               duration: 3000,\n            });\n         },\n      }\n   );\n   const patchMutation = useMutation((payload) => patch(`/customers/id/${params.id}`, payload), {\n      onSuccess: () => {\n         history.push('/customers');\n      },\n      onError: (err) => {\n         alert.setErrorAlert({\n            message: 'Unable to edit customer.',\n            err,\n         });\n      },\n   });\n\n   const postMutation = useMutation((payload) => post('/customers', payload), {\n      onSuccess: () => {\n         history.push('/customers');\n      },\n      onError: (err) => {\n         alert.setErrorAlert({ message: 'Unable to add customer', err });\n      },\n   });\n\n   const mutation = useMemo(() => (isEditing ? patchMutation : postMutation), [isEditing, patchMutation, postMutation]);\n\n   if (!isEditing && !isViewCustomer && !isAddCustomer) {\n      history.push('/customers');\n   }\n\n   const formik = useFormik({\n      initialValues: { name: isEditing ? customer?.name : '', phone: isEditing ? customer?.phone : '' },\n      validateOnChange: false,\n      validateOnBlur: false,\n      onSubmit: (values) => {\n         mutation.mutate(values);\n      },\n   });\n   const handleSort = (key) => {\n      setSort((prev) => ({ field: key, order: prev.order * -1 }));\n   };\n   useEffect(() => {\n      if (isEditing && query.data) {\n         formik.setFieldValue('name', query.data?.customer?.name ?? '');\n         formik.setFieldValue('phone', query.data?.customer?.phone ?? '');\n      }\n   }, [isEditing, query.data]);\n\n   useEffect(() => {\n      if (page > query.data?.sales?.totalPages) {\n         setPage((prev) => prev - 1);\n      }\n   }, [page, query.data?.sales?.totalPages]);\n\n   return (\n      <>\n         <PageTItle activeMenu=\"Customers\" motherMenu=\"Manage\" />\n         {alert.getAlert()}\n         <Card>\n            <When condition={patchMutation.isLoading || postMutation.isLoading || query.isLoading}>\n               <SpinnerOverlay />\n            </When>\n            <If condition={isAddCustomer || isEditing}>\n               <Then>\n                  <form onSubmit={formik.handleSubmit}>\n                     <Card.Header>\n                        <Card.Title>{isEditing ? 'Edit Customer' : 'Add New Customer'}</Card.Title>\n                     </Card.Header>\n                     <Card.Body>\n                        <div className=\"row\">\n                           <div className=\"form-group col-xl-6\">\n                              <label className=\"col-form-label\">Name</label>\n                              <input\n                                 className=\"form-control\"\n                                 onChange={formik.handleChange}\n                                 type=\"text\"\n                                 name=\"name\"\n                                 disabled={isError}\n                                 value={formik.values.name}\n                              />\n                           </div>\n                        </div>\n                        <div className=\"row\">\n                           <div className=\"form-group col-xl-6\">\n                              <label className=\"col-form-label\">Phone</label>\n                              <input\n                                 className=\"form-control\"\n                                 onChange={formik.handleChange}\n                                 type=\"text\"\n                                 name=\"phone\"\n                                 disabled={isError}\n                                 value={formik.values.phone}\n                              />\n                           </div>\n                        </div>\n                     </Card.Body>\n                     <Card.Footer>\n                        <div className=\"row\">\n                           <div className=\"col-xl-12 tw-justify-center\">\n                              <ButtonGroup>\n                                 <Button\n                                    icon={AiFillCaretLeft}\n                                    variant=\"warning light\"\n                                    onClick={() => history.replace('/customers')}\n                                    loading={mutation.isLoading}\n                                 >\n                                    Back\n                                 </Button>\n                                 <Button\n                                    icon={AiFillSave}\n                                    variant=\"primary\"\n                                    type=\"submit\"\n                                    loading={mutation.isLoading}\n                                    disabled={isError}\n                                 >\n                                    Save\n                                 </Button>\n                              </ButtonGroup>\n                           </div>\n                        </div>\n                     </Card.Footer>\n                  </form>\n               </Then>\n               <Else>\n                  <Card.Header>\n                     <Card.Title>View Customer</Card.Title>\n                  </Card.Header>\n                  <Card.Body>\n                     <div className=\"row\">\n                        <div className=\"form-group col-xl-6\">\n                           <label className=\"col-form-label\">Name</label>\n                           <h4>{query.data?.customer?.name ?? 'N/A'}</h4>\n                        </div>\n                     </div>\n                     <div className=\"row\">\n                        <div className=\"form-group col-xl-6\">\n                           <label className=\"col-form-label\">Phone</label>\n                           <h4>{query.data?.customer?.phone ?? 'N/A'}</h4>\n                        </div>\n                     </div>\n                  </Card.Body>\n                  <Card.Footer>\n                     <div className=\"row\">\n                        <div className=\"col-xl-12 tw-justify-center\">\n                           <Button\n                              icon={AiFillCaretLeft}\n                              variant=\"warning light\"\n                              onClick={() => history.replace('/customers')}\n                              loading={mutation.isLoading}\n                           >\n                              Back\n                           </Button>\n                        </div>\n                     </div>\n                  </Card.Footer>\n               </Else>\n            </If>\n         </Card>\n         <When condition={isViewCustomer}>\n            <Card>\n               <When condition={query.isLoading}>\n                  <SpinnerOverlay />\n               </When>\n               <Card.Header>\n                  <Card.Title>View Related Sales</Card.Title>\n               </Card.Header>\n               <Card.Body>\n                  <If condition={query.data?.sales?.totalDocs > 0}>\n                     <Then>\n                        <Table className=\"tw-relative\" responsive>\n                           <thead>\n                              <tr>\n                                 <th className=\"width80\">\n                                    <strong>#</strong>\n                                 </th>\n                                 <th>\n                                    <strong className=\"tw-cursor-pointer\" onClick={() => handleSort('customer')}>\n                                       CUSTOMER\n                                       <span>\n                                          <When condition={sort.field !== 'customer'}>\n                                             <FaSort className=\"d-inline mx-1\" />\n                                          </When>\n                                          <When condition={sort.field === 'customer' && sort.order === -1}>\n                                             <FaSortDown className=\"d-inline mx-1\" />\n                                          </When>\n                                          <When condition={sort.field === 'customer' && sort.order === 1}>\n                                             <FaSortUp className=\"d-inline mx-1\" />\n                                          </When>\n                                       </span>\n                                    </strong>\n                                 </th>\n                                 <th>\n                                    <strong className=\"tw-cursor-pointer\" onClick={() => handleSort('inventory')}>\n                                       INVENTORY\n                                       <span>\n                                          <When condition={sort.field !== 'inventory'}>\n                                             <FaSort className=\"d-inline mx-1\" />\n                                          </When>\n                                          <When condition={sort.field === 'inventory' && sort.order === -1}>\n                                             <FaSortDown className=\"d-inline mx-1\" />\n                                          </When>\n                                          <When condition={sort.field === 'inventory' && sort.order === 1}>\n                                             <FaSortUp className=\"d-inline mx-1\" />\n                                          </When>\n                                       </span>\n                                    </strong>\n                                 </th>\n                                 <th>\n                                    <strong className=\"tw-cursor-pointer\" onClick={() => handleSort('quantity')}>\n                                       QUANTITY\n                                       <span>\n                                          <When condition={sort.field !== 'quantity'}>\n                                             <FaSort className=\"d-inline mx-1\" />\n                                          </When>\n                                          <When condition={sort.field === 'quantity' && sort.order === -1}>\n                                             <FaSortDown className=\"d-inline mx-1\" />\n                                          </When>\n                                          <When condition={sort.field === 'quantity' && sort.order === 1}>\n                                             <FaSortUp className=\"d-inline mx-1\" />\n                                          </When>\n                                       </span>\n                                    </strong>\n                                 </th>\n                                 <th>\n                                    <strong className=\"tw-cursor-pointer\" onClick={() => handleSort('retailPrice')}>\n                                       RETAIL PRICE\n                                       <span>\n                                          <When condition={sort.field !== 'retailPrice'}>\n                                             <FaSort className=\"d-inline mx-1\" />\n                                          </When>\n                                          <When condition={sort.field === 'retailPrice' && sort.order === -1}>\n                                             <FaSortDown className=\"d-inline mx-1\" />\n                                          </When>\n                                          <When condition={sort.field === 'retailPrice' && sort.order === 1}>\n                                             <FaSortUp className=\"d-inline mx-1\" />\n                                          </When>\n                                       </span>\n                                    </strong>\n                                 </th>\n                                 <th>\n                                    <strong className=\"tw-cursor-pointer\" onClick={() => handleSort('paid')}>\n                                       PAID\n                                       <span>\n                                          <When condition={sort.field !== 'paid'}>\n                                             <FaSort className=\"d-inline mx-1\" />\n                                          </When>\n                                          <When condition={sort.field === 'paid' && sort.order === -1}>\n                                             <FaSortDown className=\"d-inline mx-1\" />\n                                          </When>\n                                          <When condition={sort.field === 'paid' && sort.order === 1}>\n                                             <FaSortUp className=\"d-inline mx-1\" />\n                                          </When>\n                                       </span>\n                                    </strong>\n                                 </th>\n                                 <th>\n                                    <strong>REMAINING</strong>\n                                 </th>\n                              </tr>\n                           </thead>\n                           <tbody>\n                              {query.data?.sales &&\n                                 query.data?.sales?.docs.map((e, index) => {\n                                    const getRemainig = () => {\n                                       if (!e?.sourcePrice || !e?.paid) return null;\n                                       if (e.sourcePrice === e.paid) return null;\n                                       return e.sourcePrice - e.paid;\n                                    };\n                                    return (\n                                       <tr key={`${e._id}`}>\n                                          <td>\n                                             <strong>{query.data.pagingCounter * (index + 1)}</strong>\n                                          </td>\n                                          <td>{e?.customer?.name ?? 'N/A'}</td>\n                                          <td>{e?.inventory?.modelNumber ?? 'N/A'}</td>\n                                          <td>{e?.quantity ?? 'N/a'}</td>\n                                          <td>{e?.retailPrice ?? 'N/A'}</td>\n                                          <td>{e?.paid ?? 'N/A'}</td>\n                                          <td>{getRemainig()}</td>\n\n                                          <td>\n                                             <OverlayTrigger\n                                                trigger={['hover', 'hover']}\n                                                placement=\"top\"\n                                                overlay={\n                                                   <Popover className=\"tw-border-gray-500\">\n                                                      <Popover.Content>{`Created by ${e.createdBy ?? 'N/A'} ${\n                                                         dayjs(e.createdAt).diff(dayjs(), 'day', true) > 7\n                                                            ? `at ${dayjs(e.createdAt).format('DD-MMM-YYYY')}`\n                                                            : dayjs(e.createdAt).fromNow()\n                                                      }.`}</Popover.Content>\n                                                   </Popover>\n                                                }\n                                             >\n                                                <AiOutlineQuestionCircle className=\"tw-cursor-pointer\" />\n                                             </OverlayTrigger>\n                                          </td>\n                                       </tr>\n                                    );\n                                 })}\n                           </tbody>\n                        </Table>\n                     </Then>\n                     <Else>\n                        <When condition={!query.isLoading}>\n                           <p className=\"tw-m-0\">No Sales created</p>\n                        </When>\n                     </Else>\n                  </If>\n               </Card.Body>\n            </Card>\n         </When>\n         <When condition={limit > 5 ? true : query.data?.sales?.totalPages > 1}>\n            <Pagination\n               page={page}\n               onPageChange={setPage}\n               onLimitChange={setLimit}\n               {..._.omit(query.data?.sales, ['docs'])}\n               isLimitDisabled={query.isLoading}\n            />\n         </When>\n      </>\n   );\n};\n\nconst mapStateToProps = ({ auth }) => ({\n   user: auth.user,\n});\n\nconst mapDispatchToProps = {};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(CustomerActions);\n","/home/muneeb/dev/diamond-tiles-frontend/src/jsx/pages/products/ProductActions.js",["285","286","287","288","289","290","291"],"import useUrlState from '@ahooksjs/use-url-state';\nimport dayjs from 'dayjs';\nimport relativeTime from 'dayjs/plugin/relativeTime';\n\nimport { useFormik } from 'formik';\nimport Button from 'jsx/components/Button';\nimport Pagination from 'jsx/components/Pagination';\nimport SpinnerOverlay from 'jsx/components/SpinnerOverlay';\nimport { get, patch, post, useAlert, useMutation, useQuery } from 'jsx/helpers';\nimport { userRoles } from 'jsx/helpers/enums';\nimport PageTItle from 'jsx/layouts/PageTitle';\nimport _ from 'lodash';\nimport React, { useEffect, useMemo, useState } from 'react';\nimport { ButtonGroup, Card, OverlayTrigger, Popover, Table } from 'react-bootstrap';\nimport { AiFillCaretLeft, AiFillEye, AiFillSave, AiOutlineQuestionCircle } from 'react-icons/ai';\nimport { FaSort, FaSortDown, FaSortUp } from 'react-icons/fa';\nimport { Else, If, Then, When } from 'react-if';\nimport { useQueryClient } from 'react-query';\nimport { connect } from 'react-redux';\nimport { useHistory, useParams } from 'react-router-dom';\nimport CreatableSelect from '../../components/CreatableSelect';\n\nconst ProductActions = (props) => {\n   dayjs.extend(relativeTime);\n\n   const history = useHistory();\n   const params = useParams();\n   const [isError, setIsError] = useState(false);\n   const [salePage, setSalePage] = useState(1);\n   const [saleLimit, setSaleLimit] = useState(5);\n   const [saleSort, setSaleSort] = useState({ field: 'sourcePrice', order: 1 });\n   const [inventoriesPage, setInventoriesPage] = useState(1);\n   const [inventoriesLimit, setInventoriesLimit] = useState(5);\n   const [inventoriesSort, setInventoriesSort] = useState({ field: 'sourcePrice', order: 1 });\n\n   const [urlState, setUrlState] = useUrlState({});\n\n   const alert = useAlert();\n   const getTypes = useQuery('types', () => get('/types'));\n   const queryClient = useQueryClient();\n\n   const isEditing = useMemo(\n      () => props.user?.role !== userRoles.CASHIER && urlState?.type === 'edit',\n      [urlState.type]\n   );\n   const isViewProduct = useMemo(() => urlState?.type === 'view', [urlState.type]);\n   const isAddProduct = useMemo(() => params?.id === 'add', [params.id]);\n\n   const query = useQuery(\n      [\n         'product',\n         params.id,\n         salePage,\n         saleLimit,\n         saleSort.field,\n         saleSort.order,\n         inventoriesPage,\n         inventoriesLimit,\n         inventoriesSort.field,\n         inventoriesSort.order,\n      ],\n      () =>\n         get(\n            `/products/id/${params.id}?salePage=${salePage}&saleLimit=${saleLimit}&saleSort[${saleSort.field}]=${saleSort.order}&inventoriesPage=${inventoriesPage}&inventoriesLimit=${inventoriesLimit}&inventoriesSort[${inventoriesSort.field}]=${inventoriesSort.order}`\n         ),\n      {\n         enabled: !isAddProduct,\n         onError: (err) => {\n            setIsError(true);\n            alert.setErrorAlert({\n               message: 'Invalid URL!',\n               err: { message: ['The page will redirect to manage products.'] },\n               callback: () => history.push('/products'),\n               duration: 3000,\n            });\n         },\n      }\n   );\n   const patchMutation = useMutation((payload) => patch(`/products/id/${params.id}`, payload), {\n      onSuccess: () => {\n         history.push('/products');\n      },\n      onError: (err) => {\n         alert.setErrorAlert({\n            message: 'Unable to edit product.',\n            err,\n         });\n      },\n   });\n\n   const postMutation = useMutation((payload) => post('/products', payload), {\n      onSuccess: () => {\n         history.push('/products');\n      },\n      onError: (err) => {\n         alert.setErrorAlert({ message: 'Unable to add product', err });\n      },\n   });\n   const postTypeMutation = useMutation((payload) => post('/types', payload), {\n      onSuccess: async () => {\n         await queryClient.invalidateQueries('types');\n      },\n   });\n\n   const mutation = useMemo(() => (isEditing ? patchMutation : postMutation), [isEditing, patchMutation, postMutation]);\n\n   if (!isEditing && !isViewProduct && !isAddProduct) {\n      history.push('/products');\n   }\n\n   const formik = useFormik({\n      initialValues: {\n         modelNumber: '',\n         retailPrice: '',\n         type: '',\n      },\n      validateOnChange: false,\n      validateOnBlur: false,\n      onSubmit: (values) => {\n         mutation.mutate(values);\n      },\n   });\n\n   const handleCreateType = async (title) => {\n      postTypeMutation.mutate({ title });\n      // history.push({ pathname: '/types', search: `?action=add&title=${title}&redirect=/products/add` });\n   };\n   const handleInventoriesSort = (key) => {\n      setInventoriesSort((prev) => ({ field: key, order: prev.order * -1 }));\n   };\n\n   useEffect(() => {\n      if (isEditing && query.data?.product) {\n         formik.setFieldValue('title', query.data?.product?.title ?? '');\n         formik.setFieldValue('modelNumber', query.data?.product?.modelNumber ?? '');\n         formik.setFieldValue('retailPrice', query.data?.product?.retailPrice ?? '');\n         formik.setFieldValue('type', query.data?.product?.type?._id ?? '');\n      }\n   }, [isEditing, query.data?.product]);\n   return (\n      <>\n         <div className=\"row p-0 m-0\">\n            <div className=\"col-10\">\n               <PageTItle activeMenu=\"View\" motherMenu=\"Products\" />\n            </div>\n            <div className=\"col-1\">\n               <Button\n                  icon={AiFillCaretLeft}\n                  variant=\"warning light\"\n                  onClick={() => history.replace('/products')}\n                  loading={mutation.isLoading}\n               >\n                  Back\n               </Button>\n            </div>\n         </div>\n         {alert.getAlert()}\n         <Card>\n            <When condition={getTypes.isLoading || postTypeMutation.isLoading || query.isLoading}>\n               <SpinnerOverlay />\n            </When>\n            <If condition={isAddProduct || isEditing}>\n               <Then>\n                  <form onSubmit={formik.handleSubmit}>\n                     <Card.Header>\n                        <Card.Title>{isEditing ? 'Edit Product' : 'Add New product'}</Card.Title>\n                     </Card.Header>\n                     <Card.Body>\n                        <div className=\"row\">\n                           <div className=\"form-group col-xl-6\">\n                              <label className=\"col-form-label\">Model Number</label>\n                              <input\n                                 className=\"form-control\"\n                                 onChange={formik.handleChange}\n                                 type=\"text\"\n                                 name=\"modelNumber\"\n                                 disabled={isError}\n                                 value={formik.values.modelNumber}\n                              />\n                           </div>\n                        </div>\n                        <div className=\"row\">\n                           <div className=\"form-group col-xl-6\">\n                              <label className=\"col-form-label\">Retail Price</label>\n                              <input\n                                 className=\"form-control\"\n                                 onChange={formik.handleChange}\n                                 type=\"text\"\n                                 name=\"retailPrice\"\n                                 disabled={isError}\n                                 value={formik.values.retailPrice}\n                              />\n                           </div>\n                        </div>\n                        <div className=\"row\">\n                           <div className=\"form-group col-xl-6\">\n                              <label className=\"col-form-label\">Type</label>\n                              {(query.data?.product || isAddProduct) && (\n                                 <CreatableSelect\n                                    isClearable\n                                    defaultValue={\n                                       isEditing && {\n                                          _id: query.data?.product?.type?.id,\n                                          label: query.data?.product?.type?.title,\n                                          value: query.data?.product?.type?.title,\n                                       }\n                                    }\n                                    onChange={(e) => formik.setFieldValue('type', e?._id)}\n                                    options={\n                                       getTypes.data?.length > 0 &&\n                                       getTypes.data.map((e) => ({ ...e, label: e.title, value: e.title }))\n                                    }\n                                    onCreateOption={handleCreateType}\n                                 />\n                              )}\n                           </div>\n                        </div>\n                     </Card.Body>\n                     <Card.Footer>\n                        <div className=\"row\">\n                           <div className=\"col-xl-12 tw-justify-center\">\n                              <ButtonGroup>\n                                 {/* <Button\n                                    icon={AiFillCaretLeft}\n                                    variant=\"warning light\"\n                                    onClick={() => history.replace('/products')}\n                                    loading={mutation.isLoading}\n                                 >\n                                    Back\n                                 </Button> */}\n                                 <Button\n                                    icon={AiFillSave}\n                                    variant=\"primary\"\n                                    type=\"submit\"\n                                    loading={mutation.isLoading}\n                                    disabled={isError}\n                                 >\n                                    Save\n                                 </Button>\n                              </ButtonGroup>\n                           </div>\n                        </div>\n                     </Card.Footer>\n                  </form>\n               </Then>\n               <Else>\n                  <Card.Header>\n                     <Card.Title>View product</Card.Title>\n                  </Card.Header>\n                  <Card.Body>\n                     <div className=\"row\">\n                        <div className=\"form-group col-xl-6\">\n                           <label className=\"col-form-label\">Model Number</label>\n                           <h4>{query.data?.product?.modelNumber ?? 'N/A'}</h4>\n                        </div>\n                     </div>\n                     <div className=\"row\">\n                        <div className=\"form-group col-xl-6\">\n                           <label className=\"col-form-label\">Retail Price</label>\n                           <h4>{query.data?.product?.retailPrice ?? 'N/A'}</h4>\n                        </div>\n                     </div>\n                     <div className=\"row\">\n                        <div className=\"form-group col-xl-6\">\n                           <label className=\"col-form-label\">Type</label>\n                           <h4>{query.data?.product?.type?.title ?? 'N/A'}</h4>\n                        </div>\n                     </div>\n                  </Card.Body>\n               </Else>\n            </If>\n         </Card>\n         <When condition={isViewProduct}>\n            <Card>\n               <When condition={query.isLoading}>\n                  <SpinnerOverlay />\n               </When>\n               <Card.Header>\n                  <Card.Title>View Related Purchases</Card.Title>\n               </Card.Header>\n               <Card.Body>\n                  <If condition={query.data?.inventories?.totalDocs > 0}>\n                     <Then>\n                        <Table className=\"tw-relative\" responsive>\n                           <thead>\n                              <tr>\n                                 <th className=\"width80\">\n                                    <strong>#</strong>\n                                 </th>\n                                 <th>\n                                    <strong\n                                       className=\"tw-cursor-pointer\"\n                                       onClick={() => handleInventoriesSort('supplier')}\n                                    >\n                                       SUPPLIER\n                                       <span>\n                                          <When condition={inventoriesSort.field !== 'supplier'}>\n                                             <FaSort className=\"d-inline mx-1\" />\n                                          </When>\n                                          <When\n                                             condition={\n                                                inventoriesSort.field === 'supplier' && inventoriesSort.order === -1\n                                             }\n                                          >\n                                             <FaSortDown className=\"d-inline mx-1\" />\n                                          </When>\n                                          <When\n                                             condition={\n                                                inventoriesSort.field === 'supplier' && inventoriesSort.order === 1\n                                             }\n                                          >\n                                             <FaSortUp className=\"d-inline mx-1\" />\n                                          </When>\n                                       </span>\n                                    </strong>\n                                 </th>\n                                 <th>\n                                    <strong\n                                       className=\"tw-cursor-pointer\"\n                                       onClick={() => handleInventoriesSort('modelNumber')}\n                                    >\n                                       MODEL NUMBER\n                                       <span>\n                                          <When condition={inventoriesSort.field !== 'modelNumber'}>\n                                             <FaSort className=\"d-inline mx-1\" />\n                                          </When>\n                                          <When\n                                             condition={\n                                                inventoriesSort.field === 'modelNumber' && inventoriesSort.order === -1\n                                             }\n                                          >\n                                             <FaSortDown className=\"d-inline mx-1\" />\n                                          </When>\n                                          <When\n                                             condition={\n                                                inventoriesSort.field === 'modelNumber' && inventoriesSort.order === 1\n                                             }\n                                          >\n                                             <FaSortUp className=\"d-inline mx-1\" />\n                                          </When>\n                                       </span>\n                                    </strong>\n                                 </th>\n                                 <th>\n                                    <strong\n                                       className=\"tw-cursor-pointer\"\n                                       onClick={() => handleInventoriesSort('sourcePrice')}\n                                    >\n                                       PRICE\n                                       <span>\n                                          <When condition={inventoriesSort.field !== 'sourcePrice'}>\n                                             <FaSort className=\"d-inline mx-1\" />\n                                          </When>\n                                          <When\n                                             condition={\n                                                inventoriesSort.field === 'sourcePrice' && inventoriesSort.order === -1\n                                             }\n                                          >\n                                             <FaSortDown className=\"d-inline mx-1\" />\n                                          </When>\n                                          <When\n                                             condition={\n                                                inventoriesSort.field === 'sourcePrice' && inventoriesSort.order === 1\n                                             }\n                                          >\n                                             <FaSortUp className=\"d-inline mx-1\" />\n                                          </When>\n                                       </span>\n                                    </strong>\n                                 </th>\n                                 <th>\n                                    <strong className=\"tw-cursor-pointer\" onClick={() => handleInventoriesSort('paid')}>\n                                       PAID\n                                       <span>\n                                          <When condition={inventoriesSort.field !== 'paid'}>\n                                             <FaSort className=\"d-inline mx-1\" />\n                                          </When>\n                                          <When\n                                             condition={\n                                                inventoriesSort.field === 'paid' && inventoriesSort.order === -1\n                                             }\n                                          >\n                                             <FaSortDown className=\"d-inline mx-1\" />\n                                          </When>\n                                          <When\n                                             condition={inventoriesSort.field === 'paid' && inventoriesSort.order === 1}\n                                          >\n                                             <FaSortUp className=\"d-inline mx-1\" />\n                                          </When>\n                                       </span>\n                                    </strong>\n                                 </th>\n                              </tr>\n                           </thead>\n                           <tbody>\n                              {query.data?.inventories?.docs.map((e, index) => (\n                                 <tr key={`${e._id}`} className={e.isRemaining && 'tw-bg-red-400 tw-text-gray-50'}>\n                                    <td>\n                                       <strong className={e.isRemaining && 'tw-text-gray-50'}>\n                                          {query.data.inventories?.pagingCounter * (index + 1)}\n                                       </strong>\n                                    </td>\n                                    <td>{e?.supplier?.name ?? 'N/A'}</td>\n                                    <td>{e?.product?.modelNumber ?? 'N/A'}</td>\n                                    <td>{e?.sourcePrice ?? 'N/a'}</td>\n                                    <td>{e?.paid ?? 'N/A'}</td>\n                                    <td>\n                                       <OverlayTrigger\n                                          trigger={['hover', 'hover']}\n                                          placement=\"top\"\n                                          overlay={\n                                             <Popover className=\"tw-border-gray-500\">\n                                                <Popover.Content>{`Created by ${e.createdBy ?? 'N/A'} ${\n                                                   dayjs(e.createdAt).diff(dayjs(), 'day', true) > 7\n                                                      ? `at ${dayjs(e.createdAt).format('DD-MMM-YYYY')}`\n                                                      : dayjs(e.createdAt).fromNow()\n                                                }.`}</Popover.Content>\n                                             </Popover>\n                                          }\n                                       >\n                                          <AiOutlineQuestionCircle className=\"tw-cursor-pointer\" />\n                                       </OverlayTrigger>\n                                    </td>\n                                 </tr>\n                              ))}\n                           </tbody>\n                        </Table>\n                     </Then>\n                     <Else>\n                        <When condition={!query.isLoading}>\n                           <p className=\"tw-m-0\">No Purchases created</p>\n                        </When>\n                     </Else>\n                  </If>\n               </Card.Body>\n            </Card>\n         </When>\n         <When condition={inventoriesLimit > 5 ? true : query.data?.inventories?.totalPages > 1}>\n            <Pagination\n               page={inventoriesPage}\n               onPageChange={setInventoriesPage}\n               onLimitChange={setInventoriesLimit}\n               {..._.omit(query.data, ['docs'])}\n               isLimitDisabled={query.isLoading}\n            />\n         </When>\n      </>\n   );\n};\n\nconst mapStateToProps = ({ auth }) => ({\n   user: auth.user,\n});\n\nconst mapDispatchToProps = {};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(ProductActions);\n","/home/muneeb/dev/diamond-tiles-frontend/src/jsx/pages/suppliers/SupplierActions.js",["292","293","294","295","296","297","298","299","300"],"import useUrlState from '@ahooksjs/use-url-state';\nimport dayjs from 'dayjs';\nimport relativeTime from 'dayjs/plugin/relativeTime';\nimport { useFormik } from 'formik';\nimport Button from 'jsx/components/Button';\nimport SpinnerOverlay from 'jsx/components/SpinnerOverlay';\nimport { get, patch, post, useAlert, useMutation, useQuery } from 'jsx/helpers';\nimport PageTItle from 'jsx/layouts/PageTitle';\nimport React, { useEffect, useMemo, useState } from 'react';\nimport { ButtonGroup, Card, OverlayTrigger, Pagination, Popover, Table } from 'react-bootstrap';\nimport { AiFillCaretLeft, AiFillSave, AiOutlineQuestionCircle } from 'react-icons/ai';\nimport { FaSort, FaSortDown, FaSortUp } from 'react-icons/fa';\nimport { Else, If, Then, When } from 'react-if';\nimport { useHistory, useParams } from 'react-router-dom';\n\nimport _ from 'lodash';\nimport { connect } from 'react-redux';\nimport { userRoles } from 'jsx/helpers/enums';\n\nconst SupplierActions = (props) => {\n   const history = useHistory();\n   const params = useParams();\n   const [isError, setIsError] = useState(false);\n\n   const [urlState, setUrlState] = useUrlState({});\n\n   const alert = useAlert();\n   const isEditing = useMemo(\n      () => props.user?.role !== userRoles.CASHIER && urlState?.type === 'edit',\n      [urlState.type]\n   );\n   const isViewSupplier = useMemo(() => urlState?.type === 'view', [urlState.type]);\n   const isAddSupplier = useMemo(() => params?.id === 'add', [params.id]);\n\n   const [page, setPage] = useState(1);\n   const [limit, setLimit] = useState(5);\n   const [sort, setSort] = useState({ field: 'sourcePrice', order: 1 });\n\n   const query = useQuery(['supplier', params.id], () => get(`/suppliers/id/${params.id}`), {\n      enabled: !isAddSupplier,\n      onError: (err) => {\n         setIsError(true);\n         alert.setErrorAlert({\n            message: 'Invalid URL!',\n            err: { message: ['The page will redirect to manage suppliers.'] },\n            callback: () => history.push('/suppliers'),\n            duration: 3000,\n         });\n      },\n   });\n   const patchMutation = useMutation((payload) => patch(`/suppliers/id/${params.id}`, payload), {\n      onSuccess: () => {\n         history.push('/suppliers');\n      },\n      onError: (err) => {\n         alert.setErrorAlert({\n            message: 'Unable to edit supplier.',\n            err,\n         });\n      },\n   });\n\n   const postMutation = useMutation((payload) => post('/suppliers', payload), {\n      onSuccess: () => {\n         history.push('/suppliers');\n      },\n      onError: (err) => {\n         alert.setErrorAlert({ message: 'Unable to add supplier', err });\n      },\n   });\n\n   const mutation = useMemo(() => (isEditing ? patchMutation : postMutation), [isEditing, patchMutation, postMutation]);\n\n   if (!isEditing && !isViewSupplier && !isAddSupplier) {\n      history.push('/suppliers');\n   }\n\n   const formik = useFormik({\n      initialValues: {\n         name: '',\n         phone: '',\n         company: '',\n      },\n      validateOnChange: false,\n      validateOnBlur: false,\n      onSubmit: (values) => {\n         mutation.mutate(values);\n      },\n   });\n\n   useEffect(() => {\n      if (isEditing && query.data) {\n         formik.setFieldValue('name', query.data?.supplier?.name ?? '');\n         formik.setFieldValue('phone', query.data?.supplier?.phone ?? '');\n         formik.setFieldValue('company', query.data?.supplier?.company ?? '');\n      }\n   }, [isEditing, query.data]);\n\n   const handleSort = (key) => {\n      setSort((prev) => ({ field: key, order: prev.order * -1 }));\n   };\n\n   return (\n      <>\n         <PageTItle activeMenu=\"Suppliers\" motherMenu=\"Manage\" />\n         {alert.getAlert()}\n         <Card>\n            <When condition={patchMutation.isLoading || postMutation.isLoading || query.isLoading}>\n               <SpinnerOverlay />\n            </When>\n            <If condition={isAddSupplier || isEditing}>\n               <Then>\n                  <form onSubmit={formik.handleSubmit}>\n                     <Card.Header>\n                        <Card.Title>{isEditing ? 'Edit Supplier' : 'Add New Supplier'}</Card.Title>\n                     </Card.Header>\n                     <Card.Body>\n                        <div className=\"row\">\n                           <div className=\"form-group col-xl-6\">\n                              <label className=\"col-form-label\">Name</label>\n                              <input\n                                 className=\"form-control\"\n                                 onChange={formik.handleChange}\n                                 type=\"text\"\n                                 name=\"name\"\n                                 disabled={isError}\n                                 value={formik.values.name}\n                              />\n                           </div>\n                        </div>\n                        <div className=\"row\">\n                           <div className=\"form-group col-xl-6\">\n                              <label className=\"col-form-label\">Phone</label>\n                              <input\n                                 className=\"form-control\"\n                                 onChange={formik.handleChange}\n                                 type=\"text\"\n                                 name=\"phone\"\n                                 disabled={isError}\n                                 value={formik.values.phone}\n                              />\n                           </div>\n                        </div>\n                        <div className=\"row\">\n                           <div className=\"form-group col-xl-6\">\n                              <label className=\"col-form-label\">Company</label>\n                              <input\n                                 className=\"form-control\"\n                                 onChange={formik.handleChange}\n                                 type=\"text\"\n                                 name=\"company\"\n                                 disabled={isError}\n                                 value={formik.values.company}\n                              />\n                           </div>\n                        </div>\n                     </Card.Body>\n                     <Card.Footer>\n                        <div className=\"row\">\n                           <div className=\"col-xl-12 tw-justify-center\">\n                              <ButtonGroup>\n                                 <Button\n                                    icon={AiFillCaretLeft}\n                                    variant=\"warning light\"\n                                    onClick={() => history.replace('/suppliers')}\n                                    loading={mutation.isLoading}\n                                 >\n                                    Back\n                                 </Button>\n                                 <Button\n                                    icon={AiFillSave}\n                                    variant=\"primary\"\n                                    type=\"submit\"\n                                    loading={mutation.isLoading}\n                                    disabled={isError}\n                                 >\n                                    Save\n                                 </Button>\n                              </ButtonGroup>\n                           </div>\n                        </div>\n                     </Card.Footer>\n                  </form>\n               </Then>\n               <Else>\n                  <Card.Header>\n                     <Card.Title>View Supplier</Card.Title>\n                  </Card.Header>\n                  <Card.Body>\n                     <div className=\"row\">\n                        <div className=\"form-group col-xl-6\">\n                           <label className=\"col-form-label\">Name</label>\n                           <h4>{query.data?.supplier?.name ?? 'N/A'}</h4>\n                        </div>\n                     </div>\n                     <div className=\"row\">\n                        <div className=\"form-group col-xl-6\">\n                           <label className=\"col-form-label\">Phone</label>\n                           <h4>{query.data?.supplier?.phone ?? 'N/A'}</h4>\n                        </div>\n                     </div>\n                     <div className=\"row\">\n                        <div className=\"form-group col-xl-6\">\n                           <label className=\"col-form-label\">Company</label>\n                           <h4>{query.data?.supplier?.company ?? 'N/A'}</h4>\n                        </div>\n                     </div>\n                  </Card.Body>\n                  <Card>\n                     <When condition={query.isLoading}>\n                        <SpinnerOverlay />\n                     </When>\n                     <Card.Header>\n                        <Card.Title>View Related Purchases</Card.Title>\n                     </Card.Header>\n                     <Card.Body>\n                        <If condition={query.data?.inventories?.totalDocs > 0}>\n                           <Then>\n                              <Table className=\"tw-relative\" responsive>\n                                 <thead>\n                                    <tr>\n                                       <th className=\"width80\">\n                                          <strong>#</strong>\n                                       </th>\n                                       <th>\n                                          <strong className=\"tw-cursor-pointer\" onClick={() => handleSort('supplier')}>\n                                             SUPPLIER\n                                             <span>\n                                                <When condition={sort.field !== 'supplier'}>\n                                                   <FaSort className=\"d-inline mx-1\" />\n                                                </When>\n                                                <When condition={sort.field === 'supplier' && sort.order === -1}>\n                                                   <FaSortDown className=\"d-inline mx-1\" />\n                                                </When>\n                                                <When condition={sort.field === 'supplier' && sort.order === 1}>\n                                                   <FaSortUp className=\"d-inline mx-1\" />\n                                                </When>\n                                             </span>\n                                          </strong>\n                                       </th>\n                                       <th>\n                                          <strong\n                                             className=\"tw-cursor-pointer\"\n                                             onClick={() => handleSort('modelNumber')}\n                                          >\n                                             MODEL NUMBER\n                                             <span>\n                                                <When condition={sort.field !== 'modelNumber'}>\n                                                   <FaSort className=\"d-inline mx-1\" />\n                                                </When>\n                                                <When condition={sort.field === 'modelNumber' && sort.order === -1}>\n                                                   <FaSortDown className=\"d-inline mx-1\" />\n                                                </When>\n                                                <When condition={sort.field === 'modelNumber' && sort.order === 1}>\n                                                   <FaSortUp className=\"d-inline mx-1\" />\n                                                </When>\n                                             </span>\n                                          </strong>\n                                       </th>\n                                       <th>\n                                          <strong\n                                             className=\"tw-cursor-pointer\"\n                                             onClick={() => handleSort('sourcePrice')}\n                                          >\n                                             PRICE\n                                             <span>\n                                                <When condition={sort.field !== 'sourcePrice'}>\n                                                   <FaSort className=\"d-inline mx-1\" />\n                                                </When>\n                                                <When condition={sort.field === 'sourcePrice' && sort.order === -1}>\n                                                   <FaSortDown className=\"d-inline mx-1\" />\n                                                </When>\n                                                <When condition={sort.field === 'sourcePrice' && sort.order === 1}>\n                                                   <FaSortUp className=\"d-inline mx-1\" />\n                                                </When>\n                                             </span>\n                                          </strong>\n                                       </th>\n                                       <th>\n                                          <strong className=\"tw-cursor-pointer\" onClick={() => handleSort('paid')}>\n                                             PAID\n                                             <span>\n                                                <When condition={sort.field !== 'paid'}>\n                                                   <FaSort className=\"d-inline mx-1\" />\n                                                </When>\n                                                <When condition={sort.field === 'paid' && sort.order === -1}>\n                                                   <FaSortDown className=\"d-inline mx-1\" />\n                                                </When>\n                                                <When condition={sort.field === 'paid' && sort.order === 1}>\n                                                   <FaSortUp className=\"d-inline mx-1\" />\n                                                </When>\n                                             </span>\n                                          </strong>\n                                       </th>\n                                    </tr>\n                                 </thead>\n                                 <tbody>\n                                    {query.data?.inventories?.docs.map((e, index) => (\n                                       <tr\n                                          key={`${e._id}`}\n                                          className={e.isRemaining && 'tw-bg-red-400 tw-text-gray-50'}\n                                       >\n                                          <td>\n                                             <strong className={e.isRemaining && 'tw-text-gray-50'}>\n                                                {query.data.inventories?.pagingCounter * (index + 1)}\n                                             </strong>\n                                          </td>\n                                          <td>{e?.supplier?.name ?? 'N/A'}</td>\n                                          <td>{e?.product?.modelNumber ?? 'N/A'}</td>\n                                          <td>{e?.sourcePrice ?? 'N/a'}</td>\n                                          <td>{e?.paid ?? 'N/A'}</td>\n                                          <td>\n                                             {/* <OverlayTrigger\n                                                trigger={['hover', 'hover']}\n                                                placement=\"top\"\n                                                overlay={\n                                                   <Popover className=\"tw-border-gray-500\">\n                                                      <Popover.Content>{`Created by ${e.createdBy ?? 'N/A'} ${\n                                                         dayjs(e.createdAt).diff(dayjs(), 'day', true) > 7\n                                                            ? `at ${dayjs(e.createdAt).format('DD-MMM-YYYY')}`\n                                                            : dayjs(e.createdAt).fromNow()\n                                                      }.`}</Popover.Content>\n                                                   </Popover>\n                                                }\n                                             >\n                                                <AiOutlineQuestionCircle className=\"tw-cursor-pointer\" />\n                                             </OverlayTrigger> */}\n                                          </td>\n                                       </tr>\n                                    ))}\n                                 </tbody>\n                              </Table>\n                           </Then>\n                           <Else>\n                              <When condition={!query.isLoading}>\n                                 <p className=\"tw-m-0\">No Purchases created</p>\n                              </When>\n                           </Else>\n                        </If>\n                     </Card.Body>\n                  </Card>\n                  <When condition={setLimit > 5 ? true : query.data?.inventories?.totalPages > 1}>\n                     <Pagination\n                        page={page}\n                        onPageChange={setPage}\n                        onLimitChange={setLimit}\n                        {..._.omit(query.data, ['docs'])}\n                        isLimitDisabled={query.isLoading}\n                     />\n                  </When>\n               </Else>\n            </If>\n         </Card>\n      </>\n   );\n};\n\nconst mapStateToProps = ({ auth }) => ({\n   user: auth.user,\n});\n\nconst mapDispatchToProps = {};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(SupplierActions);\n","/home/muneeb/dev/diamond-tiles-frontend/src/store/auth/actionTypes.js",[],"/home/muneeb/dev/diamond-tiles-frontend/src/jsx/pages/employees/index.js",[],"/home/muneeb/dev/diamond-tiles-frontend/src/jsx/pages/inventory/index.js",["301","302","303"],"import { useDebounce } from 'ahooks';\nimport dayjs from 'dayjs';\nimport relativeTime from 'dayjs/plugin/relativeTime';\nimport Pagination from 'jsx/components/Pagination';\nimport SpinnerOverlay from 'jsx/components/SpinnerOverlay';\nimport { get, useAlert, useQuery } from 'jsx/helpers';\nimport PageTItle from 'jsx/layouts/PageTitle';\nimport _ from 'lodash';\nimport React, { useEffect, useState } from 'react';\nimport { Card, Col, OverlayTrigger, Popover, Row, Table } from 'react-bootstrap';\nimport { AiOutlineQuestionCircle } from 'react-icons/ai';\nimport { FaSort, FaSortDown, FaSortUp } from 'react-icons/fa';\nimport { Else, If, Then, When } from 'react-if';\nimport { useQueryClient } from 'react-query';\nimport { useHistory } from 'react-router-dom';\n\nconst Khaata = () => {\n   dayjs.extend(relativeTime);\n   const history = useHistory();\n   const [page, setPage] = useState(1);\n   const [limit, setLimit] = useState(5);\n   const [sort, setSort] = useState({ field: null, order: -1 });\n   const [search, setSearch] = useState('');\n   const debouncedSearchValue = useDebounce(search, { wait: 500 });\n\n   const alert = useAlert();\n   const queryClient = useQueryClient();\n\n   const query = useQuery(['inventories/products', page, limit, sort.field, sort.order], () =>\n      get('/inventories/products', page, limit, sort.field, sort.order)\n   );\n   const alertMarkup = alert.getAlert();\n\n   const handleSort = (key) => {\n      setSort((prev) => ({ field: key, order: prev.order * -1 }));\n   };\n\n   useEffect(() => {\n      if (page > query.data?.totalPages) {\n         setPage((prev) => prev - 1);\n      }\n   }, [page, query.data?.totalPages]);\n\n   return (\n      <>\n         <PageTItle activeMenu=\"inventory\" motherMenu=\"Diamond Tiles\" />\n         {alertMarkup ? (\n            <Row>\n               <Col lg={12}>{alertMarkup}</Col>\n            </Row>\n         ) : null}\n         <div className=\"row\">\n            <Col lg={12}>\n               <Card>\n                  <When condition={query.isLoading}>\n                     <SpinnerOverlay />\n                  </When>\n                  <Card.Header>\n                     <Card.Title>Inventory</Card.Title>\n                  </Card.Header>\n                  <Card.Body>\n                     <If condition={query.data?.totalDocs > 0}>\n                        <Then>\n                           <Table className=\"tw-relative\" responsive>\n                              <thead>\n                                 <tr>\n                                    <th className=\"width80\">\n                                       <strong>#</strong>\n                                    </th>\n                                    <th>\n                                       <strong className=\"tw-cursor-pointer\" onClick={() => handleSort('modelNumber')}>\n                                          MODEL NUMBER\n                                          <span>\n                                             <When condition={sort.field !== 'modelNumber'}>\n                                                <FaSort className=\"d-inline mx-1\" />\n                                             </When>\n                                             <When condition={sort.field === 'modelNumber' && sort.order === -1}>\n                                                <FaSortDown className=\"d-inline mx-1\" />\n                                             </When>\n                                             <When condition={sort.field === 'modelNumber' && sort.order === 1}>\n                                                <FaSortUp className=\"d-inline mx-1\" />\n                                             </When>\n                                          </span>\n                                       </strong>\n                                    </th>\n                                    <th>\n                                       <strong className=\"tw-cursor-pointer\" onClick={() => handleSort('retialPrice')}>\n                                          RETAIL PRICE\n                                          <span>\n                                             <When condition={sort.field !== 'retialPrice'}>\n                                                <FaSort className=\"d-inline mx-1\" />\n                                             </When>\n                                             <When condition={sort.field === 'retialPrice' && sort.order === -1}>\n                                                <FaSortDown className=\"d-inline mx-1\" />\n                                             </When>\n                                             <When condition={sort.field === 'retialPrice' && sort.order === 1}>\n                                                <FaSortUp className=\"d-inline mx-1\" />\n                                             </When>\n                                          </span>\n                                       </strong>\n                                    </th>\n                                    <th>\n                                       <strong className=\"tw-cursor-pointer\" onClick={() => handleSort('quantity')}>\n                                          QUANTITY\n                                          <span>\n                                             <When condition={sort.field !== 'quantity'}>\n                                                <FaSort className=\"d-inline mx-1\" />\n                                             </When>\n                                             <When condition={sort.field === 'quantity' && sort.order === -1}>\n                                                <FaSortDown className=\"d-inline mx-1\" />\n                                             </When>\n                                             <When condition={sort.field === 'quantity' && sort.order === 1}>\n                                                <FaSortUp className=\"d-inline mx-1\" />\n                                             </When>\n                                          </span>\n                                       </strong>\n                                    </th>\n                                 </tr>\n                              </thead>\n                              <tbody>\n                                 {query.data &&\n                                    query.data?.docs.map((e, index) => (\n                                       <tr key={`${e._id}`}>\n                                          <td>\n                                             <strong>{query.data.pagingCounter * (index + 1)}</strong>\n                                          </td>\n                                          <td>{e?.modelNumber ?? 'N/A'}</td>\n                                          <td>{e?.retailPrice ?? 'N/A'}</td>\n                                          <td>{e?.quantity ?? 'N/a'}</td>\n                                          <td>\n                                             <OverlayTrigger\n                                                trigger={['hover', 'hover']}\n                                                placement=\"top\"\n                                                overlay={\n                                                   <Popover className=\"tw-border-gray-500\">\n                                                      <Popover.Content>{`Created by ${e.createdBy ?? 'N/A'} ${\n                                                         dayjs(e.createdAt).diff(dayjs(), 'day', true) > 7\n                                                            ? `at ${dayjs(e.createdAt).format('DD-MMM-YYYY')}`\n                                                            : dayjs(e.createdAt).fromNow()\n                                                      }.`}</Popover.Content>\n                                                   </Popover>\n                                                }\n                                             >\n                                                <AiOutlineQuestionCircle className=\"tw-cursor-pointer\" />\n                                             </OverlayTrigger>\n                                          </td>\n                                       </tr>\n                                    ))}\n                              </tbody>\n                           </Table>\n                        </Then>\n                        <Else>\n                           <When condition={!query.isLoading && !debouncedSearchValue}>\n                              <p className=\"tw-m-0\">No inventory created</p>\n                           </When>\n                           <When condition={!query.isLoading && debouncedSearchValue}>\n                              <p className=\"tw-m-0\">No result found!</p>\n                           </When>\n                        </Else>\n                     </If>\n                  </Card.Body>\n               </Card>\n            </Col>\n         </div>\n         <When condition={limit > 5 ? true : query.data?.totalPages > 1}>\n            <Pagination\n               page={page}\n               onPageChange={setPage}\n               onLimitChange={setLimit}\n               {..._.omit(query.data, ['docs'])}\n               isLimitDisabled={query.isLoading}\n            />\n         </When>\n      </>\n   );\n};\n\nexport default Khaata;\n","/home/muneeb/dev/diamond-tiles-frontend/src/jsx/pages/dashboard/index.js",["304","305"],"import React, { useState } from 'react';\nimport { Dropdown, Table, ButtonGroup } from 'react-bootstrap';\nimport Button from 'jsx/components/Button';\n\nimport { AiFillEye } from 'react-icons/ai';\n\nconst Dashboard = () => {\n   const [activeModal, setActiveModal] = useState(false);\n   return (\n      <>\n         <div className=\"row\">\n            <div className=\"col-xl col-md-6\">\n               <div className=\"card\">\n                  <div className=\"card-body p-4\">\n                     <span className=\"circle bg-primary\" />\n                     <h2 className=\"fs-16 text-black font-w600 mb-0\">Best Performing Product</h2>\n                     <div className=\"d-flex flex-row justify-content-between mt-2\">\n                        <span className=\"fs-14\">porcelein</span>\n                        <ButtonGroup>\n                           <Button variant=\"info\" size=\"sm\" icon={AiFillEye} onClick={() => {}} />\n                        </ButtonGroup>\n                     </div>\n                  </div>\n               </div>\n            </div>\n            <div className=\"col-xl col-md-6\">\n               <div className=\"card\">\n                  <div className=\"card-body p-4\">\n                     <span className=\"circle bg-primary\" />\n                     <h2 className=\"fs-16 text-black font-w600 mb-0\">Worst Performing Product</h2>\n                     <div className=\"d-flex flex-row justify-content-between mt-2\">\n                        <span className=\"fs-14\">porcelein</span>\n                        <ButtonGroup>\n                           <Button variant=\"info\" size=\"sm\" icon={AiFillEye} onClick={() => {}} />\n                        </ButtonGroup>\n                     </div>\n                  </div>\n               </div>\n            </div>\n            <div className=\"col-xl col-md-6\">\n               <div className=\"card\">\n                  <div className=\"card-body p-4\">\n                     <span className=\"circle bg-primary\" />\n                     <h2 className=\"fs-16 text-black font-w600 mb-0\">Best Performing Supplier</h2>\n                     <div className=\"d-flex flex-row justify-content-between mt-2\">\n                        <span className=\"fs-14\">HK SUPPlIES</span>\n                        <ButtonGroup>\n                           <Button variant=\"info\" size=\"sm\" icon={AiFillEye} onClick={() => {}} />\n                        </ButtonGroup>\n                     </div>\n                  </div>\n               </div>\n            </div>\n            <div className=\"col-xl col-md-6\">\n               <div className=\"card\">\n                  <div className=\"card-body p-4\">\n                     <span className=\"circle bg-primary\" />\n                     <h2 className=\"fs-16 text-black font-w600 mb-0\">Worst Performing Supplier</h2>\n                     <div className=\"d-flex flex-row justify-content-between mt-2\">\n                        <span className=\"fs-14\">OV TRADERS</span>\n                        <ButtonGroup>\n                           <Button variant=\"info\" size=\"sm\" icon={AiFillEye} onClick={() => {}} />\n                        </ButtonGroup>\n                     </div>\n                  </div>\n               </div>\n            </div>\n         </div>\n         <div className=\"row\">\n            <div className=\"col-xl-5 col-xxl-5\">\n               <div className=\"row\">\n                  <div className=\"col-xl-12\">\n                     <div className=\"card\">\n                        <div className=\"card-header d-sm-flex d-block pb-0 border-0\">\n                           <div className=\"d-flex align-items-center\">\n                              <div className=\"mr-auto pr-3\">\n                                 <h4 className=\"text-black fs-20\">Number of Sales</h4>\n                                 {/* <p className=\"fs-13 mb-0 text-black\">Lorem ipsum dolor sit amet, consectetur</p> */}\n                              </div>\n                           </div>\n                           <Dropdown className=\"dropdown mt-sm-0 mt-3\">\n                              <Dropdown.Toggle\n                                 as=\"button\"\n                                 variant=\"\"\n                                 className=\"btn rounded border border-light dropdown-toggle\"\n                              >\n                                 This Year\n                              </Dropdown.Toggle>\n                              <Dropdown.Menu className=\"dropdown-menu dropdown-menu-right\">\n                                 <Dropdown.Item>Last Year</Dropdown.Item>\n                                 {/* <Dropdown.Item>Last 6 Months</Dropdown.Item> */}\n                              </Dropdown.Menu>\n                           </Dropdown>\n                        </div>\n                        <div className=\"card-body pb-0 h-100\">{/* <ApexLine3 /> */}</div>\n                     </div>\n                  </div>\n               </div>\n            </div>\n\n            <div className=\"col-xl-7 col-xxl-7\">\n               <div className=\"row\">\n                  <div className=\"col-xl-12 col-md-6\">\n                     <div className=\"card\">\n                        <div className=\"card-header d-sm-flex d-block pb-0 border-0\">\n                           <div className=\"d-flex align-items-center\">\n                              <div className=\"mr-auto pr-3\">\n                                 <h4 className=\"text-black fs-20\">Sales</h4>\n                                 {/* <p className=\"fs-13 mb-0 text-black\">Lorem ipsum dolor sit amet, consectetur</p> */}\n                              </div>\n                           </div>\n                        </div>\n                        <div className=\"card-body text-center\">\n                           <div className=\"d-flex mb-sm-5 mb-3\">\n                              <Table className=\"tw-relative\" responsive>\n                                 <thead>\n                                    <tr>\n                                       <th className=\"width80\">\n                                          <strong>#</strong>\n                                       </th>\n                                       <th>\n                                          <strong>CUSTOMER</strong>\n                                       </th>\n                                       <th>\n                                          <strong>INVENTORY</strong>\n                                       </th>\n                                       <th>\n                                          <strong>QUANTITY</strong>\n                                       </th>\n                                       <th>\n                                          <strong>RETAIL PRICE</strong>\n                                       </th>\n                                       <th>\n                                          <strong>PAID</strong>\n                                       </th>\n                                    </tr>\n                                 </thead>\n                                 <tbody>\n                                    <tr>\n                                       <td>2</td>\n                                       <td>Jane Doe</td>\n                                       <td>porcelein</td>\n                                       <td>1</td>\n                                       <td>2500</td>\n                                       <td>2500</td>\n                                    </tr>\n                                    <tr>\n                                       <td>2</td>\n                                       <td>Jane Doe</td>\n                                       <td>porcelein</td>\n                                       <td>1</td>\n                                       <td>2500</td>\n                                       <td>2500</td>\n                                    </tr>\n                                    <tr>\n                                       <td>3</td>\n                                       <td>John Doe</td>\n                                       <td>porcelein</td>\n                                       <td>3</td>\n                                       <td>1999</td>\n                                       <td>1588</td>\n                                    </tr>\n                                 </tbody>\n                              </Table>\n                           </div>\n                           <ButtonGroup>\n                              <Button icon={AiFillEye}>View More</Button>\n                           </ButtonGroup>\n                        </div>\n                     </div>\n                  </div>\n               </div>\n            </div>\n         </div>\n         <div className=\"row\">\n            <div className=\"col-xl-7 col-xxl-7\">\n               <div className=\"row\">\n                  <div className=\"col-xl-12 col-md-6\">\n                     <div className=\"card\">\n                        <div className=\"card-header d-sm-flex d-block pb-0 border-0\">\n                           <div className=\"d-flex align-items-center\">\n                              <div className=\"mr-auto pr-3\">\n                                 <h4 className=\"text-black fs-20\">Purchases</h4>\n                                 {/* <p className=\"fs-13 mb-0 text-black\">Lorem ipsum dolor sit amet, consectetur</p> */}\n                              </div>\n                           </div>\n                        </div>\n                        <div className=\"card-body text-center\">\n                           <div className=\"d-flex mb-sm-5 mb-3\">\n                              <Table className=\"tw-relative\" responsive>\n                                 <thead>\n                                    <tr>\n                                       <th className=\"width80\">\n                                          <strong>#</strong>\n                                       </th>\n                                       <th>\n                                          <strong>SUPPLIER</strong>\n                                       </th>\n                                       <th>\n                                          <strong>MODEL NUMBER</strong>\n                                       </th>\n                                       <th>\n                                          <strong>PRICE</strong>\n                                       </th>\n                                       <th>\n                                          <strong>PAID</strong>\n                                       </th>\n                                    </tr>\n                                 </thead>\n                                 <tbody>\n                                    <tr>\n                                       <td>2</td>\n                                       <td>Jane Doe</td>\n                                       <td>porcelein</td>\n                                       <td>1</td>\n                                       <td>2500</td>\n                                    </tr>\n                                    <tr>\n                                       <td>2</td>\n                                       <td>Jane Doe</td>\n                                       <td>porcelein</td>\n                                       <td>1</td>\n                                       <td>2500</td>\n                                    </tr>\n                                    <tr>\n                                       <td>3</td>\n                                       <td>John Doe</td>\n                                       <td>porcelein</td>\n                                       <td>3</td>\n                                       <td>1999</td>\n                                    </tr>\n                                 </tbody>\n                              </Table>\n                           </div>\n                           <ButtonGroup>\n                              <Button icon={AiFillEye}>View More</Button>\n                           </ButtonGroup>\n                        </div>\n                     </div>\n                  </div>\n               </div>\n            </div>\n            <div className=\"col-xl-5 col-xxl-5\">\n               <div className=\"row\">\n                  <div className=\"col-xl-12\">\n                     <div className=\"card\">\n                        <div className=\"card-header d-sm-flex d-block pb-0 border-0\">\n                           <div className=\"d-flex align-items-center\">\n                              <div className=\"mr-auto pr-3\">\n                                 <h4 className=\"text-black fs-20\">Number of Purchases</h4>\n                                 {/* <p className=\"fs-13 mb-0 text-black\">Lorem ipsum dolor sit amet, consectetur</p> */}\n                              </div>\n                           </div>\n                           <Dropdown className=\"dropdown mt-sm-0 mt-3\">\n                              <Dropdown.Toggle\n                                 as=\"button\"\n                                 variant=\"\"\n                                 className=\"btn rounded border border-light dropdown-toggle\"\n                              >\n                                 This Year\n                              </Dropdown.Toggle>\n                              <Dropdown.Menu className=\"dropdown-menu dropdown-menu-right\">\n                                 <Dropdown.Item>Last Year</Dropdown.Item>\n                                 {/* <Dropdown.Item>Last 6 Months</Dropdown.Item> */}\n                              </Dropdown.Menu>\n                           </Dropdown>\n                        </div>\n                        <div className=\"card-body pb-0 h-100\">{/* <ApexLine3 /> */}</div>\n                     </div>\n                  </div>\n               </div>\n            </div>\n         </div>\n         <div className=\"row\">\n            <div className=\"col-xl-2\">\n               <div className=\"card\">\n                  <div className=\"card-body p-4\">\n                     <span className=\"circle bg-primary\" />\n                     <h2 className=\"fs-16 text-black font-w600 mb-0\">Net Profit</h2>\n                     <div className=\"d-flex flex-row justify-content-between mt-2\">\n                        <span className=\"fs-14\">24%</span>\n                     </div>\n                  </div>\n               </div>\n            </div>\n            <div className=\"col-xl-2\">\n               <div className=\"card\">\n                  <div className=\"card-body p-4\">\n                     <span className=\"circle bg-primary\" />\n                     <h2 className=\"fs-16 text-black font-w600 mb-0\">Gross Profit</h2>\n                     <div className=\"d-flex flex-row justify-content-between mt-2\">\n                        <span className=\"fs-14\">24%</span>\n                     </div>\n                  </div>\n               </div>\n            </div>\n            <div className=\"col-xl col-md-6\">\n               <div className=\"card\">\n                  <div className=\"card-body p-4\">\n                     <span className=\"circle bg-primary\" />\n                     <h2 className=\"fs-16 text-black font-w600 mb-0\">Recent Sale</h2>\n                     <div className=\"d-flex flex-row justify-content-between mt-2\">\n                        <span className=\"fs-14\">porcelein</span>\n                        <ButtonGroup>\n                           <Button variant=\"info\" size=\"sm\" icon={AiFillEye} onClick={() => {}} />\n                        </ButtonGroup>\n                     </div>\n                  </div>\n               </div>\n            </div>\n            <div className=\"col-xl col-md-6\">\n               <div className=\"card\">\n                  <div className=\"card-body p-4\">\n                     <span className=\"circle bg-primary\" />\n                     <h2 className=\"fs-16 text-black font-w600 mb-0\">Recent Purchase</h2>\n                     <div className=\"d-flex flex-row justify-content-between mt-2\">\n                        <span className=\"fs-14\">porcelein</span>\n                        <ButtonGroup>\n                           <Button variant=\"info\" size=\"sm\" icon={AiFillEye} onClick={() => {}} />\n                        </ButtonGroup>\n                     </div>\n                  </div>\n               </div>\n            </div>\n            <div className=\"col-xl-12\">\n               <div className=\"card\">\n                  <div className=\"card-header d-sm-flex d-block pb-0 border-0\">\n                     <div className=\"d-flex align-items-center\">\n                        <div className=\"mr-auto pr-3\">\n                           <h4 className=\"text-black fs-20\">Expenses</h4>\n                           {/* <p className=\"fs-13 mb-0 text-black\">Lorem ipsum dolor sit amet, consectetur</p> */}\n                        </div>\n                     </div>\n                  </div>\n                  <div className=\"card-body p-4 text-center\">\n                     <div className=\"d-flex mb-sm-5 mb-3\">\n                        <Table className=\"tw-relative\" responsive>\n                           <thead>\n                              <tr>\n                                 <th className=\"width80\">\n                                    <strong>#</strong>\n                                 </th>\n                                 <th>\n                                    <strong>TITLE</strong>\n                                 </th>\n                                 <th>\n                                    <strong>TYPE</strong>\n                                 </th>\n                                 <th>\n                                    <strong>EMPLOYEE</strong>\n                                 </th>\n                                 <th>\n                                    <strong>AMOUNT</strong>\n                                 </th>\n                              </tr>\n                           </thead>\n                           <tbody>\n                              <tr>\n                                 <td>2</td>\n                                 <td>Jane Doe</td>\n                                 <td>misc</td>\n                                 <td>1</td>\n                                 <td>2500</td>\n                              </tr>\n                              <tr>\n                                 <td>2</td>\n                                 <td>Jane Doe</td>\n                                 <td>misc</td>\n                                 <td>1</td>\n                                 <td>2500</td>\n                              </tr>\n                              <tr>\n                                 <td>3</td>\n                                 <td>John Doe</td>\n                                 <td>misc</td>\n                                 <td>3</td>\n                                 <td>1999</td>\n                              </tr>\n                           </tbody>\n                        </Table>\n                     </div>\n                     <ButtonGroup>\n                        <Button icon={AiFillEye}>View More</Button>\n                     </ButtonGroup>\n                  </div>\n               </div>\n            </div>\n         </div>\n      </>\n   );\n};\n\nexport default Dashboard;\n","/home/muneeb/dev/diamond-tiles-frontend/src/jsx/pages/khaata/index.js",["306","307","308","309","310","311","312","313"],"import { useDebounce } from 'ahooks';\nimport dayjs from 'dayjs';\nimport relativeTime from 'dayjs/plugin/relativeTime';\nimport Button from 'jsx/components/Button';\nimport Pagination from 'jsx/components/Pagination';\nimport SpinnerOverlay from 'jsx/components/SpinnerOverlay';\nimport { get, useAlert, useQuery } from 'jsx/helpers';\nimport PageTItle from 'jsx/layouts/PageTitle';\nimport _ from 'lodash';\nimport React, { useEffect, useState } from 'react';\nimport { ButtonGroup, Card, Col, OverlayTrigger, Popover, Row, Table } from 'react-bootstrap';\nimport {\n   AiFillDelete,\n   AiFillEdit,\n   AiFillEye,\n   AiFillPlusCircle,\n   AiOutlineClear,\n   AiOutlineQuestionCircle,\n} from 'react-icons/ai';\nimport { FaSort, FaSortDown, FaSortUp } from 'react-icons/fa';\nimport { Else, If, Then, When } from 'react-if';\nimport { useQueryClient } from 'react-query';\nimport { useHistory } from 'react-router-dom';\n\nconst Khaata = () => {\n   dayjs.extend(relativeTime);\n   const history = useHistory();\n   const [page, setPage] = useState(1);\n   const [limit, setLimit] = useState(5);\n   const [sort, setSort] = useState({ field: null, order: -1 });\n   const [search, setSearch] = useState('');\n   const debouncedSearchValue = useDebounce(search, { wait: 500 });\n\n   const alert = useAlert();\n   const queryClient = useQueryClient();\n\n   const query = useQuery(['expenses/khaata', page, limit, sort.field, sort.order], () =>\n      get('/expenses/khaata', page, limit, sort.field, sort.order)\n   );\n\n   // const handleOnClickView = (obj) => {\n   //    history.push({ pathname: `/expenses/khaata/${obj._id}`, search: `?type=view` });\n   // };\n\n   const alertMarkup = alert.getAlert();\n\n   const handleSort = (key) => {\n      setSort((prev) => ({ field: key, order: prev.order * -1 }));\n   };\n\n   useEffect(() => {\n      if (page > query.data?.totalPages) {\n         setPage((prev) => prev - 1);\n      }\n   }, [page, query.data?.totalPages]);\n\n   return (\n      <>\n         <PageTItle activeMenu=\"khaata\" motherMenu=\"Diamond Tiles\" />\n         {alertMarkup ? (\n            <Row>\n               <Col lg={12}>{alertMarkup}</Col>\n            </Row>\n         ) : null}\n         <div className=\"row\">\n            <Col lg={12}>\n               <Card>\n                  <When condition={query.isLoading}>\n                     <SpinnerOverlay />\n                  </When>\n                  <Card.Header>\n                     <Card.Title>Khaata</Card.Title>\n                  </Card.Header>\n                  <Card.Body>\n                     <If condition={query.data?.totalDocs > 0}>\n                        <Then>\n                           <Table className=\"tw-relative\" responsive>\n                              <thead>\n                                 <tr>\n                                    <th className=\"width80\">\n                                       <strong>#</strong>\n                                    </th>\n                                    <th>\n                                       <strong className=\"tw-cursor-pointer\" onClick={() => handleSort('customer')}>\n                                          CUSTOMER\n                                          <span>\n                                             <When condition={sort.field !== 'customer'}>\n                                                <FaSort className=\"d-inline mx-1\" />\n                                             </When>\n                                             <When condition={sort.field === 'customer' && sort.order === -1}>\n                                                <FaSortDown className=\"d-inline mx-1\" />\n                                             </When>\n                                             <When condition={sort.field === 'customer' && sort.order === 1}>\n                                                <FaSortUp className=\"d-inline mx-1\" />\n                                             </When>\n                                          </span>\n                                       </strong>\n                                    </th>\n                                    <th>\n                                       <strong className=\"tw-cursor-pointer\" onClick={() => handleSort('inventory')}>\n                                          INVENTORY\n                                          <span>\n                                             <When condition={sort.field !== 'inventory'}>\n                                                <FaSort className=\"d-inline mx-1\" />\n                                             </When>\n                                             <When condition={sort.field === 'inventory' && sort.order === -1}>\n                                                <FaSortDown className=\"d-inline mx-1\" />\n                                             </When>\n                                             <When condition={sort.field === 'inventory' && sort.order === 1}>\n                                                <FaSortUp className=\"d-inline mx-1\" />\n                                             </When>\n                                          </span>\n                                       </strong>\n                                    </th>\n                                    <th>\n                                       <strong className=\"tw-cursor-pointer\" onClick={() => handleSort('quantity')}>\n                                          QUANTITY\n                                          <span>\n                                             <When condition={sort.field !== 'quantity'}>\n                                                <FaSort className=\"d-inline mx-1\" />\n                                             </When>\n                                             <When condition={sort.field === 'quantity' && sort.order === -1}>\n                                                <FaSortDown className=\"d-inline mx-1\" />\n                                             </When>\n                                             <When condition={sort.field === 'quantity' && sort.order === 1}>\n                                                <FaSortUp className=\"d-inline mx-1\" />\n                                             </When>\n                                          </span>\n                                       </strong>\n                                    </th>\n                                    <th>\n                                       <strong className=\"tw-cursor-pointer\" onClick={() => handleSort('retailPrice')}>\n                                          RETAIL PRICE\n                                          <span>\n                                             <When condition={sort.field !== 'retailPrice'}>\n                                                <FaSort className=\"d-inline mx-1\" />\n                                             </When>\n                                             <When condition={sort.field === 'retailPrice' && sort.order === -1}>\n                                                <FaSortDown className=\"d-inline mx-1\" />\n                                             </When>\n                                             <When condition={sort.field === 'retailPrice' && sort.order === 1}>\n                                                <FaSortUp className=\"d-inline mx-1\" />\n                                             </When>\n                                          </span>\n                                       </strong>\n                                    </th>\n                                    <th>\n                                       <strong className=\"tw-cursor-pointer\" onClick={() => handleSort('paid')}>\n                                          PAID\n                                          <span>\n                                             <When condition={sort.field !== 'paid'}>\n                                                <FaSort className=\"d-inline mx-1\" />\n                                             </When>\n                                             <When condition={sort.field === 'paid' && sort.order === -1}>\n                                                <FaSortDown className=\"d-inline mx-1\" />\n                                             </When>\n                                             <When condition={sort.field === 'paid' && sort.order === 1}>\n                                                <FaSortUp className=\"d-inline mx-1\" />\n                                             </When>\n                                          </span>\n                                       </strong>\n                                    </th>\n                                 </tr>\n                              </thead>\n                              <tbody>\n                                 {query.data &&\n                                    query.data?.docs.map((e, index) => (\n                                       <tr key={`${e._id}`}>\n                                          <td>\n                                             <strong>{query.data.pagingCounter * (index + 1)}</strong>\n                                          </td>\n                                          <td>{e?.customer?.name ?? 'N/A'}</td>\n                                          <td>{e?.inventory?.title ?? 'N/A'}</td>\n                                          <td>{e?.quantity ?? 'N/a'}</td>\n                                          <td>{e?.retailPrice ?? 'N/A'}</td>\n                                          <td>{e?.paid ?? 'N/A'}</td>\n                                          <td>\n                                             <OverlayTrigger\n                                                trigger={['hover', 'hover']}\n                                                placement=\"top\"\n                                                overlay={\n                                                   <Popover className=\"tw-border-gray-500\">\n                                                      <Popover.Content>{`Created by ${e.createdBy ?? 'N/A'} ${\n                                                         dayjs(e.createdAt).diff(dayjs(), 'day', true) > 7\n                                                            ? `at ${dayjs(e.createdAt).format('DD-MMM-YYYY')}`\n                                                            : dayjs(e.createdAt).fromNow()\n                                                      }.`}</Popover.Content>\n                                                   </Popover>\n                                                }\n                                             >\n                                                <AiOutlineQuestionCircle className=\"tw-cursor-pointer\" />\n                                             </OverlayTrigger>\n                                          </td>\n                                          <td>\n                                             <Button\n                                                variant=\"danger\"\n                                                size=\"sm\"\n                                                icon={AiOutlineClear}\n                                                onClick={() => {}}\n                                             >\n                                                Clear\n                                             </Button>\n                                          </td>\n                                       </tr>\n                                    ))}\n                              </tbody>\n                           </Table>\n                        </Then>\n                        <Else>\n                           <When condition={!query.isLoading && !debouncedSearchValue}>\n                              <p className=\"tw-m-0\">No sales created</p>\n                           </When>\n                           <When condition={!query.isLoading && debouncedSearchValue}>\n                              <p className=\"tw-m-0\">No result found!</p>\n                           </When>\n                        </Else>\n                     </If>\n                  </Card.Body>\n               </Card>\n            </Col>\n         </div>\n         <When condition={limit > 5 ? true : query.data?.totalPages > 1}>\n            <Pagination\n               page={page}\n               onPageChange={setPage}\n               onLimitChange={setLimit}\n               {..._.omit(query.data, ['docs'])}\n               isLimitDisabled={query.isLoading}\n            />\n         </When>\n      </>\n   );\n};\n\nexport default Khaata;\n","/home/muneeb/dev/diamond-tiles-frontend/src/jsx/layouts/index.js",["314","315"],"import React, { memo, useEffect } from 'react';\nimport { setLogin, setLogout } from 'store/auth/actions';\nimport { connect } from 'react-redux';\nimport Nav from './nav';\nimport Footer from './Footer';\nimport { get } from '../helpers';\n\nconst token = localStorage.getItem('auth_token');\n\nconst Layout = ({ children: Children, isPublic, setUser, logout }) => {\n   const getUserProfile = async () => {\n      try {\n         const res = await get(`/auth/decode/${token}`);\n         if (!res?.isConfirmed) {\n            logout();\n            localStorage.clear();\n            window.location = 'page-login';\n         } else {\n            setUser({ ...res, auth_token: token });\n         }\n      } catch (error) {\n         logout();\n         setUser({});\n         localStorage.clear();\n         window.location = 'page-login';\n      }\n   };\n\n   useEffect(() => {\n      if (token) {\n         getUserProfile();\n      }\n   }, [token]);\n\n   const MemoizedNav = memo(Nav);\n   if (isPublic)\n      return (\n         <>\n            <div id=\"main-wrapper\" className=\"show\">\n               <div className=\"container-fluid\">\n                  {/* <Children /> */}\n                  {Children}\n               </div>\n            </div>\n         </>\n      );\n\n   return (\n      <>\n         <div id=\"main-wrapper\" className=\"show\">\n            <MemoizedNav />\n            <div className=\"content-body\">\n               <div className=\"container-fluid\">\n                  {/* <Children /> */}\n                  {Children}\n               </div>\n            </div>\n            <Footer />\n         </div>\n      </>\n   );\n};\nconst mapStateToProps = (state) => ({});\n\nconst mapDispatchToProps = (dispatch) => ({\n   setUser: (payload) => dispatch(setLogin(payload)),\n   logout: () => dispatch(setLogout()),\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Layout);\n","/home/muneeb/dev/diamond-tiles-frontend/src/jsx/pages/expenses/index.js",["316","317","318","319","320"],"import { useDebounce } from 'ahooks';\nimport dayjs from 'dayjs';\nimport relativeTime from 'dayjs/plugin/relativeTime';\nimport Button from 'jsx/components/Button';\nimport Pagination from 'jsx/components/Pagination';\nimport SpinnerOverlay from 'jsx/components/SpinnerOverlay';\nimport { del, get, useAlert, useMutation, useQuery } from 'jsx/helpers';\nimport { userRoles } from 'jsx/helpers/enums';\nimport PageTItle from 'jsx/layouts/PageTitle';\nimport _ from 'lodash';\nimport React, { useState, useEffect } from 'react';\nimport { ButtonGroup, Card, Col, OverlayTrigger, Popover, Row, Table } from 'react-bootstrap';\nimport { AiFillDelete, AiFillEdit, AiFillEye, AiFillPlusCircle, AiOutlineQuestionCircle } from 'react-icons/ai';\nimport { FaSort, FaSortDown, FaSortUp } from 'react-icons/fa';\nimport { Else, If, Then, When } from 'react-if';\nimport { useQueryClient } from 'react-query';\nimport { connect } from 'react-redux';\nimport { useHistory } from 'react-router-dom';\nimport swal from 'sweetalert';\nimport ExpenseTypes from '../expenseTypes';\nimport Salaries from '../salaries';\n\nconst Expenses = (props) => {\n   dayjs.extend(relativeTime);\n   const history = useHistory();\n   const [page, setPage] = useState(1);\n   const [limit, setLimit] = useState(5);\n   const [sort, setSort] = useState({ field: null, order: -1 });\n   const [search, setSearch] = useState('');\n   const debouncedSearchValue = useDebounce(search, { wait: 500 });\n\n   const alert = useAlert();\n   const queryClient = useQueryClient();\n\n   const query = useQuery(['expenses', page, limit, sort.field, sort.order, debouncedSearchValue], () =>\n      get('/expenses', page, limit, sort.field, sort.order, debouncedSearchValue)\n   );\n   const deleteMutation = useMutation((id) => del(`/expenses/id/${id}`), {\n      onSuccess: async () => {\n         await queryClient.invalidateQueries('expenses');\n         alert.setAlert({\n            message: 'Sale deleted successfully',\n            variant: 'success',\n         });\n      },\n      onError: (err) => {\n         alert.setErrorAlert({ message: 'Unable to delete sale', err });\n      },\n   });\n\n   const handleOnClickEdit = (obj) => {\n      history.push({ pathname: `/expenses/${obj._id}`, search: `?type=edit` });\n   };\n\n   const handleOnClickView = (obj) => {\n      history.push({ pathname: `/expenses/${obj._id}`, search: `?type=view` });\n   };\n   const handleOnClickAdd = () => {\n      history.push('/expenses/add');\n   };\n\n   const handleOnClickDelete = (id) => {\n      swal({\n         title: 'Are you sure?',\n         text: 'Once deleted, you will not be able to recover it!',\n         icon: 'warning',\n         buttons: true,\n         dangerMode: true,\n      }).then((willDelete) => {\n         if (willDelete) {\n            deleteMutation.mutate(id);\n         }\n      });\n   };\n\n   const alertMarkup = alert.getAlert();\n\n   const handleSort = (key) => {\n      setSort((prev) => ({ field: key, order: prev.order * -1 }));\n   };\n   useEffect(() => {\n      if (page > query.data?.totalPages) {\n         setPage((prev) => prev - 1);\n      }\n   }, [page, query.data?.totalPages]);\n\n   return (\n      <>\n         <PageTItle activeMenu=\"Expenses\" motherMenu=\"Diamond Tiles\" />\n         <div className=\"row my-3\">\n            <When condition={props.user?.role !== userRoles.CASHIER}>\n               <div className=\"col-xl-5  my-2\">\n                  <Salaries />\n               </div>\n            </When>\n            <div className={props?.user?.role == userRoles.CASHIER ? 'col-xl-12 my-2' : 'col-xl-7  my-2'}>\n               <ExpenseTypes />\n            </div>\n         </div>\n         {alertMarkup ? (\n            <Row>\n               <Col lg={12}>{alertMarkup}</Col>\n            </Row>\n         ) : null}\n         <div className=\"row\">\n            <Col lg={12}>\n               <Card>\n                  <When condition={query.isLoading || deleteMutation.isLoading}>\n                     <SpinnerOverlay />\n                  </When>\n                  <Card.Header>\n                     <Card.Title>Manage Expenses</Card.Title>\n                     <ButtonGroup className=\"tw-float-right\">\n                        <input\n                           type=\"text\"\n                           className=\"input-rounded tw-rounded-r-none tw-pl-6 tw-shadow-inner tw-ring-1 \"\n                           placeholder=\"Search Expenses...\"\n                           disabled={deleteMutation.isLoading}\n                           onChange={(e) => setSearch(e.target.value)}\n                        />\n                        <Button size=\"sm\" variant=\"primary\" icon={AiFillPlusCircle} onClick={handleOnClickAdd}>\n                           Add New Expense\n                        </Button>\n                     </ButtonGroup>\n                  </Card.Header>\n                  <Card.Body>\n                     <If condition={query.data?.totalDocs > 0}>\n                        <Then>\n                           <Table className=\"tw-relative\" responsive>\n                              <thead>\n                                 <tr>\n                                    <th className=\"width80\">\n                                       <strong>#</strong>\n                                    </th>\n                                    <th>\n                                       <strong className=\"tw-cursor-pointer\" onClick={() => handleSort('title')}>\n                                          TITLE\n                                          <span>\n                                             <When condition={sort.field !== 'title'}>\n                                                <FaSort className=\"d-inline mx-1\" />\n                                             </When>\n                                             <When condition={sort.field === 'title' && sort.order === -1}>\n                                                <FaSortDown className=\"d-inline mx-1\" />\n                                             </When>\n                                             <When condition={sort.field === 'title' && sort.order === 1}>\n                                                <FaSortUp className=\"d-inline mx-1\" />\n                                             </When>\n                                          </span>\n                                       </strong>\n                                    </th>\n                                    <th>\n                                       <strong className=\"tw-cursor-pointer\" onClick={() => handleSort('type')}>\n                                          TYPE\n                                          <span>\n                                             <When condition={sort.field !== 'type'}>\n                                                <FaSort className=\"d-inline mx-1\" />\n                                             </When>\n                                             <When condition={sort.field === 'type' && sort.order === -1}>\n                                                <FaSortDown className=\"d-inline mx-1\" />\n                                             </When>\n                                             <When condition={sort.field === 'type' && sort.order === 1}>\n                                                <FaSortUp className=\"d-inline mx-1\" />\n                                             </When>\n                                          </span>\n                                       </strong>\n                                    </th>\n                                    <th>\n                                       <strong className=\"tw-cursor-pointer\" onClick={() => handleSort('amount')}>\n                                          AMOUNT\n                                          <span>\n                                             <When condition={sort.field !== 'amount'}>\n                                                <FaSort className=\"d-inline mx-1\" />\n                                             </When>\n                                             <When condition={sort.field === 'amount' && sort.order === -1}>\n                                                <FaSortDown className=\"d-inline mx-1\" />\n                                             </When>\n                                             <When condition={sort.field === 'amount' && sort.order === 1}>\n                                                <FaSortUp className=\"d-inline mx-1\" />\n                                             </When>\n                                          </span>\n                                       </strong>\n                                    </th>\n                                 </tr>\n                              </thead>\n                              <tbody>\n                                 {query.data?.docs.map((e, index) => (\n                                    <tr key={`${e._id}`}>\n                                       <td>\n                                          <strong>{query.data.pagingCounter * (index + 1)}</strong>\n                                       </td>\n                                       <td>{e?.title ?? 'N/A'}</td>\n                                       <td>{e?.type?.title ?? 'N/A'}</td>\n                                       <td>{e?.amount ?? 'N/A'}</td>\n                                       <td>\n                                          <OverlayTrigger\n                                             trigger={['hover', 'hover']}\n                                             placement=\"top\"\n                                             overlay={\n                                                <Popover className=\"tw-border-gray-500\">\n                                                   <Popover.Content>{`Created by ${e.createdBy ?? 'N/A'} ${\n                                                      dayjs(e.createdAt).diff(dayjs(), 'day', true) > 7\n                                                         ? `at ${dayjs(e.createdAt).format('DD-MMM-YYYY')}`\n                                                         : dayjs(e.createdAt).fromNow()\n                                                   }.`}</Popover.Content>\n                                                </Popover>\n                                             }\n                                          >\n                                             <AiOutlineQuestionCircle className=\"tw-cursor-pointer\" />\n                                          </OverlayTrigger>\n                                       </td>\n                                       <td>\n                                          <ButtonGroup>\n                                             <Button\n                                                variant=\"dark\"\n                                                size=\"sm\"\n                                                icon={AiFillEye}\n                                                onClick={() => handleOnClickView(e)}\n                                             >\n                                                View\n                                             </Button>\n                                             <When condition={props.user?.role !== userRoles.CASHIER}>\n                                                <Button\n                                                   variant=\"danger\"\n                                                   size=\"sm\"\n                                                   icon={AiFillDelete}\n                                                   onClick={() => handleOnClickDelete(e._id)}\n                                                >\n                                                   Delete\n                                                </Button>\n                                             </When>\n                                          </ButtonGroup>\n                                       </td>\n                                    </tr>\n                                 ))}\n                              </tbody>\n                           </Table>\n                        </Then>\n                        <Else>\n                           <When condition={!query.isLoading && !debouncedSearchValue}>\n                              <p className=\"tw-m-0\">No Expenses created</p>\n                           </When>\n                           <When condition={!query.isLoading && debouncedSearchValue}>\n                              <p className=\"tw-m-0\">No result found!</p>\n                           </When>\n                        </Else>\n                     </If>\n                  </Card.Body>\n               </Card>\n            </Col>\n         </div>\n         <When condition={limit > 5 ? true : query.data?.totalPages > 1}>\n            <Pagination\n               page={page}\n               onPageChange={setPage}\n               onLimitChange={setLimit}\n               {..._.omit(query.data, ['docs'])}\n               isLimitDisabled={query.isLoading || deleteMutation.isLoading}\n            />\n         </When>\n      </>\n   );\n};\n\nconst mapStateToProps = ({ auth }) => ({\n   user: auth.user,\n});\n\nconst mapDispatchToProps = {};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Expenses);\n","/home/muneeb/dev/diamond-tiles-frontend/src/jsx/pages/customers/index.js",[],"/home/muneeb/dev/diamond-tiles-frontend/src/jsx/pages/products/index.js",[],"/home/muneeb/dev/diamond-tiles-frontend/src/jsx/pages/sale/index.js",["321","322","323","324"],"import { useDebounce } from 'ahooks';\nimport dayjs from 'dayjs';\nimport relativeTime from 'dayjs/plugin/relativeTime';\nimport Button from 'jsx/components/Button';\nimport Pagination from 'jsx/components/Pagination';\nimport SpinnerOverlay from 'jsx/components/SpinnerOverlay';\nimport { del, get, useAlert, useMutation, useQuery } from 'jsx/helpers';\nimport { userRoles } from 'jsx/helpers/enums';\nimport PageTItle from 'jsx/layouts/PageTitle';\nimport _ from 'lodash';\nimport React, { useState, useEffect } from 'react';\nimport { ButtonGroup, Card, Col, OverlayTrigger, Popover, Row, Table } from 'react-bootstrap';\nimport {\n   AiFillDelete,\n   AiFillEdit,\n   AiFillEye,\n   AiFillPlusCircle,\n   AiOutlineHistory,\n   AiOutlineQuestionCircle,\n} from 'react-icons/ai';\nimport { FaSort, FaSortDown, FaSortUp } from 'react-icons/fa';\nimport { Else, If, Then, When } from 'react-if';\nimport { useQueryClient } from 'react-query';\nimport { connect } from 'react-redux';\nimport { useHistory } from 'react-router-dom';\nimport swal from 'sweetalert';\n\nconst Sale = (props) => {\n   dayjs.extend(relativeTime);\n   const history = useHistory();\n   const [page, setPage] = useState(1);\n   const [limit, setLimit] = useState(5);\n   const [sort, setSort] = useState({ field: null, order: -1 });\n   const [search, setSearch] = useState('');\n   const debouncedSearchValue = useDebounce(search, { wait: 500 });\n\n   const alert = useAlert();\n   const queryClient = useQueryClient();\n\n   const query = useQuery(['sales', page, limit, sort.field, sort.order, debouncedSearchValue], () =>\n      get('/sales', page, limit, sort.field, sort.order, debouncedSearchValue)\n   );\n   const deleteMutation = useMutation((id) => del(`/sales/id/${id}`), {\n      onSuccess: async () => {\n         await queryClient.invalidateQueries('sales');\n         alert.setAlert({\n            message: 'Sale deleted successfully',\n            variant: 'success',\n         });\n      },\n      onError: (err) => {\n         alert.setErrorAlert({ message: 'Unable to delete sale', err });\n      },\n   });\n\n   const handleOnClickEdit = (obj) => {\n      history.push({ pathname: `/sales/${obj._id}`, search: `?type=edit` });\n   };\n\n   const handleOnClickView = (obj) => {\n      history.push({ pathname: `/sales/${obj._id}`, search: `?type=view` });\n   };\n   const handleOnClickAdd = () => {\n      history.push('/sale/add');\n   };\n\n   const handleOnClickDelete = (id) => {\n      swal({\n         title: 'Are you sure?',\n         text: 'Once deleted, you will not be able to recover it!',\n         icon: 'warning',\n         buttons: true,\n         dangerMode: true,\n      }).then((willDelete) => {\n         if (willDelete) {\n            deleteMutation.mutate(id);\n         }\n      });\n   };\n\n   const alertMarkup = alert.getAlert();\n\n   const handleSort = (key) => {\n      setSort((prev) => ({ field: key, order: prev.order * -1 }));\n   };\n\n   useEffect(() => {\n      if (page > query.data?.totalPages) {\n         setPage((prev) => prev - 1);\n      }\n   }, [page, query.data?.totalPages]);\n\n   return (\n      <>\n         <PageTItle activeMenu=\"sales\" motherMenu=\"Diamond Tiles\" />\n         <div className=\"row tw-mb-8\">\n            <div className=\"col-xl-6\">\n               <Button variant=\"primary\" icon={AiFillPlusCircle} onClick={handleOnClickAdd}>\n                  Add New Sale\n               </Button>\n            </div>\n\n            <div className=\"col-xl-6\">\n               {/* <ButtonGroup className=\"tw-float-right\">\n                  <input\n                     type=\"text\"\n                     className=\"input-rounded tw-rounded-r-none tw-pl-6\"\n                     placeholder=\"Search Purchase...\"\n                     disabled={deleteMutation.isLoading}\n                     onChange={(e) => setSearch(e.target.value)}\n                  />\n                  <Button variant=\"secondary\" className=\"btn btn-secondary tw-pl-6\" loading={query.isLoading}>\n                     Search\n                  </Button>\n               </ButtonGroup> */}\n            </div>\n         </div>\n         {alertMarkup ? (\n            <Row>\n               <Col lg={12}>{alertMarkup}</Col>\n            </Row>\n         ) : null}\n         <div className=\"row\">\n            <Col lg={12}>\n               <Card>\n                  <When condition={query.isLoading || deleteMutation.isLoading}>\n                     <SpinnerOverlay />\n                  </When>\n                  <Card.Header>\n                     <Card.Title>Manage Sales</Card.Title>\n                  </Card.Header>\n                  <Card.Body>\n                     <If condition={query.data?.totalDocs > 0}>\n                        <Then>\n                           <Table className=\"tw-relative\" responsive>\n                              <thead>\n                                 <tr>\n                                    <th className=\"width80\">\n                                       <strong>#</strong>\n                                    </th>\n                                    <th>\n                                       <strong className=\"tw-cursor-pointer\" onClick={() => handleSort('customer')}>\n                                          CUSTOMER\n                                          <span>\n                                             <When condition={sort.field !== 'customer'}>\n                                                <FaSort className=\"d-inline mx-1\" />\n                                             </When>\n                                             <When condition={sort.field === 'customer' && sort.order === -1}>\n                                                <FaSortDown className=\"d-inline mx-1\" />\n                                             </When>\n                                             <When condition={sort.field === 'customer' && sort.order === 1}>\n                                                <FaSortUp className=\"d-inline mx-1\" />\n                                             </When>\n                                          </span>\n                                       </strong>\n                                    </th>\n                                    <th>\n                                       <strong className=\"tw-cursor-pointer\" onClick={() => handleSort('inventory')}>\n                                          INVENTORY\n                                          <span>\n                                             <When condition={sort.field !== 'inventory'}>\n                                                <FaSort className=\"d-inline mx-1\" />\n                                             </When>\n                                             <When condition={sort.field === 'inventory' && sort.order === -1}>\n                                                <FaSortDown className=\"d-inline mx-1\" />\n                                             </When>\n                                             <When condition={sort.field === 'inventory' && sort.order === 1}>\n                                                <FaSortUp className=\"d-inline mx-1\" />\n                                             </When>\n                                          </span>\n                                       </strong>\n                                    </th>\n                                    <th>\n                                       <strong className=\"tw-cursor-pointer\" onClick={() => handleSort('quantity')}>\n                                          QUANTITY\n                                          <span>\n                                             <When condition={sort.field !== 'quantity'}>\n                                                <FaSort className=\"d-inline mx-1\" />\n                                             </When>\n                                             <When condition={sort.field === 'quantity' && sort.order === -1}>\n                                                <FaSortDown className=\"d-inline mx-1\" />\n                                             </When>\n                                             <When condition={sort.field === 'quantity' && sort.order === 1}>\n                                                <FaSortUp className=\"d-inline mx-1\" />\n                                             </When>\n                                          </span>\n                                       </strong>\n                                    </th>\n                                    <th>\n                                       <strong className=\"tw-cursor-pointer\" onClick={() => handleSort('retailPrice')}>\n                                          RETAIL PRICE\n                                          <span>\n                                             <When condition={sort.field !== 'retailPrice'}>\n                                                <FaSort className=\"d-inline mx-1\" />\n                                             </When>\n                                             <When condition={sort.field === 'retailPrice' && sort.order === -1}>\n                                                <FaSortDown className=\"d-inline mx-1\" />\n                                             </When>\n                                             <When condition={sort.field === 'retailPrice' && sort.order === 1}>\n                                                <FaSortUp className=\"d-inline mx-1\" />\n                                             </When>\n                                          </span>\n                                       </strong>\n                                    </th>\n                                    <th>\n                                       <strong className=\"tw-cursor-pointer\" onClick={() => handleSort('paid')}>\n                                          PAID\n                                          <span>\n                                             <When condition={sort.field !== 'paid'}>\n                                                <FaSort className=\"d-inline mx-1\" />\n                                             </When>\n                                             <When condition={sort.field === 'paid' && sort.order === -1}>\n                                                <FaSortDown className=\"d-inline mx-1\" />\n                                             </When>\n                                             <When condition={sort.field === 'paid' && sort.order === 1}>\n                                                <FaSortUp className=\"d-inline mx-1\" />\n                                             </When>\n                                          </span>\n                                       </strong>\n                                    </th>\n                                    <th>\n                                       <strong>REMAINING</strong>\n                                    </th>\n                                 </tr>\n                              </thead>\n                              <tbody>\n                                 {query.data &&\n                                    query.data?.docs.map((e, index) => {\n                                       const getRemainig = () => {\n                                          if (!e?.sourcePrice || !e?.paid) return null;\n                                          if (e.sourcePrice === e.paid) return null;\n                                          return e.sourcePrice - e.paid;\n                                       };\n                                       return (\n                                          <tr key={`${e._id}`}>\n                                             <td>\n                                                <strong>{query.data.pagingCounter * (index + 1)}</strong>\n                                             </td>\n                                             <td>{e?.customer?.name ?? 'N/A'}</td>\n                                             <td>{e?.inventory?.modelNumber ?? 'N/A'}</td>\n                                             <td>{e?.quantity ?? 'N/a'}</td>\n                                             <td>{e?.retailPrice ?? 'N/A'}</td>\n                                             <td>{e?.paid ?? 'N/A'}</td>\n                                             <td>{getRemainig()}</td>\n\n                                             <td>\n                                                <OverlayTrigger\n                                                   trigger={['hover', 'hover']}\n                                                   placement=\"top\"\n                                                   overlay={\n                                                      <Popover className=\"tw-border-gray-500\">\n                                                         <Popover.Content>{`Created by ${e.createdBy ?? 'N/A'} ${\n                                                            dayjs(e.createdAt).diff(dayjs(), 'day', true) > 7\n                                                               ? `at ${dayjs(e.createdAt).format('DD-MMM-YYYY')}`\n                                                               : dayjs(e.createdAt).fromNow()\n                                                         }.`}</Popover.Content>\n                                                      </Popover>\n                                                   }\n                                                >\n                                                   <AiOutlineQuestionCircle className=\"tw-cursor-pointer\" />\n                                                </OverlayTrigger>\n                                             </td>\n                                             <td>\n                                                <ButtonGroup>\n                                                   <Button\n                                                      variant=\"dark\"\n                                                      size=\"sm\"\n                                                      icon={AiFillEye}\n                                                      // onClick={() => handleOnClickView(e)}\n                                                   >\n                                                      View\n                                                   </Button>\n                                                   <Button\n                                                      variant=\"warning\"\n                                                      size=\"sm\"\n                                                      icon={AiOutlineHistory}\n                                                      // onClick={() => handleOnClickEdit(e)}\n                                                   >\n                                                      Refund\n                                                   </Button>\n                                                   <When condition={props.user?.role !== userRoles.CASHIER}>\n                                                      <Button\n                                                         variant=\"danger\"\n                                                         size=\"sm\"\n                                                         icon={AiFillDelete}\n                                                         onClick={() => handleOnClickDelete(e._id)}\n                                                      >\n                                                         Delete\n                                                      </Button>\n                                                   </When>\n                                                </ButtonGroup>\n                                             </td>\n                                          </tr>\n                                       );\n                                    })}\n                              </tbody>\n                           </Table>\n                        </Then>\n                        <Else>\n                           <When condition={!query.isLoading && !debouncedSearchValue}>\n                              <p className=\"tw-m-0\">No sales created</p>\n                           </When>\n                           <When condition={!query.isLoading && debouncedSearchValue}>\n                              <p className=\"tw-m-0\">No result found!</p>\n                           </When>\n                        </Else>\n                     </If>\n                  </Card.Body>\n               </Card>\n            </Col>\n         </div>\n         <When condition={limit > 5 ? true : query.data?.totalPages > 1}>\n            <Pagination\n               page={page}\n               onPageChange={setPage}\n               onLimitChange={setLimit}\n               {..._.omit(query.data, ['docs'])}\n               isLimitDisabled={query.isLoading || deleteMutation.isLoading}\n            />\n         </When>\n      </>\n   );\n};\n\nconst mapStateToProps = ({ auth }) => ({\n   user: auth.user,\n});\n\nconst mapDispatchToProps = {};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Sale);\n","/home/muneeb/dev/diamond-tiles-frontend/src/jsx/pages/purchase/index.js",["325","326","327","328"],"import dayjs from 'dayjs';\nimport relativeTime from 'dayjs/plugin/relativeTime';\nimport Button from 'jsx/components/Button';\nimport Pagination from 'jsx/components/Pagination';\nimport SpinnerOverlay from 'jsx/components/SpinnerOverlay';\nimport { del, get, useAlert, useMutation, useQuery } from 'jsx/helpers';\nimport { userRoles } from 'jsx/helpers/enums';\nimport PageTItle from 'jsx/layouts/PageTitle';\nimport _ from 'lodash';\nimport React, { useEffect, useState } from 'react';\nimport { ButtonGroup, Card, Col, OverlayTrigger, Popover, Row, Table } from 'react-bootstrap';\nimport { AiFillDelete, AiFillEdit, AiFillEye, AiFillPlusCircle, AiOutlineQuestionCircle } from 'react-icons/ai';\nimport { FaSort, FaSortDown, FaSortUp } from 'react-icons/fa';\nimport { Else, If, Then, When } from 'react-if';\nimport { useQueryClient } from 'react-query';\nimport { connect } from 'react-redux';\nimport { useHistory } from 'react-router-dom';\nimport swal from 'sweetalert';\n\nconst Purchase = (props) => {\n   dayjs.extend(relativeTime);\n   const history = useHistory();\n   const [page, setPage] = useState(1);\n   const [limit, setLimit] = useState(5);\n   const [sort, setSort] = useState({ field: null, order: -1 });\n\n   const alert = useAlert();\n   const queryClient = useQueryClient();\n\n   const query = useQuery(['inventories', page, limit, sort.field, sort.order], () =>\n      get('/inventories', page, limit, sort.field, sort.order)\n   );\n   const deleteMutation = useMutation((id) => del(`/inventories/id/${id}`), {\n      onSuccess: async () => {\n         await queryClient.invalidateQueries('inventories');\n         alert.setAlert({\n            message: 'Inventory deleted successfully',\n            variant: 'success',\n         });\n      },\n      onError: (err) => {\n         alert.setErrorAlert({ message: 'Unable to delete inventory', err });\n      },\n   });\n\n   const handleOnClickEdit = (obj) => {\n      history.push({ pathname: `/inventories/${obj._id}`, search: `?type=edit` });\n   };\n\n   const handleOnClickView = (obj) => {\n      history.push({ pathname: `/inventories/${obj._id}`, search: `?type=view` });\n   };\n   const handleOnClickAdd = () => {\n      history.push('/purchase/add');\n   };\n\n   const handleOnClickDelete = (id) => {\n      swal({\n         title: 'Are you sure?',\n         text: 'Once deleted, you will not be able to recover it!',\n         icon: 'warning',\n         buttons: true,\n         dangerMode: true,\n      }).then((willDelete) => {\n         if (willDelete) {\n            deleteMutation.mutate(id);\n         }\n      });\n   };\n\n   const alertMarkup = alert.getAlert();\n\n   const handleSort = (key) => {\n      setSort((prev) => ({ field: key, order: prev.order * -1 }));\n   };\n\n   useEffect(() => {\n      if (page > query.data?.totalPages) {\n         setPage((prev) => prev - 1);\n      }\n   }, [page, query.data?.totalPages]);\n\n   return (\n      <>\n         <PageTItle activeMenu=\"purchase\" motherMenu=\"Diamond Tiles\" />\n         <div className=\"row tw-mb-8\">\n            <div className=\"col-xl-6\">\n               <Button variant=\"primary\" icon={AiFillPlusCircle} onClick={handleOnClickAdd}>\n                  Add New Purchase\n               </Button>\n            </div>\n\n            <div className=\"col-xl-6\">\n               {/* <ButtonGroup className=\"tw-float-right\">\n                  <input\n                     type=\"text\"\n                     className=\"input-rounded tw-rounded-r-none tw-pl-6\"\n                     placeholder=\"Search Purchase...\"\n                     disabled={deleteMutation.isLoading}\n                     onChange={(e) => setSearch(e.target.value)}\n                  />\n                  <Button variant=\"secondary\" className=\"btn btn-secondary tw-pl-6\" loading={query.isLoading}>\n                     Search\n                  </Button>\n               </ButtonGroup> */}\n            </div>\n         </div>\n         {alertMarkup ? (\n            <Row>\n               <Col lg={12}>{alertMarkup}</Col>\n            </Row>\n         ) : null}\n         <div className=\"row\">\n            <Col lg={12}>\n               <Card>\n                  <When condition={query.isLoading || deleteMutation.isLoading}>\n                     <SpinnerOverlay />\n                  </When>\n                  <Card.Header>\n                     <Card.Title>Manage Purchase</Card.Title>\n                  </Card.Header>\n                  <Card.Body>\n                     <If condition={query.data?.totalDocs > 0}>\n                        <Then>\n                           <Table className=\"tw-relative\" responsive>\n                              <thead>\n                                 <tr>\n                                    <th className=\"width80\">\n                                       <strong>#</strong>\n                                    </th>\n                                    <th>\n                                       <strong className=\"tw-cursor-pointer\" onClick={() => handleSort('supplier')}>\n                                          SUPPLIER\n                                          <span>\n                                             <When condition={sort.field !== 'supplier'}>\n                                                <FaSort className=\"d-inline mx-1\" />\n                                             </When>\n                                             <When condition={sort.field === 'supplier' && sort.order === -1}>\n                                                <FaSortDown className=\"d-inline mx-1\" />\n                                             </When>\n                                             <When condition={sort.field === 'supplier' && sort.order === 1}>\n                                                <FaSortUp className=\"d-inline mx-1\" />\n                                             </When>\n                                          </span>\n                                       </strong>\n                                    </th>\n                                    <th>\n                                       <strong className=\"tw-cursor-pointer\" onClick={() => handleSort('modelNumber')}>\n                                          MODEL NUMBER\n                                          <span>\n                                             <When condition={sort.field !== 'modelNumber'}>\n                                                <FaSort className=\"d-inline mx-1\" />\n                                             </When>\n                                             <When condition={sort.field === 'modelNumber' && sort.order === -1}>\n                                                <FaSortDown className=\"d-inline mx-1\" />\n                                             </When>\n                                             <When condition={sort.field === 'modelNumber' && sort.order === 1}>\n                                                <FaSortUp className=\"d-inline mx-1\" />\n                                             </When>\n                                          </span>\n                                       </strong>\n                                    </th>\n                                    <th>\n                                       <strong className=\"tw-cursor-pointer\" onClick={() => handleSort('sourcePrice')}>\n                                          PRICE\n                                          <span>\n                                             <When condition={sort.field !== 'sourcePrice'}>\n                                                <FaSort className=\"d-inline mx-1\" />\n                                             </When>\n                                             <When condition={sort.field === 'sourcePrice' && sort.order === -1}>\n                                                <FaSortDown className=\"d-inline mx-1\" />\n                                             </When>\n                                             <When condition={sort.field === 'sourcePrice' && sort.order === 1}>\n                                                <FaSortUp className=\"d-inline mx-1\" />\n                                             </When>\n                                          </span>\n                                       </strong>\n                                    </th>\n                                    <th>\n                                       <strong className=\"tw-cursor-pointer\" onClick={() => handleSort('paid')}>\n                                          PAID\n                                          <span>\n                                             <When condition={sort.field !== 'paid'}>\n                                                <FaSort className=\"d-inline mx-1\" />\n                                             </When>\n                                             <When condition={sort.field === 'paid' && sort.order === -1}>\n                                                <FaSortDown className=\"d-inline mx-1\" />\n                                             </When>\n                                             <When condition={sort.field === 'paid' && sort.order === 1}>\n                                                <FaSortUp className=\"d-inline mx-1\" />\n                                             </When>\n                                          </span>\n                                       </strong>\n                                    </th>\n                                    <th>\n                                       <strong>REMAINING</strong>\n                                    </th>\n                                    <th>\n                                       <strong>QUANTITY</strong>\n                                    </th>\n                                 </tr>\n                              </thead>\n                              <tbody>\n                                 {query.data?.docs.map((e, index) => {\n                                    const getRemainig = () => {\n                                       if (!e?.sourcePrice || !e?.paid) return null;\n                                       if (e.sourcePrice === e.paid) return null;\n                                       return e.sourcePrice - e.paid;\n                                    };\n\n                                    return (\n                                       <tr\n                                          key={`${e._id}`}\n                                          className={e.isRemaining && 'tw-bg-red-400 tw-text-gray-50'}\n                                       >\n                                          <td>\n                                             <strong className={e.isRemaining && 'tw-text-gray-50'}>\n                                                {query.data.pagingCounter * (index + 1)}\n                                             </strong>\n                                          </td>\n                                          <td>{e?.supplier?.name ?? 'N/A'}</td>\n                                          <td>{e?.product?.modelNumber ?? 'N/A'}</td>\n                                          <td>{e?.sourcePrice ?? 'N/a'}</td>\n                                          <td>{e?.paid ?? 'N/A'}</td>\n                                          <td>{getRemainig()}</td>\n                                          <td>{e?.quantity?.single?.[0]}</td>\n\n                                          <td>\n                                             <OverlayTrigger\n                                                trigger={['hover', 'hover']}\n                                                placement=\"top\"\n                                                overlay={\n                                                   <Popover className=\"tw-border-gray-500\">\n                                                      <Popover.Content>{`Created by ${e.createdBy ?? 'N/A'} ${\n                                                         dayjs(e.createdAt).diff(dayjs(), 'day', true) > 7\n                                                            ? `at ${dayjs(e.createdAt).format('DD-MMM-YYYY')}`\n                                                            : dayjs(e.createdAt).fromNow()\n                                                      }.`}</Popover.Content>\n                                                   </Popover>\n                                                }\n                                             >\n                                                <AiOutlineQuestionCircle className=\"tw-cursor-pointer\" />\n                                             </OverlayTrigger>\n                                          </td>\n                                          <td>\n                                             <ButtonGroup>\n                                                {/* <Button\n                                                   variant=\"dark\"\n                                                   size=\"sm\"\n                                                   icon={AiFillEye}\n                                                   onClick={() => handleOnClickView(e)}\n                                                >\n                                                   View\n                                                </Button>\n                                                <Button\n                                                   variant=\"warning\"\n                                                   size=\"sm\"\n                                                   icon={AiFillEdit}\n                                                   onClick={() => handleOnClickEdit(e)}\n                                                >\n                                                   Edit\n                                                </Button> */}\n                                                <When condition={props.user?.role !== userRoles.CASHIER}>\n                                                   <Button\n                                                      variant=\"danger\"\n                                                      size=\"sm\"\n                                                      icon={AiFillDelete}\n                                                      onClick={() => handleOnClickDelete(e._id)}\n                                                   >\n                                                      Delete\n                                                   </Button>\n                                                </When>\n                                             </ButtonGroup>\n                                          </td>\n                                       </tr>\n                                    );\n                                 })}\n                              </tbody>\n                           </Table>\n                        </Then>\n                        <Else>\n                           <When condition={!query.isLoading}>\n                              <p className=\"tw-m-0\">No purchases created</p>\n                           </When>\n                        </Else>\n                     </If>\n                  </Card.Body>\n               </Card>\n            </Col>\n         </div>\n         <When condition={limit > 5 ? true : query.data?.totalPages > 1}>\n            <Pagination\n               page={page}\n               onPageChange={setPage}\n               onLimitChange={setLimit}\n               {..._.omit(query.data, ['docs'])}\n               isLimitDisabled={query.isLoading || deleteMutation.isLoading}\n            />\n         </When>\n      </>\n   );\n};\n\nconst mapStateToProps = ({ auth }) => ({\n   user: auth.user,\n});\n\nconst mapDispatchToProps = {};\nexport default connect(mapStateToProps, mapDispatchToProps)(Purchase);\n","/home/muneeb/dev/diamond-tiles-frontend/src/jsx/pages/suppliers/index.js",[],"/home/muneeb/dev/diamond-tiles-frontend/src/store/auth/actions.js",[],"/home/muneeb/dev/diamond-tiles-frontend/src/jsx/components/CreatableSelect.js",["329","330"],"import Creatable from 'react-select/creatable';\n\nconst selectStyles = {\n   control: (provided, state) => {\n      provided.borderColor = state.menuIsOpen ? '#44bdec' : 'hsl(0, 0%, 80%)';\n      provided.boxShadow = state.menuIsOpen ? '0 0 0 1px #44bdec' : '';\n      provided['&:hover'] = { borderColor: '#44bdec' };\n      provided.justifyContent = 'center';\n      provided.paddingTop = '0.2rem';\n      provided.paddingBottom = '0.2rem';\n\n      return provided;\n   },\n   valueContainer: (provided, state) => {\n      provided.justifyContent = 'center';\n      return provided;\n   },\n   menu: (provided, state) => {\n      provided.textAlign = 'center';\n      return provided;\n   },\n   option: (provided, state) => {\n      provided.backgroundColor = state.isSelected || state.isFocused ? '#44bdec' : 'transparent';\n\n      if (state.isFocused) provided.color = 'white';\n      return provided;\n   },\n};\n\nconst Select = ({ className = '', ...props }) => (\n   <Creatable menuPlacement=\"auto\" className={`tw-w-[auto] ${className}`} styles={selectStyles} {...props} />\n);\n\nexport default Select;\n","/home/muneeb/dev/diamond-tiles-frontend/src/jsx/components/Select.js",["331","332"],"/home/muneeb/dev/diamond-tiles-frontend/src/jsx/components/Button.js",[],"/home/muneeb/dev/diamond-tiles-frontend/src/jsx/components/Pagination.js",["333","334"],"import cls from 'classnames';\nimport { useState } from 'react';\nimport { AiOutlineDoubleLeft, AiOutlineDoubleRight, AiOutlineLeft, AiOutlineRight } from 'react-icons/ai';\nimport Select from './Select';\n\nconst getOption = (v) => ({ value: v, label: v });\nconst options = [getOption(5), getOption(10), getOption(25)];\n\nconst PaginationItem = ({\n   children,\n   className = '',\n   disabled,\n   first = false,\n   last = false,\n   active = false,\n   ...props\n}) => (\n   <li\n      {...props}\n      className={cls(\n         'tw-transition-all tw-cursor-pointer tw-flex tw-items-center tw-text-[#7E7E7E] tw-px-[12px] tw-py-[6px] tw-bg-white tw-border tw-border-solid',\n         className,\n         { 'tw-border-[#44bdec] tw-bg-[#44bdec] tw-text-white': active },\n         { 'tw-cursor-not-allowed': disabled },\n         { 'hover:tw-border-[#44bdec] hover:tw-bg-[#44bdec] hover:tw-text-white': !disabled },\n         { 'tw-rounded-l-md': first },\n         { 'tw-rounded-r-md': last }\n      )}\n   >\n      {children}\n   </li>\n);\n\nconst FirstPage = (props) => (\n   <PaginationItem first {...props}>\n      <AiOutlineDoubleLeft />\n   </PaginationItem>\n);\n\nconst PrevPage = (props) => (\n   <PaginationItem {...props}>\n      <AiOutlineLeft />\n   </PaginationItem>\n);\n\nconst EllipsisPage = (props) => (\n   <PaginationItem disabled {...props}>\n      ...\n   </PaginationItem>\n);\n\nconst NextPage = (props) => (\n   <PaginationItem {...props}>\n      <AiOutlineRight />\n   </PaginationItem>\n);\n\nconst LastPage = (props) => (\n   <PaginationItem last {...props}>\n      <AiOutlineDoubleRight />\n   </PaginationItem>\n);\n\nconst Page = ({ children, ...props }) => <PaginationItem {...props}>{children}</PaginationItem>;\n\nconst Pagination = ({\n   isLimitDisabled,\n   page,\n   onPageChange,\n   onLimitChange,\n   totalPages,\n   hasNextPage,\n   hasPrevPage,\n   totalDocs,\n}) => {\n   const [option, setOption] = useState(getOption(5));\n\n   const renderPagination = () => {\n      const pages = [];\n\n      const handleFirstPage = () => {\n         if (page > 1) onPageChange(1);\n      };\n\n      const handlePrevPage = () => {\n         if (page > 1) onPageChange((prev) => prev - 1);\n      };\n\n      const handleNextPage = () => {\n         if (page < totalPages) onPageChange((prev) => prev + 1);\n      };\n\n      const handleLastPage = () => {\n         if (page < totalPages) onPageChange(totalPages);\n      };\n\n      pages.push(<FirstPage disabled={page === 1} onClick={handleFirstPage} />);\n      pages.push(<PrevPage disabled={page === 1} onClick={handlePrevPage} />);\n\n      for (let currPage = 0; currPage < totalPages; currPage++) {\n         pages.push(\n            <Page active={page === currPage + 1} onClick={() => onPageChange(currPage + 1)}>\n               {currPage + 1}\n            </Page>\n         );\n      }\n\n      pages.push(<NextPage disabled={!hasNextPage} onClick={handleNextPage} />);\n      pages.push(<LastPage disabled={!hasNextPage} onClick={handleLastPage} />);\n\n      return pages;\n   };\n\n   return (\n      <div className=\"tw-flex tw-flex-col tw-items-center tw-gap-3 tw-overflow-visible\">\n         <p className=\"tw-m-0\">{`Showing ${\n            // eslint-disable-next-line no-nested-ternary\n            totalPages === page ? totalDocs : page * option.value > totalDocs ? totalDocs : page * option.value\n         } of ${totalDocs}`}</p>\n         <ul className=\"tw-flex \">{renderPagination()}</ul>\n         <Select\n            isDisabled={isLimitDisabled}\n            className=\"tw-mb-6\"\n            options={options}\n            placeholder=\"Select Page Size\"\n            value={option}\n            onChange={(opt) => {\n               setOption(opt);\n               onLimitChange(opt.value);\n            }}\n         />\n      </div>\n   );\n};\n\nexport default Pagination;\n","/home/muneeb/dev/diamond-tiles-frontend/src/jsx/components/SpinnerOverlay.js",[],"/home/muneeb/dev/diamond-tiles-frontend/src/jsx/components/ModalWrapper.js",[],"/home/muneeb/dev/diamond-tiles-frontend/src/jsx/layouts/PageTitle.js",[],"/home/muneeb/dev/diamond-tiles-frontend/src/jsx/components/invoice.js",[],"/home/muneeb/dev/diamond-tiles-frontend/src/jsx/layouts/Footer.js",[],"/home/muneeb/dev/diamond-tiles-frontend/src/jsx/helpers/index.js",[],"/home/muneeb/dev/diamond-tiles-frontend/src/jsx/pages/salaries/index.js",[],"/home/muneeb/dev/diamond-tiles-frontend/src/jsx/pages/units/index.js",["335","336","337","338","339","340","341","342","343","344","345"],"import useUrlState from '@ahooksjs/use-url-state';\nimport dayjs from 'dayjs';\nimport relativeTime from 'dayjs/plugin/relativeTime';\nimport Button from 'jsx/components/Button';\nimport ModalWrapper from 'jsx/components/ModalWrapper';\nimport SpinnerOverlay from 'jsx/components/SpinnerOverlay';\nimport { del, get, post, useAlert, useMutation, useQuery } from 'jsx/helpers';\nimport PageTItle from 'jsx/layouts/PageTitle';\nimport React, { useEffect, useMemo, useState } from 'react';\nimport { ButtonGroup, Card, Col, OverlayTrigger, Popover, Row, Table } from 'react-bootstrap';\nimport { AiFillDelete, AiFillPlusCircle, AiOutlineQuestionCircle, AiFillEye } from 'react-icons/ai';\nimport { Else, If, Then, When } from 'react-if';\nimport { useQueryClient } from 'react-query';\nimport swal from 'sweetalert';\nimport { useHistory } from 'react-router-dom';\nimport { useFormik } from 'formik';\nimport { connect } from 'react-redux';\nimport { userRoles } from 'jsx/helpers/enums';\nimport CreatableSelect from '../../components/CreatableSelect';\n\nconst Units = (props) => {\n   const history = useHistory();\n   dayjs.extend(relativeTime);\n   const [page, setPage] = useState(1);\n   const [limit, setLimit] = useState(5);\n   const [urlState, setUrlState] = useUrlState({});\n   const [search, setSearch] = useState('');\n\n   const [showModal, setShowModal] = useState(false);\n   const [selectedRow, setSelectedRow] = useState(null);\n\n   const alert = useAlert();\n\n   const queryClient = useQueryClient();\n\n   const query = useQuery(['units', page, limit, search], () => get('/units', page, limit, '', '', search));\n   const getTypes = useQuery('types', () => get('/types'));\n   const deleteMutation = useMutation((id) => del(`/units/id/${id}`), {\n      onSuccess: async () => {\n         await queryClient.invalidateQueries('units');\n         alert.setAlert({\n            message: 'Unit deleted successfully',\n            variant: 'success',\n         });\n      },\n      onError: (err) => {\n         alert.setErrorAlert({ message: 'Unable to delete Unit', err });\n      },\n   });\n\n   const postMutation = useMutation((payload) => post('/units', payload), {\n      onSuccess: () => {\n         setShowModal(false);\n         setUrlState({});\n         query.refetch();\n      },\n      onError: (err) => {\n         alert.setErrorAlert({ message: 'Unable to add unit', err });\n      },\n   });\n   const postTypeMutation = useMutation((payload) => post('/types', payload), {\n      onSuccess: async () => {\n         await queryClient.invalidateQueries('types');\n      },\n   });\n\n   const isAdd = useMemo(() => urlState?.action === 'add', [urlState.action]);\n   const mutation = useMemo(() => postMutation, [postMutation]);\n\n   const formik = useFormik({\n      initialValues: {\n         title: '',\n         value: '',\n         type: '',\n      },\n      validateOnChange: false,\n      validateOnBlur: false,\n      onSubmit: (values) => {\n         mutation.mutate(values);\n      },\n   });\n\n   const handleOnClickAdd = () => {\n      setShowModal(true);\n      formik.setFieldValue('title', '');\n      formik.setFieldValue('value', '');\n      formik.setFieldValue('type', '');\n      // setUrlState({ action: 'add' });\n   };\n\n   const handleOnClickDelete = (id) => {\n      swal({\n         title: 'Are you sure?',\n         text: 'Once deleted, you will not be able to recover it!',\n         icon: 'warning',\n         buttons: true,\n         dangerMode: true,\n      }).then((willDelete) => {\n         if (willDelete) {\n            deleteMutation.mutate(id);\n         }\n      });\n   };\n   const handleOnClickView = (id) => {\n      history.push(`/products/units/${id}`);\n   };\n\n   const handleCreateType = (title) => {\n      postTypeMutation.mutate({ title });\n\n      // history.push({ pathname: '/types', search: `?action=add&title=${title}&redirect=/units?action=add` });\n   };\n\n   const alertMarkup = alert.getAlert();\n\n   return (\n      <>\n         {/* <PageTItle activeMenu=\"units\" motherMenu=\"Manage\" /> */}\n         {/* <div className=\"row tw-mb-8\">\n            <div className=\"col-xl-6\">\n               <Button variant=\"primary\" icon={AiFillPlusCircle} onClick={handleOnClickAdd}>\n                  Add New Unit\n               </Button>\n            </div>\n         </div> */}\n         {alertMarkup ? (\n            <Row>\n               <Col lg={12}>{alertMarkup}</Col>\n            </Row>\n         ) : null}\n         <Card className=\"h-100\">\n            <When condition={query.isLoading || deleteMutation.isLoading}>\n               <SpinnerOverlay />\n            </When>\n            <Card.Header>\n               <Card.Title>Manage units</Card.Title>\n               <Button size=\"sm\" variant=\"primary\" icon={AiFillPlusCircle} onClick={handleOnClickAdd}>\n                  Add New Unit\n               </Button>\n            </Card.Header>\n            <Card.Body>\n               <If condition={query.data?.length > 0}>\n                  <Then>\n                     <Table className=\"tw-relative\" responsive>\n                        <thead>\n                           <tr>\n                              <th className=\"width80\">\n                                 <strong>#</strong>\n                              </th>\n                              <th>\n                                 <strong className=\"tw-cursor-pointer\">TITLE</strong>\n                              </th>\n                              <th>\n                                 <strong className=\"tw-cursor-pointer\">VALUE</strong>\n                              </th>\n                              <th>\n                                 <strong className=\"tw-cursor-pointer\">TYPE</strong>\n                              </th>\n                           </tr>\n                        </thead>\n                        <tbody>\n                           {query.data?.map((e, index) => (\n                              <tr key={`${e._id}`}>\n                                 <td>\n                                    <strong>{index + 1}</strong>\n                                 </td>\n                                 <td>{e.title}</td>\n                                 <td>{e.value}</td>\n                                 <td>{(e.type && e.type?.title) ?? 'N/A'}</td>\n                                 <td>\n                                    <OverlayTrigger\n                                       trigger={['hover', 'hover']}\n                                       placement=\"top\"\n                                       overlay={\n                                          <Popover className=\"tw-border-gray-500\">\n                                             <Popover.Content>{`Created by ${e.createdBy ?? 'N/A'} ${\n                                                dayjs(e.createdAt).diff(dayjs(), 'day', true) > 7\n                                                   ? `at ${dayjs(e.createdAt).format('DD-MMM-YYYY')}`\n                                                   : dayjs(e.createdAt).fromNow()\n                                             }.`}</Popover.Content>\n                                          </Popover>\n                                       }\n                                    >\n                                       <AiOutlineQuestionCircle className=\"tw-cursor-pointer\" />\n                                    </OverlayTrigger>\n                                 </td>\n                                 <When condition={props.user?.role !== userRoles.CASHIER}>\n                                    <td>\n                                       <Button\n                                          variant=\"danger\"\n                                          size=\"sm\"\n                                          icon={AiFillDelete}\n                                          onClick={() => handleOnClickDelete(e._id)}\n                                       />\n                                    </td>\n                                 </When>\n                              </tr>\n                           ))}\n                        </tbody>\n                     </Table>\n                  </Then>\n                  <Else>\n                     <When condition={!query.isLoading}>\n                        <p className=\"tw-m-0\">No units created</p>\n                     </When>\n                  </Else>\n               </If>\n            </Card.Body>\n         </Card>\n\n         {/* ADD Modal */}\n         <ModalWrapper\n            show={showModal}\n            onHide={() => {\n               setShowModal(false);\n               setUrlState({});\n            }}\n            title=\"Add New Unit\"\n            isLoading={query.isLoading || postMutation.isLoading}\n            size=\"md\"\n            onSubmit={formik.handleSubmit}\n            submitButtonText=\"Confirm\"\n         >\n            <When condition={getTypes.isLoading}>\n               <SpinnerOverlay />\n            </When>\n            <form onSubmit={formik.handleSubmit}>\n               <div className=\"row\">\n                  <div className=\"form-group col-xl-6\">\n                     <label className=\"col-form-label\">Title</label>\n                     <input\n                        className=\"form-control\"\n                        onChange={formik.handleChange}\n                        type=\"text\"\n                        name=\"title\"\n                        value={formik.values.title}\n                     />\n                  </div>\n               </div>\n               <div className=\"row\">\n                  <div className=\"form-group col-xl-6\">\n                     <label className=\"col-form-label\">Value</label>\n                     <input\n                        className=\"form-control\"\n                        onChange={formik.handleChange}\n                        type=\"text\"\n                        name=\"value\"\n                        value={formik.values.value}\n                     />\n                  </div>\n                  <button type=\"submit\" className=\"tw-invisible\" />\n               </div>\n            </form>\n            <div className=\"row\">\n               <div className=\"form-group col-xl-6\">\n                  <label className=\"col-form-label\">Type</label>\n                  <CreatableSelect\n                     isClearable\n                     onChange={(e) => formik.setFieldValue('type', e?._id)}\n                     options={\n                        getTypes.data?.length > 0 &&\n                        getTypes.data.map((e) => ({ ...e, label: e.title, value: e.title }))\n                     }\n                     onCreateOption={handleCreateType}\n                  />\n               </div>\n            </div>\n         </ModalWrapper>\n      </>\n   );\n};\nconst mapStateToProps = ({ auth }) => ({\n   user: auth.user,\n});\n\nconst mapDispatchToProps = {};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(React.memo(Units));\n","/home/muneeb/dev/diamond-tiles-frontend/src/jsx/pages/types/index.js",["346","347","348"],"import useUrlState from '@ahooksjs/use-url-state';\nimport dayjs from 'dayjs';\nimport relativeTime from 'dayjs/plugin/relativeTime';\nimport Button from 'jsx/components/Button';\nimport ModalWrapper from 'jsx/components/ModalWrapper';\nimport SpinnerOverlay from 'jsx/components/SpinnerOverlay';\nimport { del, get, post, useAlert, useMutation, useQuery } from 'jsx/helpers';\nimport React, { useMemo, useState } from 'react';\nimport { ButtonGroup, Card, Col, OverlayTrigger, Popover, Row, Table } from 'react-bootstrap';\nimport { AiFillDelete, AiFillEye, AiFillPlusCircle, AiOutlineQuestionCircle } from 'react-icons/ai';\nimport { Else, If, Then, When } from 'react-if';\nimport { useQueryClient } from 'react-query';\nimport { useHistory } from 'react-router-dom';\nimport swal from 'sweetalert';\nimport { connect } from 'react-redux';\nimport { userRoles } from 'jsx/helpers/enums';\n\nconst Types = (props) => {\n   const history = useHistory();\n   dayjs.extend(relativeTime);\n   const [urlState, setUrlState] = useUrlState({});\n\n   const [page, setPage] = useState(1);\n   const [limit, setLimit] = useState(5);\n   const [search, setSearch] = useState('');\n   const [showModal, setShowModal] = useState(false);\n   const [title, setTitle] = useState('');\n\n   const alert = useAlert();\n   const queryClient = useQueryClient();\n\n   const query = useQuery('types', () => get('/types', page, limit, '', '', search));\n   const postMutation = useMutation((payload) => post('/types', payload), {\n      onSuccess: async () => {\n         await queryClient.invalidateQueries('units');\n         if (urlState.redirect) {\n            history.replace(urlState.redirect);\n         }\n         setShowModal(false);\n         query.refetch();\n      },\n      onError: (err) => {\n         alert.setErrorAlert({ message: 'Unable to add unit', err });\n      },\n   });\n   const deleteMutation = useMutation((id) => del(`/types/id/${id}`), {\n      onSuccess: async () => {\n         await queryClient.invalidateQueries('types');\n         alert.setAlert({\n            message: 'Type deleted successfully',\n            variant: 'success',\n         });\n      },\n      onError: (err) => {\n         alert.setErrorAlert({ message: 'Unable to delete Type', err });\n      },\n   });\n\n   const mutation = useMemo(() => postMutation, [postMutation]);\n\n   const handleOnClickAdd = () => {\n      setShowModal(true);\n      setTitle('');\n      // setUrlState({ action: 'add' });\n   };\n\n   const handleOnClickDelete = (id) => {\n      swal({\n         title: 'Are you sure?',\n         text: 'Once deleted, you will not be able to recover it!',\n         icon: 'warning',\n         buttons: true,\n         dangerMode: true,\n      }).then((willDelete) => {\n         if (willDelete) {\n            deleteMutation.mutate(id);\n         }\n      });\n   };\n   const handleOnClickView = (id) => {\n      history.push(`/products/types/${id}`);\n   };\n\n   const handleSubmit = (e) => {\n      e.preventDefault();\n      mutation.mutate({ title });\n   };\n   const alertMarkup = alert.getAlert();\n\n   return (\n      <>\n         {alertMarkup ? (\n            <Row>\n               <Col lg={12}>{alertMarkup}</Col>\n            </Row>\n         ) : null}\n         <Card className=\"h-100\">\n            <When condition={query.isLoading || deleteMutation.isLoading}>\n               <SpinnerOverlay />\n            </When>\n            <Card.Header>\n               <Card.Title>Manage types</Card.Title>\n               <Button size=\"sm\" variant=\"primary\" icon={AiFillPlusCircle} onClick={handleOnClickAdd}>\n                  Add New Type\n               </Button>\n            </Card.Header>\n            <Card.Body>\n               <If condition={query.data?.length > 0}>\n                  <Then>\n                     <Table className=\"tw-relative\" responsive>\n                        <thead>\n                           <tr>\n                              <th className=\"width80\">\n                                 <strong>#</strong>\n                              </th>\n                              <th>\n                                 <strong>TITLE</strong>\n                              </th>\n                           </tr>\n                        </thead>\n                        <tbody>\n                           {query.data?.map((e, index) => (\n                              <tr key={`${e._id}`}>\n                                 <td>\n                                    <strong>{index + 1}</strong>\n                                 </td>\n                                 <td>{e.title}</td>\n                                 <td>\n                                    <OverlayTrigger\n                                       trigger={['hover', 'hover']}\n                                       placement=\"top\"\n                                       overlay={\n                                          <Popover className=\"tw-border-gray-500\">\n                                             <Popover.Content>{`Created by ${e.createdBy ?? 'N/A'} ${\n                                                dayjs(e.createdAt).diff(dayjs(), 'day', true) > 7\n                                                   ? `at ${dayjs(e.createdAt).format('DD-MMM-YYYY')}`\n                                                   : dayjs(e.createdAt).fromNow()\n                                             }.`}</Popover.Content>\n                                          </Popover>\n                                       }\n                                    >\n                                       <AiOutlineQuestionCircle className=\"tw-cursor-pointer\" />\n                                    </OverlayTrigger>\n                                 </td>\n                                 <td>\n                                    <ButtonGroup>\n                                       <Button\n                                          variant=\"dark\"\n                                          size=\"sm\"\n                                          icon={AiFillEye}\n                                          onClick={() => handleOnClickView(e._id)}\n                                       />\n                                       <When condition={props.user?.role !== userRoles.CASHIER}>\n                                          <Button\n                                             variant=\"danger\"\n                                             size=\"sm\"\n                                             icon={AiFillDelete}\n                                             onClick={() => handleOnClickDelete(e._id)}\n                                          />\n                                       </When>\n                                    </ButtonGroup>\n                                 </td>\n                              </tr>\n                           ))}\n                        </tbody>\n                     </Table>\n                  </Then>\n                  <Else>\n                     <When condition={!query.isLoading}>\n                        <p className=\"tw-m-0\">No types created</p>\n                     </When>\n                  </Else>\n               </If>\n            </Card.Body>\n         </Card>\n         {/* <When condition={limit > 5 ? true : query.data?.totalPages > 1}>\n            <Pagination\n               page={page}\n               onPageChange={setPage}\n               onLimitChange={setLimit}\n               {..._.omit(query.data)}\n               isLimitDisabled={query.isLoading || deleteMutation.isLoading}\n            />\n         </When> */}\n         <ModalWrapper\n            show={showModal}\n            onHide={() => {\n               setShowModal(false);\n               setUrlState({});\n            }}\n            title=\"Add New Type\"\n            isLoading={query.isLoading || postMutation.isLoading}\n            size=\"md\"\n            onSubmit={handleSubmit}\n            submitButtonText=\"Confirm\"\n         >\n            <form onSubmit={handleSubmit}>\n               <div className=\"row\">\n                  <div className=\"form-group col-xl-6\">\n                     <label className=\"col-form-label\">Title</label>\n                     <input\n                        className=\"form-control\"\n                        onChange={(e) => setTitle(e.target.value)}\n                        type=\"text\"\n                        name=\"title\"\n                        value={title}\n                     />\n                     <button type=\"submit\" className=\"tw-invisible\" />\n                  </div>\n               </div>\n            </form>\n         </ModalWrapper>\n      </>\n   );\n};\n\nconst mapStateToProps = ({ auth }) => ({\n   user: auth.user,\n});\n\nconst mapDispatchToProps = {};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(React.memo(Types));\n","/home/muneeb/dev/diamond-tiles-frontend/src/jsx/layouts/nav/index.js",["349"],"import React, { Fragment, useState } from 'react';\nimport SideBar from './SideBar';\nimport NavHader from './NavHader';\nimport Header from './Header';\nimport ChatBox from '../ChatBox';\n\nconst JobieNav = ({ title }) => {\n   const [toggle, setToggle] = useState('');\n   const onClick = (name) => setToggle(toggle === name ? '' : name);\n   return (\n      <>\n         <NavHader />\n         <SideBar />\n         <Header\n            onNote={() => onClick('chatbox')}\n            onNotification={() => onClick('notification')}\n            onProfile={() => onClick('profile')}\n            toggle={toggle}\n            title={title}\n            onBox={() => onClick('box')}\n         />\n         {/* <ChatBox onClick={() => onClick('chatbox')} toggle={toggle} /> */}\n      </>\n   );\n};\n\nexport default JobieNav;\n","/home/muneeb/dev/diamond-tiles-frontend/src/jsx/pages/expenseTypes/index.js",["350","351"],"import dayjs from 'dayjs';\nimport relativeTime from 'dayjs/plugin/relativeTime';\nimport { useFormik } from 'formik';\nimport Button from 'jsx/components/Button';\nimport ModalWrapper from 'jsx/components/ModalWrapper';\nimport SpinnerOverlay from 'jsx/components/SpinnerOverlay';\nimport { del, get, post, useAlert, useMutation, useQuery } from 'jsx/helpers';\nimport { userRoles } from 'jsx/helpers/enums';\nimport React, { useState } from 'react';\nimport { ButtonGroup, Card, Col, OverlayTrigger, Popover, Row, Table } from 'react-bootstrap';\nimport { AiFillDelete, AiFillPlusCircle, AiOutlineQuestionCircle } from 'react-icons/ai';\nimport { FaSort, FaSortDown, FaSortUp } from 'react-icons/fa';\nimport { Else, If, Then, When } from 'react-if';\nimport { useQueryClient } from 'react-query';\nimport { connect } from 'react-redux';\nimport swal from 'sweetalert';\n\nconst ExpenseTypes = (props) => {\n   dayjs.extend(relativeTime);\n   const [page, setPage] = useState(1);\n   const [limit, setLimit] = useState(5);\n   const [sort, setSort] = useState({ field: null, order: -1 });\n\n   const [showModal, setShowModal] = useState(false);\n\n   const alert = useAlert();\n\n   const queryClient = useQueryClient();\n\n   const query = useQuery(['expenses/types', page, limit, sort.field, sort.order], () =>\n      get('/expenses/types', page, limit, sort.field, sort.order)\n   );\n   const deleteMutation = useMutation((id) => del(`/expenses/types/id/${id}`), {\n      onSuccess: async () => {\n         await queryClient.invalidateQueries('expenses/types');\n         alert.setAlert({\n            message: 'Expense type deleted successfully.',\n            variant: 'success',\n         });\n      },\n      onError: (err) => {\n         alert.setErrorAlert({ message: 'Unable to delete Expense type.', err });\n      },\n   });\n\n   const postMutation = useMutation((payload) => post('/expenses/types', payload), {\n      onSuccess: () => {\n         setShowModal(false);\n         query.refetch();\n      },\n      onError: (err) => {\n         alert.setErrorAlert({ message: 'Unable to add Expense type.', err });\n      },\n   });\n\n   const formik = useFormik({\n      initialValues: {\n         title: '',\n      },\n      validateOnChange: false,\n      validateOnBlur: false,\n      onSubmit: (values) => {\n         postMutation.mutate(values);\n      },\n   });\n\n   const handleOnClickAdd = () => {\n      setShowModal(true);\n      formik.setFieldValue('title', '');\n   };\n\n   const handleOnClickDelete = (id) => {\n      swal({\n         title: 'Are you sure?',\n         text: 'Once deleted, you will not be able to recover it!',\n         icon: 'warning',\n         buttons: true,\n         dangerMode: true,\n      }).then((willDelete) => {\n         if (willDelete) {\n            deleteMutation.mutate(id);\n         }\n      });\n   };\n\n   const handleSort = (key) => {\n      setSort((prev) => ({ field: key, order: prev.order * -1 }));\n   };\n   const alertMarkup = alert.getAlert();\n\n   return (\n      <>\n         {alertMarkup ? (\n            <Row>\n               <Col lg={12}>{alertMarkup}</Col>\n            </Row>\n         ) : null}\n         <Card className=\"h-100\">\n            <When condition={query.isLoading || deleteMutation.isLoading}>\n               <SpinnerOverlay />\n            </When>\n            <Card.Header>\n               <Card.Title>Manage Types</Card.Title>\n               <Button size=\"sm\" variant=\"primary\" icon={AiFillPlusCircle} onClick={handleOnClickAdd}>\n                  Add New Expense Type\n               </Button>\n            </Card.Header>\n            <Card.Body>\n               <If condition={query.data?.length > 0}>\n                  <Then>\n                     <Table className=\"tw-relative\" responsive>\n                        <thead>\n                           <tr>\n                              <th className=\"width80\">\n                                 <strong>#</strong>\n                              </th>\n                              <th className=\"tw-cursor-pointer\" onClick={() => handleSort('title')}>\n                                 <strong className=\"tw-cursor-pointer\">\n                                    TITLE\n                                    <span>\n                                       <When condition={sort.field !== 'title'}>\n                                          <FaSort className=\"d-inline mx-1\" />\n                                       </When>\n                                       <When condition={sort.field === 'title' && sort.order === -1}>\n                                          <FaSortDown className=\"d-inline mx-1\" />\n                                       </When>\n                                       <When condition={sort.field === 'title' && sort.order === 1}>\n                                          <FaSortUp className=\"d-inline mx-1\" />\n                                       </When>\n                                    </span>\n                                 </strong>\n                              </th>\n                           </tr>\n                        </thead>\n                        <tbody>\n                           {query.data?.map((e, index) => (\n                              <tr key={`${e._id}`}>\n                                 <td>\n                                    <strong>{index + 1}</strong>\n                                 </td>\n                                 <td>{e.title}</td>\n                                 <td>\n                                    <OverlayTrigger\n                                       trigger={['hover', 'hover']}\n                                       placement=\"top\"\n                                       overlay={\n                                          <Popover className=\"tw-border-gray-500\">\n                                             <Popover.Content>{`Created by ${e.createdBy ?? 'N/A'} ${\n                                                dayjs(e.createdAt).diff(dayjs(), 'day', true) > 7\n                                                   ? `at ${dayjs(e.createdAt).format('DD-MMM-YYYY')}`\n                                                   : dayjs(e.createdAt).fromNow()\n                                             }.`}</Popover.Content>\n                                          </Popover>\n                                       }\n                                    >\n                                       <AiOutlineQuestionCircle className=\"tw-cursor-pointer\" />\n                                    </OverlayTrigger>\n                                 </td>\n                                 <When condition={props.user?.role !== userRoles.CASHIER}>\n                                    <td>\n                                       <ButtonGroup>\n                                          <Button\n                                             variant=\"danger\"\n                                             size=\"sm\"\n                                             icon={AiFillDelete}\n                                             onClick={() => handleOnClickDelete(e._id)}\n                                          />\n                                       </ButtonGroup>\n                                    </td>\n                                 </When>\n                              </tr>\n                           ))}\n                        </tbody>\n                     </Table>\n                  </Then>\n                  <Else>\n                     <When condition={!query.isLoading}>\n                        <p className=\"tw-m-0\">No types found</p>\n                     </When>\n                  </Else>\n               </If>\n            </Card.Body>\n         </Card>\n\n         {/* ADD Modal */}\n         <ModalWrapper\n            show={showModal}\n            onHide={() => {\n               setShowModal(false);\n            }}\n            title=\"Add New Expense Type\"\n            isLoading={query.isLoading || postMutation.isLoading}\n            size=\"md\"\n            onSubmit={formik.handleSubmit}\n            submitButtonText=\"Confirm\"\n         >\n            <form onSubmit={formik.handleSubmit}>\n               <div className=\"row\">\n                  <div className=\"form-group col-xl-6\">\n                     <label className=\"col-form-label\">Title</label>\n                     <input\n                        className=\"form-control\"\n                        onChange={formik.handleChange}\n                        type=\"text\"\n                        name=\"title\"\n                        value={formik.values.title}\n                     />\n                  </div>\n               </div>\n            </form>\n         </ModalWrapper>\n      </>\n   );\n};\n\nconst mapStateToProps = ({ auth }) => ({\n   user: auth.user,\n});\n\nconst mapDispatchToProps = {};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(React.memo(ExpenseTypes));\n","/home/muneeb/dev/diamond-tiles-frontend/src/jsx/helpers/useAlert.js",["352","353"],"import React, { useCallback, useEffect, useMemo, useRef, useState } from 'react';\nimport { Alert } from 'react-bootstrap';\nimport { When } from 'react-if';\nimport cls from 'classnames';\nimport { getError } from './server';\n\nexport const useAlert = () => {\n   const [isShowing, setIsShowing] = useState(false);\n   const [message, setMessage] = useState('');\n   const [variant, setVariant] = useState('success');\n\n   const callback = useRef(null);\n   const timeout = useRef(null);\n\n   // eslint-disable-next-line arrow-body-style\n   useEffect(() => {\n      return () => {\n         if (timeout.current) clearTimeout(timeout.current);\n      };\n   }, []);\n\n   const resetTimeout = useCallback((duration) => {\n      if (timeout.current) clearTimeout(timeout.current);\n      timeout.current = setTimeout(() => {\n         setIsShowing(false);\n         timeout.current = null;\n         if (callback.current) callback.current();\n      }, duration);\n   }, []);\n\n   const getAlert = useCallback(\n      () =>\n         isShowing ? (\n            <Alert\n               className=\"alert-dismissible fade show\"\n               variant={variant}\n               dismissible\n               onClose={() => setIsShowing(false)}\n            >\n               <p className={cls(`tw-m-0 tw-opacity-60`, { 'tw-text-black': variant === 'success' })}>{message}</p>\n            </Alert>\n         ) : null,\n      [isShowing, message, variant]\n   );\n\n   const setAlert = useCallback(\n      ({ message: msg = '', variant: v = 'success', callback: cb = null, duration: d = 3000 }) => {\n         callback.current = cb;\n         resetTimeout(d);\n         setIsShowing(true);\n         setMessage(msg);\n         setVariant(v);\n      },\n      [resetTimeout]\n   );\n\n   const setErrorAlert = useCallback(\n      ({ message: msg = 'Unable to dispatch action', err, callback: cb = null, duration: d = 6000 }) => {\n         resetTimeout(d);\n         console.log(err.response);\n         const m = (\n            <>\n               <strong>{msg}</strong>\n               <br />\n               {getError(err).map((e, i, a) => (\n                  <React.Fragment key={`error-${i}`}>\n                     <p className=\"tw-m-0\">{e}</p>\n                     {i < a.length - 2 ? <br /> : null}\n                  </React.Fragment>\n               ))}\n            </>\n         );\n\n         callback.current = cb;\n         setIsShowing(true);\n         setMessage(m);\n         setVariant('danger');\n      },\n      [resetTimeout]\n   );\n\n   const alert = useMemo(() => ({ getAlert, setAlert, setErrorAlert }), [getAlert, setAlert, setErrorAlert]);\n\n   return alert;\n};\n","/home/muneeb/dev/diamond-tiles-frontend/src/jsx/helpers/server.js",[],"/home/muneeb/dev/diamond-tiles-frontend/src/jsx/helpers/useQuery.js",[],"/home/muneeb/dev/diamond-tiles-frontend/src/jsx/layouts/ChatBox.js",["354"],"import React, { useState } from 'react';\n\n/// Scroll\nimport PerfectScrollbar from 'react-perfect-scrollbar';\n\nconst ChatBox = ({ onClick, toggle }) => {\n   const [toggleTab, settoggleTab] = useState(window.location.hash.slice(1) ? window.location.hash.slice(1) : 'chat');\n\n   const dataToggle = [\n      { href: '#notes', name: 'Notes' },\n      { href: '#alerts', name: 'Alerts' },\n      { href: '#chat', name: 'Chat' },\n   ];\n\n   return (\n      <div className={`chatbox ${toggle === 'chatbox' ? 'active' : ''}`}>\n         <div className=\"chatbox-close\" label=\"chatbox-close\" role=\"button\" tabIndex=\"0\" onClick={() => onClick()} />\n         <div className=\"custom-tab-1\">\n            <ul className=\"nav nav-tabs\">\n               {dataToggle.map((data, i) => (\n                  <li className=\"nav-item\" key={i}>\n                     <a\n                        className={`nav-link ${toggleTab === data.name.toLocaleLowerCase() ? 'active' : ''}`}\n                        data-toggle=\"tab\"\n                        href={data.href}\n                        onClick={() => settoggleTab(data.name.toLocaleLowerCase())}\n                     >\n                        {data.name}\n                     </a>\n                  </li>\n               ))}\n            </ul>\n            <div className=\"tab-content\">\n               {/* <Chat PerfectScrollbar={PerfectScrollbar} toggle={toggle} toggleTab={toggleTab} />\n               <Notes PerfectScrollbar={PerfectScrollbar} toggle={toggle} toggleTab={toggleTab} />\n               <Alerts PerfectScrollbar={PerfectScrollbar} toggle={toggle} toggleTab={toggleTab} /> */}\n            </div>\n         </div>\n      </div>\n   );\n};\n\nexport default ChatBox;\n","/home/muneeb/dev/diamond-tiles-frontend/src/jsx/layouts/nav/NavHader.js",["355","356"],"import React, { useState } from 'react';\n\n/// React router dom\nimport { Link } from 'react-router-dom';\n\n/// images\nimport logo from '../../../images/logo.png';\nimport logoText from '../../../images/logo-text.png';\n\nconst NavHader = () => {\n   const [toggle, setToggle] = useState(false);\n   return (\n      <div className=\"nav-header\">\n         <Link to=\"/\" className=\"brand-logo\">\n            {/* <img className=\"logo-abbr\" src={logo} alt=\"\" />\n            <img className=\"logo-compact\" src={logoText} alt=\"\" /> */}\n            {/* <img className=\"brand-title\" src={logoText} alt=\"\" /> */}\n            <h1 className=\"brand-title tw-text-2xl tw-text-black tw-font-bold\">Diamond Tiles</h1>\n         </Link>\n\n         <div className=\"nav-control\" role=\"button\" tabIndex=\"0\" onClick={() => setToggle(!toggle)}>\n            <div className={`hamburger ${toggle ? 'is-active' : ''}`}>\n               <span className=\"line\" />\n               <span className=\"line\" />\n               <span className=\"line\" />\n            </div>\n         </div>\n      </div>\n   );\n};\n\nexport default NavHader;\n","/home/muneeb/dev/diamond-tiles-frontend/src/jsx/layouts/nav/Header.js",["357","358","359","360","361"],"import React from 'react';\n/// Image\nimport Avatar from 'react-avatar';\nimport { connect } from 'react-redux';\nimport { Link, useHistory } from 'react-router-dom';\nimport { setLogout } from 'store/auth/actions';\n\nconst pages = ['products', 'suppliers', 'customers', 'users', 'employees', 'purchase', 'sale', 'khaata', 'expenses'];\n\nconst Header = ({ onNote, toggle, onProfile, onNotification, onBox, logout }) => {\n   const history = useHistory();\n   const path = window.location.pathname.split('/');\n   const name = path[path.length - 1].split('-');\n   const filterName = name.length >= 3 ? name.filter((n, i) => i > 0) : name;\n\n   let finalName = '';\n\n   for (const page of pages) {\n      if (filterName.includes(page)) {\n         finalName = filterName.find((f) => f === page);\n         break;\n      }\n   }\n\n   const handleLogout = () => localStorage.clear();\n\n   React.useEffect(() => {\n      const token = localStorage.getItem('auth_token');\n      if (!token) {\n         logout();\n         localStorage.clear();\n         history.push('/page-login');\n      }\n   }, []);\n\n   return (\n      <div className=\"header\">\n         <div className=\"header-content\">\n            <nav className=\"navbar navbar-expand\">\n               <div className=\"collapse navbar-collapse justify-content-between\">\n                  <div className=\"header-left\">\n                     <div className=\"dashboard_bar\" style={{ textTransform: 'capitalize' }}>\n                        {finalName || 'Dashboard'}\n                     </div>\n                  </div>\n                  <ul className=\"navbar-nav header-right\">\n                     <li className=\"nav-item dropdown header-profile\">\n                        <Link\n                           to=\"#\"\n                           role=\"button\"\n                           data-toggle=\"dropdown\"\n                           className={`nav-item dropdown header-profile ${toggle === 'profile' ? 'show' : ''}`}\n                           onClick={() => onProfile()}\n                        >\n                           {/* <img alt=\"Profile\" src={profile} width={20} /> */}\n                           <Avatar name=\"Foo Bar\" size=\"38\" textSizeRatio={2.9} round />\n                        </Link>\n                        <div className={`dropdown-menu dropdown-menu-right ${toggle === 'profile' ? 'show' : ''}`}>\n                           <Link to=\"/\" className=\"dropdown-item ai-icon\" onClick={handleLogout}>\n                              <svg\n                                 id=\"icon-logout\"\n                                 xmlns=\"http://www.w3.org/2000/svg\"\n                                 className=\"text-danger\"\n                                 width={18}\n                                 height={18}\n                                 viewBox=\"0 0 24 24\"\n                                 fill=\"none\"\n                                 stroke=\"currentColor\"\n                                 strokeWidth={2}\n                                 strokeLinecap=\"round\"\n                                 strokeLinejoin=\"round\"\n                              >\n                                 <path d=\"M9 21H5a2 2 0 0 1-2-2V5a2 2 0 0 1 2-2h4\" />\n                                 <polyline points=\"16 17 21 12 16 7\" />\n                                 <line x1={21} y1={12} x2={9} y2={12} />\n                              </svg>\n                              <span className=\"ml-2\">Logout </span>\n                           </Link>\n                        </div>\n                     </li>\n                  </ul>\n               </div>\n            </nav>\n         </div>\n      </div>\n   );\n};\n\nconst mapStateToProps = ({ auth }) => ({});\n\nconst mapDispatchToProps = (dispatch) => ({\n   logout: () => dispatch(setLogout()),\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Header);\n","/home/muneeb/dev/diamond-tiles-frontend/src/jsx/layouts/nav/SideBar.js",["362","363","364"],"/// Menu\nimport MetisMenu from 'metismenujs';\nimport React, { Component, useEffect } from 'react';\n/// Scroll\nimport PerfectScrollbar from 'react-perfect-scrollbar';\n/// Link\nimport { Link, useLocation } from 'react-router-dom';\nimport { When } from 'react-if';\n\nimport { connect } from 'react-redux';\nimport { setLogin } from 'store/auth/actions';\nimport { userRoles } from 'jsx/helpers/enums';\n/// Active menu\nconst manage = ['/employees', '/customers', '/products', '/users', '/types', '/units'];\n\nclass MM extends Component {\n   componentDidMount() {\n      this.$el = this.el;\n      this.mm = new MetisMenu(this.$el);\n   }\n\n   componentWillUnmount() {\n      this.mm.dispose();\n   }\n\n   render() {\n      return (\n         <div className=\"mm-wrapper\">\n            <ul className=\"metismenu\" ref={(el) => (this.el = el)}>\n               {this.props.children}\n            </ul>\n         </div>\n      );\n   }\n}\n\nconst SideBar = (props) => {\n   const { pathname: path } = useLocation();\n\n   useEffect(() => {\n      const btn = document.querySelector('.nav-control');\n      const aaa = document.querySelector('#main-wrapper');\n\n      function toggleFunc() {\n         return aaa.classList.toggle('menu-toggle');\n      }\n\n      btn.addEventListener('click', toggleFunc);\n   }, []);\n\n   return (\n      <div className=\"deznav\">\n         <PerfectScrollbar className=\"deznav-scroll\">\n            <MM className=\"metismenu\" id=\"menu\">\n               <When condition={props.user?.role !== userRoles.CASHIER}>\n                  <li className={path === '/dashboard' ? 'mm-active' : ''}>\n                     <Link className=\"\" to=\"/dashboard\" aria-expanded=\"false\">\n                        <i className=\"flaticon-381-networking\" />\n                        <span className=\"nav-text\">Dashboard</span>\n                     </Link>\n                  </li>\n               </When>\n               <li className={path === '/inventory' ? 'mm-active' : ''}>\n                  <Link className=\"\" to=\"/inventory\" aria-expanded=\"false\">\n                     <i className=\"flaticon-381-notepad\" />\n                     <span className=\"nav-text\">Inventory</span>\n                  </Link>\n               </li>\n               <li className={`${manage.includes(path.slice(1)) ? 'mm-active' : ''}`}>\n                  <Link className=\"has-arrow ai-icon color\" aria-expanded=\"false\">\n                     <i className=\"flaticon-381-notepad\" />\n                     <span className=\"nav-text\">Manage</span>\n                  </Link>\n                  <ul aria-expanded=\"false\">\n                     <li>\n                        <Link to=\"/products\">Products</Link>\n                     </li>\n                     <li>\n                        <Link to=\"/suppliers\">Suppliers</Link>\n                     </li>\n                     <li>\n                        <Link to=\"/customers\">Customers</Link>\n                     </li>\n                     {/* <li>\n                        <Link to=\"/app-calender\">Users</Link>\n                     </li> */}\n                     <When condition={props.user?.role !== userRoles.CASHIER}>\n                        <li>\n                           <Link to=\"/employees\">Employees</Link>\n                        </li>\n                     </When>\n                  </ul>\n               </li>\n               <li className={path === '/purchase' ? 'mm-active' : ''}>\n                  <Link className=\"\" to=\"/purchase\" aria-expanded=\"false\">\n                     <i className=\"flaticon-381-more\" />\n                     <span className=\"nav-text\">Purchase</span>\n                  </Link>\n               </li>\n               <li className={path === '/sale' ? 'mm-active' : ''}>\n                  <Link className=\"\" to=\"/sale\" aria-expanded=\"false\">\n                     <i className=\"flaticon-381-calendar\" />\n                     <span className=\"nav-text\">Sale</span>\n                  </Link>\n               </li>\n               <li className={path === '/khaata' ? 'mm-active' : ''}>\n                  <Link className=\"\" to=\"/khaata\" aria-expanded=\"false\">\n                     <i className=\"flaticon-381-book\" />\n                     <span className=\"nav-text\">Khaata</span>\n                  </Link>\n               </li>\n               <li className={path === '/expenses' ? 'mm-active' : ''}>\n                  <Link className=\"\" to=\"/expenses\" aria-expanded=\"false\">\n                     <i className=\"flaticon-381-briefcase\" />\n                     <span className=\"nav-text\">Expenses</span>\n                  </Link>\n               </li>\n            </MM>\n         </PerfectScrollbar>\n      </div>\n   );\n};\n\nconst mapStateToProps = ({ auth }) => ({\n   user: auth.user,\n});\n\nconst mapDispatchToProps = (dispatch) => ({\n   setLogin: (payload) => dispatch(setLogin(payload)),\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(SideBar);\n",{"ruleId":"365","replacedBy":"366"},{"ruleId":"367","replacedBy":"368"},{"ruleId":"369","replacedBy":"370"},{"ruleId":"371","replacedBy":"372"},{"ruleId":"373","replacedBy":"374"},{"ruleId":"375","severity":1,"message":"376","line":42,"column":26,"nodeType":"377","messageId":"378","endLine":42,"endColumn":61},{"ruleId":"379","severity":1,"message":"380","line":67,"column":28,"nodeType":"381","messageId":"382","endLine":67,"endColumn":38},{"ruleId":"383","severity":1,"message":"384","line":70,"column":28,"nodeType":"385","messageId":"386","endLine":70,"endColumn":40},{"ruleId":"383","severity":1,"message":"384","line":82,"column":28,"nodeType":"385","messageId":"386","endLine":82,"endColumn":40},{"ruleId":"383","severity":1,"message":"387","line":10,"column":36,"nodeType":"385","messageId":"386","endLine":10,"endColumn":50},{"ruleId":"383","severity":1,"message":"388","line":10,"column":52,"nodeType":"385","messageId":"386","endLine":10,"endColumn":59},{"ruleId":"383","severity":1,"message":"389","line":11,"column":39,"nodeType":"385","messageId":"386","endLine":11,"endColumn":62},{"ruleId":"383","severity":1,"message":"390","line":20,"column":21,"nodeType":"385","messageId":"386","endLine":20,"endColumn":32},{"ruleId":"383","severity":1,"message":"391","line":25,"column":19,"nodeType":"385","messageId":"386","endLine":25,"endColumn":28},{"ruleId":"383","severity":1,"message":"392","line":26,"column":10,"nodeType":"385","messageId":"386","endLine":26,"endColumn":30},{"ruleId":"383","severity":1,"message":"393","line":28,"column":21,"nodeType":"385","messageId":"386","endLine":28,"endColumn":32},{"ruleId":"394","severity":1,"message":"395","line":96,"column":7,"nodeType":"396","endLine":96,"endColumn":30,"suggestions":"397"},{"ruleId":"383","severity":1,"message":"398","line":21,"column":16,"nodeType":"385","messageId":"386","endLine":21,"endColumn":19},{"ruleId":"383","severity":1,"message":"399","line":24,"column":17,"nodeType":"385","messageId":"386","endLine":24,"endColumn":24},{"ruleId":"383","severity":1,"message":"400","line":25,"column":18,"nodeType":"385","messageId":"386","endLine":25,"endColumn":26},{"ruleId":"383","severity":1,"message":"401","line":26,"column":17,"nodeType":"385","messageId":"386","endLine":26,"endColumn":24},{"ruleId":"383","severity":1,"message":"391","line":27,"column":19,"nodeType":"385","messageId":"386","endLine":27,"endColumn":28},{"ruleId":"383","severity":1,"message":"393","line":30,"column":21,"nodeType":"385","messageId":"386","endLine":30,"endColumn":32},{"ruleId":"402","severity":1,"message":"403","line":56,"column":7,"nodeType":"381","messageId":"404","endLine":56,"endColumn":18},{"ruleId":"383","severity":1,"message":"405","line":117,"column":61,"nodeType":"385","messageId":"386","endLine":117,"endColumn":66},{"ruleId":"383","severity":1,"message":"406","line":7,"column":17,"nodeType":"385","messageId":"386","endLine":7,"endColumn":26},{"ruleId":"383","severity":1,"message":"405","line":143,"column":61,"nodeType":"385","messageId":"386","endLine":143,"endColumn":66},{"ruleId":"383","severity":1,"message":"407","line":14,"column":4,"nodeType":"385","messageId":"386","endLine":14,"endColumn":16},{"ruleId":"383","severity":1,"message":"408","line":15,"column":4,"nodeType":"385","messageId":"386","endLine":15,"endColumn":14},{"ruleId":"383","severity":1,"message":"409","line":16,"column":4,"nodeType":"385","messageId":"386","endLine":16,"endColumn":13},{"ruleId":"383","severity":1,"message":"410","line":17,"column":4,"nodeType":"385","messageId":"386","endLine":17,"endColumn":20},{"ruleId":"383","severity":1,"message":"400","line":29,"column":18,"nodeType":"385","messageId":"386","endLine":29,"endColumn":26},{"ruleId":"383","severity":1,"message":"411","line":50,"column":10,"nodeType":"385","messageId":"386","endLine":50,"endColumn":27},{"ruleId":"383","severity":1,"message":"412","line":54,"column":10,"nodeType":"385","messageId":"386","endLine":54,"endColumn":27},{"ruleId":"383","severity":1,"message":"413","line":57,"column":10,"nodeType":"385","messageId":"386","endLine":57,"endColumn":26},{"ruleId":"383","severity":1,"message":"414","line":1,"column":20,"nodeType":"385","messageId":"386","endLine":1,"endColumn":24},{"ruleId":"394","severity":1,"message":"415","line":48,"column":7,"nodeType":"396","endLine":48,"endColumn":9,"suggestions":"416"},{"ruleId":"383","severity":1,"message":"417","line":149,"column":28,"nodeType":"385","messageId":"386","endLine":149,"endColumn":32},{"ruleId":"383","severity":1,"message":"418","line":26,"column":21,"nodeType":"385","messageId":"386","endLine":26,"endColumn":32},{"ruleId":"383","severity":1,"message":"393","line":29,"column":21,"nodeType":"385","messageId":"386","endLine":29,"endColumn":32},{"ruleId":"383","severity":1,"message":"391","line":33,"column":19,"nodeType":"385","messageId":"386","endLine":33,"endColumn":28},{"ruleId":"394","severity":1,"message":"419","line":39,"column":7,"nodeType":"396","endLine":39,"endColumn":22,"suggestions":"420"},{"ruleId":"394","severity":1,"message":"395","line":103,"column":7,"nodeType":"396","endLine":103,"endColumn":30,"suggestions":"421"},{"ruleId":"383","severity":1,"message":"409","line":15,"column":27,"nodeType":"385","messageId":"386","endLine":15,"endColumn":36},{"ruleId":"383","severity":1,"message":"422","line":29,"column":21,"nodeType":"385","messageId":"386","endLine":29,"endColumn":32},{"ruleId":"383","severity":1,"message":"423","line":30,"column":22,"nodeType":"385","messageId":"386","endLine":30,"endColumn":34},{"ruleId":"383","severity":1,"message":"424","line":31,"column":21,"nodeType":"385","messageId":"386","endLine":31,"endColumn":32},{"ruleId":"383","severity":1,"message":"393","line":36,"column":21,"nodeType":"385","messageId":"386","endLine":36,"endColumn":32},{"ruleId":"394","severity":1,"message":"419","line":44,"column":7,"nodeType":"396","endLine":44,"endColumn":22,"suggestions":"425"},{"ruleId":"394","severity":1,"message":"395","line":139,"column":7,"nodeType":"396","endLine":139,"endColumn":39,"suggestions":"426"},{"ruleId":"383","severity":1,"message":"427","line":2,"column":8,"nodeType":"385","messageId":"386","endLine":2,"endColumn":13},{"ruleId":"383","severity":1,"message":"428","line":3,"column":8,"nodeType":"385","messageId":"386","endLine":3,"endColumn":20},{"ruleId":"383","severity":1,"message":"387","line":10,"column":29,"nodeType":"385","messageId":"386","endLine":10,"endColumn":43},{"ruleId":"383","severity":1,"message":"388","line":10,"column":57,"nodeType":"385","messageId":"386","endLine":10,"endColumn":64},{"ruleId":"383","severity":1,"message":"389","line":11,"column":39,"nodeType":"385","messageId":"386","endLine":11,"endColumn":62},{"ruleId":"383","severity":1,"message":"393","line":25,"column":21,"nodeType":"385","messageId":"386","endLine":25,"endColumn":32},{"ruleId":"394","severity":1,"message":"419","line":30,"column":7,"nodeType":"396","endLine":30,"endColumn":22,"suggestions":"429"},{"ruleId":"383","severity":1,"message":"430","line":36,"column":11,"nodeType":"385","messageId":"386","endLine":36,"endColumn":16},{"ruleId":"394","severity":1,"message":"395","line":97,"column":7,"nodeType":"396","endLine":97,"endColumn":30,"suggestions":"431"},{"ruleId":"383","severity":1,"message":"432","line":19,"column":10,"nodeType":"385","messageId":"386","endLine":19,"endColumn":17},{"ruleId":"383","severity":1,"message":"391","line":23,"column":19,"nodeType":"385","messageId":"386","endLine":23,"endColumn":28},{"ruleId":"383","severity":1,"message":"433","line":27,"column":10,"nodeType":"385","messageId":"386","endLine":27,"endColumn":21},{"ruleId":"383","severity":1,"message":"434","line":8,"column":11,"nodeType":"385","messageId":"386","endLine":8,"endColumn":22},{"ruleId":"383","severity":1,"message":"435","line":8,"column":24,"nodeType":"385","messageId":"386","endLine":8,"endColumn":38},{"ruleId":"383","severity":1,"message":"436","line":11,"column":10,"nodeType":"385","messageId":"386","endLine":11,"endColumn":21},{"ruleId":"383","severity":1,"message":"407","line":13,"column":4,"nodeType":"385","messageId":"386","endLine":13,"endColumn":16},{"ruleId":"383","severity":1,"message":"408","line":14,"column":4,"nodeType":"385","messageId":"386","endLine":14,"endColumn":14},{"ruleId":"383","severity":1,"message":"409","line":15,"column":4,"nodeType":"385","messageId":"386","endLine":15,"endColumn":13},{"ruleId":"383","severity":1,"message":"410","line":16,"column":4,"nodeType":"385","messageId":"386","endLine":16,"endColumn":20},{"ruleId":"383","severity":1,"message":"432","line":27,"column":10,"nodeType":"385","messageId":"386","endLine":27,"endColumn":17},{"ruleId":"383","severity":1,"message":"391","line":31,"column":19,"nodeType":"385","messageId":"386","endLine":31,"endColumn":28},{"ruleId":"383","severity":1,"message":"433","line":35,"column":10,"nodeType":"385","messageId":"386","endLine":35,"endColumn":21},{"ruleId":"394","severity":1,"message":"437","line":33,"column":7,"nodeType":"396","endLine":33,"endColumn":14,"suggestions":"438"},{"ruleId":"383","severity":1,"message":"439","line":63,"column":26,"nodeType":"385","messageId":"386","endLine":63,"endColumn":31},{"ruleId":"383","severity":1,"message":"408","line":13,"column":24,"nodeType":"385","messageId":"386","endLine":13,"endColumn":34},{"ruleId":"383","severity":1,"message":"411","line":51,"column":10,"nodeType":"385","messageId":"386","endLine":51,"endColumn":27},{"ruleId":"379","severity":1,"message":"380","line":91,"column":30,"nodeType":"381","messageId":"382","endLine":91,"endColumn":40},{"ruleId":"379","severity":1,"message":"380","line":96,"column":29,"nodeType":"381","messageId":"382","endLine":96,"endColumn":40},{"ruleId":"440","severity":1,"message":"441","line":96,"column":47,"nodeType":"442","messageId":"404","endLine":96,"endColumn":49},{"ruleId":"383","severity":1,"message":"408","line":15,"column":4,"nodeType":"385","messageId":"386","endLine":15,"endColumn":14},{"ruleId":"383","severity":1,"message":"391","line":34,"column":19,"nodeType":"385","messageId":"386","endLine":34,"endColumn":28},{"ruleId":"383","severity":1,"message":"411","line":56,"column":10,"nodeType":"385","messageId":"386","endLine":56,"endColumn":27},{"ruleId":"383","severity":1,"message":"412","line":60,"column":10,"nodeType":"385","messageId":"386","endLine":60,"endColumn":27},{"ruleId":"383","severity":1,"message":"408","line":12,"column":24,"nodeType":"385","messageId":"386","endLine":12,"endColumn":34},{"ruleId":"383","severity":1,"message":"409","line":12,"column":36,"nodeType":"385","messageId":"386","endLine":12,"endColumn":45},{"ruleId":"383","severity":1,"message":"411","line":46,"column":10,"nodeType":"385","messageId":"386","endLine":46,"endColumn":27},{"ruleId":"383","severity":1,"message":"412","line":50,"column":10,"nodeType":"385","messageId":"386","endLine":50,"endColumn":27},{"ruleId":"383","severity":1,"message":"439","line":14,"column":31,"nodeType":"385","messageId":"386","endLine":14,"endColumn":36},{"ruleId":"383","severity":1,"message":"439","line":18,"column":21,"nodeType":"385","messageId":"386","endLine":18,"endColumn":26},{"ruleId":"383","severity":1,"message":"439","line":14,"column":31,"nodeType":"385","messageId":"386","endLine":14,"endColumn":36},{"ruleId":"383","severity":1,"message":"439","line":18,"column":21,"nodeType":"385","messageId":"386","endLine":18,"endColumn":26},{"ruleId":"383","severity":1,"message":"443","line":46,"column":7,"nodeType":"385","messageId":"386","endLine":46,"endColumn":19},{"ruleId":"383","severity":1,"message":"444","line":73,"column":4,"nodeType":"385","messageId":"386","endLine":73,"endColumn":15},{"ruleId":"383","severity":1,"message":"445","line":8,"column":8,"nodeType":"385","messageId":"386","endLine":8,"endColumn":17},{"ruleId":"383","severity":1,"message":"406","line":9,"column":17,"nodeType":"385","messageId":"386","endLine":9,"endColumn":26},{"ruleId":"383","severity":1,"message":"436","line":10,"column":10,"nodeType":"385","messageId":"386","endLine":10,"endColumn":21},{"ruleId":"383","severity":1,"message":"409","line":11,"column":67,"nodeType":"385","messageId":"386","endLine":11,"endColumn":76},{"ruleId":"383","severity":1,"message":"399","line":24,"column":17,"nodeType":"385","messageId":"386","endLine":24,"endColumn":24},{"ruleId":"383","severity":1,"message":"400","line":25,"column":18,"nodeType":"385","messageId":"386","endLine":25,"endColumn":26},{"ruleId":"383","severity":1,"message":"391","line":27,"column":19,"nodeType":"385","messageId":"386","endLine":27,"endColumn":28},{"ruleId":"383","severity":1,"message":"446","line":30,"column":11,"nodeType":"385","messageId":"386","endLine":30,"endColumn":22},{"ruleId":"383","severity":1,"message":"447","line":30,"column":24,"nodeType":"385","messageId":"386","endLine":30,"endColumn":38},{"ruleId":"383","severity":1,"message":"448","line":67,"column":10,"nodeType":"385","messageId":"386","endLine":67,"endColumn":15},{"ruleId":"383","severity":1,"message":"412","line":104,"column":10,"nodeType":"385","messageId":"386","endLine":104,"endColumn":27},{"ruleId":"383","severity":1,"message":"399","line":23,"column":17,"nodeType":"385","messageId":"386","endLine":23,"endColumn":24},{"ruleId":"383","severity":1,"message":"400","line":24,"column":18,"nodeType":"385","messageId":"386","endLine":24,"endColumn":26},{"ruleId":"383","severity":1,"message":"391","line":25,"column":19,"nodeType":"385","messageId":"386","endLine":25,"endColumn":28},{"ruleId":"383","severity":1,"message":"449","line":5,"column":8,"nodeType":"385","messageId":"386","endLine":5,"endColumn":15},{"ruleId":"383","severity":1,"message":"399","line":20,"column":17,"nodeType":"385","messageId":"386","endLine":20,"endColumn":24},{"ruleId":"383","severity":1,"message":"400","line":21,"column":18,"nodeType":"385","messageId":"386","endLine":21,"endColumn":26},{"ruleId":"383","severity":1,"message":"450","line":3,"column":10,"nodeType":"385","messageId":"386","endLine":3,"endColumn":14},{"ruleId":"402","severity":1,"message":"403","line":60,"column":10,"nodeType":"381","messageId":"404","endLine":60,"endColumn":21},{"ruleId":"383","severity":1,"message":"451","line":4,"column":8,"nodeType":"385","messageId":"386","endLine":4,"endColumn":24},{"ruleId":"383","severity":1,"message":"452","line":7,"column":8,"nodeType":"385","messageId":"386","endLine":7,"endColumn":12},{"ruleId":"383","severity":1,"message":"453","line":8,"column":8,"nodeType":"385","messageId":"386","endLine":8,"endColumn":16},{"ruleId":"383","severity":1,"message":"454","line":10,"column":19,"nodeType":"385","messageId":"386","endLine":10,"endColumn":25},{"ruleId":"383","severity":1,"message":"455","line":10,"column":46,"nodeType":"385","messageId":"386","endLine":10,"endColumn":60},{"ruleId":"383","severity":1,"message":"456","line":10,"column":62,"nodeType":"385","messageId":"386","endLine":10,"endColumn":67},{"ruleId":"394","severity":1,"message":"457","line":34,"column":7,"nodeType":"396","endLine":34,"endColumn":9,"suggestions":"458"},{"ruleId":"383","severity":1,"message":"417","line":89,"column":28,"nodeType":"385","messageId":"386","endLine":89,"endColumn":32},{"ruleId":"379","severity":1,"message":"380","line":30,"column":17,"nodeType":"381","messageId":"382","endLine":30,"endColumn":36},{"ruleId":"379","severity":1,"message":"380","line":55,"column":33,"nodeType":"381","messageId":"382","endLine":55,"endColumn":43},{"ruleId":"379","severity":1,"message":"380","line":87,"column":39,"nodeType":"381","messageId":"382","endLine":87,"endColumn":49},"lines-around-directive",["459"],"global-require",[],"no-buffer-constructor",[],"no-new-require",[],"no-path-concat",[],"react/display-name","Component definition is missing display name","ArrowFunctionExpression","noDisplayName","react/destructuring-assignment","Must use destructuring props assignment","MemberExpression","useDestructAssignment","no-unused-vars","'getComponent' is assigned a value but never used.","Identifier","unusedVar","'OverlayTrigger' is defined but never used.","'Popover' is defined but never used.","'AiOutlineQuestionCircle' is defined but never used.","'setEmployee' is assigned a value but never used.","'setSearch' is assigned a value but never used.","'debouncedSearchValue' is assigned a value but never used.","'setUrlState' is assigned a value but never used.","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'formik'. Either include it or remove the dependency array.","ArrayExpression",["460"],"'res' is assigned a value but never used.","'setPage' is assigned a value but never used.","'setLimit' is assigned a value but never used.","'setSort' is assigned a value but never used.","no-console","Unexpected console statement.","unexpected","'value' is defined but never used. Allowed unused args must match /res|next|^err/u.","'useEffect' is defined but never used.","'AiFillDelete' is defined but never used.","'AiFillEdit' is defined but never used.","'AiFillEye' is defined but never used.","'AiFillPlusCircle' is defined but never used.","'handleOnClickEdit' is assigned a value but never used.","'handleOnClickView' is assigned a value but never used.","'handleOnClickAdd' is assigned a value but never used.","'post' is defined but never used.","React Hook useEffect has missing dependencies: 'alert', 'history', and 'props'. Either include them or remove the dependency array. However, 'props' will change when *any* prop changes, so the preferred fix is to destructure the 'props' object outside of the useEffect call and refer to those specific props inside useEffect.",["461"],"'auth' is defined but never used. Allowed unused args must match /res|next|^err/u.","'setCustomer' is assigned a value but never used.","React Hook useMemo has a missing dependency: 'props.user?.role'. Either include it or remove the dependency array.",["462"],["463"],"'setSalePage' is assigned a value but never used.","'setSaleLimit' is assigned a value but never used.","'setSaleSort' is assigned a value but never used.",["464"],["465"],"'dayjs' is defined but never used.","'relativeTime' is defined but never used.",["466"],"'limit' is assigned a value but never used.",["467"],"'history' is assigned a value but never used.","'queryClient' is assigned a value but never used.","'activeModal' is assigned a value but never used.","'setActiveModal' is assigned a value but never used.","'ButtonGroup' is defined but never used.","React Hook useEffect has a missing dependency: 'getUserProfile'. Either include it or remove the dependency array. Outer scope values like 'token' aren't valid dependencies because mutating them doesn't re-render the component.",["468"],"'state' is defined but never used. Allowed unused args must match /res|next|^err/u.","eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","'EllipsisPage' is assigned a value but never used.","'hasPrevPage' is defined but never used. Allowed unused args must match /res|next|^err/u.","'PageTItle' is defined but never used.","'selectedRow' is assigned a value but never used.","'setSelectedRow' is assigned a value but never used.","'isAdd' is assigned a value but never used.","'ChatBox' is defined but never used.","'When' is defined but never used.","'PerfectScrollbar' is defined but never used.","'logo' is defined but never used.","'logoText' is defined but never used.","'onNote' is defined but never used. Allowed unused args must match /res|next|^err/u.","'onNotification' is defined but never used. Allowed unused args must match /res|next|^err/u.","'onBox' is defined but never used. Allowed unused args must match /res|next|^err/u.","React Hook React.useEffect has missing dependencies: 'history' and 'logout'. Either include them or remove the dependency array. If 'logout' changes too often, find the parent component that defines it and wrap that definition in useCallback.",["469"],"padding-line-between-statements",{"desc":"470","fix":"471"},{"desc":"472","fix":"473"},{"desc":"474","fix":"475"},{"desc":"470","fix":"476"},{"desc":"474","fix":"477"},{"desc":"478","fix":"479"},{"desc":"474","fix":"480"},{"desc":"470","fix":"481"},{"desc":"482","fix":"483"},{"desc":"484","fix":"485"},"Update the dependencies array to be: [formik, isEditing, query.data]",{"range":"486","text":"487"},"Update the dependencies array to be: [alert, history, props]",{"range":"488","text":"489"},"Update the dependencies array to be: [props.user?.role, urlState?.type]",{"range":"490","text":"491"},{"range":"492","text":"487"},{"range":"493","text":"491"},"Update the dependencies array to be: [formik, isEditing, query.data?.product]",{"range":"494","text":"495"},{"range":"496","text":"491"},{"range":"497","text":"487"},"Update the dependencies array to be: [getUserProfile]",{"range":"498","text":"499"},"Update the dependencies array to be: [history, logout]",{"range":"500","text":"501"},[3803,3826],"[formik, isEditing, query.data]",[1906,1908],"[alert, history, props]",[1697,1712],"[props.user?.role, urlState?.type]",[3903,3926],[1972,1987],[5129,5161],"[formik, isEditing, query.data?.product]",[1278,1293],[3428,3451],[916,923],"[getUserProfile]",[1069,1071],"[history, logout]"]