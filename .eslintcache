[{"/home/muneeb/dev/diamond-tiles-frontend/src/index.js":"1","/home/muneeb/dev/diamond-tiles-frontend/src/App.js":"2","/home/muneeb/dev/diamond-tiles-frontend/src/store/index.js":"3","/home/muneeb/dev/diamond-tiles-frontend/src/store/reducers.js":"4","/home/muneeb/dev/diamond-tiles-frontend/src/jsx/index.js":"5","/home/muneeb/dev/diamond-tiles-frontend/src/store/auth/reducer.js":"6","/home/muneeb/dev/diamond-tiles-frontend/src/jsx/pages/Error404.js":"7","/home/muneeb/dev/diamond-tiles-frontend/src/jsx/pages/employees/EmployeeActions.js":"8","/home/muneeb/dev/diamond-tiles-frontend/src/jsx/pages/Registration.js":"9","/home/muneeb/dev/diamond-tiles-frontend/src/jsx/pages/expenses/ExpenseActions.js":"10","/home/muneeb/dev/diamond-tiles-frontend/src/jsx/pages/purchase/AddPurchase.js":"11","/home/muneeb/dev/diamond-tiles-frontend/src/jsx/pages/sale/AddSale.js":"12","/home/muneeb/dev/diamond-tiles-frontend/src/jsx/pages/types/TypeActions.js":"13","/home/muneeb/dev/diamond-tiles-frontend/src/jsx/helpers/enums.js":"14","/home/muneeb/dev/diamond-tiles-frontend/src/jsx/pages/Login.js":"15","/home/muneeb/dev/diamond-tiles-frontend/src/jsx/pages/customers/CustomerActions.js":"16","/home/muneeb/dev/diamond-tiles-frontend/src/jsx/pages/products/ProductActions.js":"17","/home/muneeb/dev/diamond-tiles-frontend/src/jsx/pages/suppliers/SupplierActions.js":"18","/home/muneeb/dev/diamond-tiles-frontend/src/store/auth/actionTypes.js":"19","/home/muneeb/dev/diamond-tiles-frontend/src/jsx/pages/employees/index.js":"20","/home/muneeb/dev/diamond-tiles-frontend/src/jsx/pages/inventory/index.js":"21","/home/muneeb/dev/diamond-tiles-frontend/src/jsx/pages/dashboard/index.js":"22","/home/muneeb/dev/diamond-tiles-frontend/src/jsx/pages/khaata/index.js":"23","/home/muneeb/dev/diamond-tiles-frontend/src/jsx/layouts/index.js":"24","/home/muneeb/dev/diamond-tiles-frontend/src/jsx/pages/expenses/index.js":"25","/home/muneeb/dev/diamond-tiles-frontend/src/jsx/pages/customers/index.js":"26","/home/muneeb/dev/diamond-tiles-frontend/src/jsx/pages/products/index.js":"27","/home/muneeb/dev/diamond-tiles-frontend/src/jsx/pages/sale/index.js":"28","/home/muneeb/dev/diamond-tiles-frontend/src/jsx/pages/purchase/index.js":"29","/home/muneeb/dev/diamond-tiles-frontend/src/jsx/pages/suppliers/index.js":"30","/home/muneeb/dev/diamond-tiles-frontend/src/store/auth/actions.js":"31","/home/muneeb/dev/diamond-tiles-frontend/src/jsx/components/CreatableSelect.js":"32","/home/muneeb/dev/diamond-tiles-frontend/src/jsx/components/Select.js":"33","/home/muneeb/dev/diamond-tiles-frontend/src/jsx/components/Button.js":"34","/home/muneeb/dev/diamond-tiles-frontend/src/jsx/components/Pagination.js":"35","/home/muneeb/dev/diamond-tiles-frontend/src/jsx/components/SpinnerOverlay.js":"36","/home/muneeb/dev/diamond-tiles-frontend/src/jsx/components/ModalWrapper.js":"37","/home/muneeb/dev/diamond-tiles-frontend/src/jsx/layouts/PageTitle.js":"38","/home/muneeb/dev/diamond-tiles-frontend/src/jsx/components/invoice.js":"39","/home/muneeb/dev/diamond-tiles-frontend/src/jsx/layouts/Footer.js":"40","/home/muneeb/dev/diamond-tiles-frontend/src/jsx/helpers/index.js":"41","/home/muneeb/dev/diamond-tiles-frontend/src/jsx/pages/salaries/index.js":"42","/home/muneeb/dev/diamond-tiles-frontend/src/jsx/pages/units/index.js":"43","/home/muneeb/dev/diamond-tiles-frontend/src/jsx/pages/types/index.js":"44","/home/muneeb/dev/diamond-tiles-frontend/src/jsx/layouts/nav/index.js":"45","/home/muneeb/dev/diamond-tiles-frontend/src/jsx/pages/expenseTypes/index.js":"46","/home/muneeb/dev/diamond-tiles-frontend/src/jsx/helpers/useAlert.js":"47","/home/muneeb/dev/diamond-tiles-frontend/src/jsx/helpers/server.js":"48","/home/muneeb/dev/diamond-tiles-frontend/src/jsx/helpers/useQuery.js":"49","/home/muneeb/dev/diamond-tiles-frontend/src/jsx/layouts/ChatBox.js":"50","/home/muneeb/dev/diamond-tiles-frontend/src/jsx/layouts/nav/NavHader.js":"51","/home/muneeb/dev/diamond-tiles-frontend/src/jsx/layouts/nav/Header.js":"52","/home/muneeb/dev/diamond-tiles-frontend/src/jsx/layouts/nav/SideBar.js":"53","/home/muneeb/dev/diamond-tiles-frontend/src/jsx/pages/purchase/PurchaseInvoice.js":"54","/home/muneeb/dev/diamond-tiles-frontend/src/jsx/pages/sale/SaleInvoice.js":"55","/home/muneeb/dev/diamond-tiles-frontend/src/jsx/pages/purchase/RefundPurchase.js":"56","/home/muneeb/dev/diamond-tiles-frontend/src/jsx/helpers/getQuantity.js":"57","/home/muneeb/dev/diamond-tiles-frontend/src/jsx/pages/purchase/ClearPurchase.js":"58","/home/muneeb/dev/diamond-tiles-frontend/src/jsx/pages/sale/RefundSale.js":"59","/home/muneeb/dev/diamond-tiles-frontend/src/store/products/reducer.js":"60","/home/muneeb/dev/diamond-tiles-frontend/src/store/products/actionTypes.js":"61","/home/muneeb/dev/diamond-tiles-frontend/src/jsx/pages/products/AddNewProduct.js":"62","/home/muneeb/dev/diamond-tiles-frontend/src/store/actions.js":"63","/home/muneeb/dev/diamond-tiles-frontend/src/store/products/actions.js":"64","/home/muneeb/dev/diamond-tiles-frontend/src/store/types/actions.js":"65","/home/muneeb/dev/diamond-tiles-frontend/src/store/types/actionTypes.js":"66","/home/muneeb/dev/diamond-tiles-frontend/src/store/types/reducer.js":"67","/home/muneeb/dev/diamond-tiles-frontend/src/jsx/pages/types/AddNewType.js":"68","/home/muneeb/dev/diamond-tiles-frontend/src/store/units/actions.js":"69","/home/muneeb/dev/diamond-tiles-frontend/src/store/units/actionTypes.js":"70","/home/muneeb/dev/diamond-tiles-frontend/src/jsx/pages/units/AddNewUnit.js":"71","/home/muneeb/dev/diamond-tiles-frontend/src/store/units/reducer.js":"72","/home/muneeb/dev/diamond-tiles-frontend/src/store/suppliers/actions.js":"73","/home/muneeb/dev/diamond-tiles-frontend/src/store/suppliers/actionTypes.js":"74","/home/muneeb/dev/diamond-tiles-frontend/src/jsx/pages/suppliers/AddNewSupplier.js":"75","/home/muneeb/dev/diamond-tiles-frontend/src/store/suppliers/reducer.js":"76","/home/muneeb/dev/diamond-tiles-frontend/src/jsx/pages/sale/ClearSale.js":"77","/home/muneeb/dev/diamond-tiles-frontend/src/store/customers/actions.js":"78","/home/muneeb/dev/diamond-tiles-frontend/src/store/customers/actionTypes.js":"79","/home/muneeb/dev/diamond-tiles-frontend/src/store/customers/reducer.js":"80","/home/muneeb/dev/diamond-tiles-frontend/src/jsx/pages/customers/AddNewCustomer.js":"81","/home/muneeb/dev/diamond-tiles-frontend/src/jsx/pages/users/index.js":"82","/home/muneeb/dev/diamond-tiles-frontend/src/jsx/helpers/getSortingIcon.js":"83","/home/muneeb/dev/diamond-tiles-frontend/src/jsx/pages/purchase/ManagePurchase.js":"84","/home/muneeb/dev/diamond-tiles-frontend/src/store/salaries/actions.js":"85","/home/muneeb/dev/diamond-tiles-frontend/src/store/salaries/actionTypes.js":"86","/home/muneeb/dev/diamond-tiles-frontend/src/store/salaries/reducer.js":"87","/home/muneeb/dev/diamond-tiles-frontend/src/jsx/pages/salaries/AddNewSalary.js":"88","/home/muneeb/dev/diamond-tiles-frontend/src/store/employees/reducer.js":"89","/home/muneeb/dev/diamond-tiles-frontend/src/store/employees/actionTypes.js":"90","/home/muneeb/dev/diamond-tiles-frontend/src/store/employees/actions.js":"91","/home/muneeb/dev/diamond-tiles-frontend/src/jsx/pages/employees/AddNewEmployee.js":"92","/home/muneeb/dev/diamond-tiles-frontend/src/jsx/pages/sale/MangeSales.js":"93","/home/muneeb/dev/diamond-tiles-frontend/src/store/inventories/actions.js":"94","/home/muneeb/dev/diamond-tiles-frontend/src/store/inventories/actionTypes.js":"95","/home/muneeb/dev/diamond-tiles-frontend/src/store/inventories/reducer.js":"96","/home/muneeb/dev/diamond-tiles-frontend/src/jsx/pages/inventory/AddNewInventory.js":"97","/home/muneeb/dev/diamond-tiles-frontend/src/store/expenses/actions.js":"98","/home/muneeb/dev/diamond-tiles-frontend/src/store/expenses/actionTypes.js":"99","/home/muneeb/dev/diamond-tiles-frontend/src/store/expenses/reducer.js":"100","/home/muneeb/dev/diamond-tiles-frontend/src/jsx/pages/expenses/AddNewExpense.js":"101"},{"size":269,"mtime":1631110117260,"results":"102","hashOfConfig":"103"},{"size":840,"mtime":1631110117140,"results":"104","hashOfConfig":"103"},{"size":373,"mtime":1631110117272,"results":"105","hashOfConfig":"103"},{"size":661,"mtime":1631110117272,"results":"106","hashOfConfig":"103"},{"size":4764,"mtime":1631116210821,"results":"107","hashOfConfig":"103"},{"size":499,"mtime":1631110117272,"results":"108","hashOfConfig":"103"},{"size":825,"mtime":1631110117260,"results":"109","hashOfConfig":"103"},{"size":14844,"mtime":1631110117260,"results":"110","hashOfConfig":"103"},{"size":5890,"mtime":1631110117260,"results":"111","hashOfConfig":"103"},{"size":9988,"mtime":1631110117260,"results":"112","hashOfConfig":"103"},{"size":18353,"mtime":1631703822472,"results":"113","hashOfConfig":"103"},{"size":18046,"mtime":1631884625850,"results":"114","hashOfConfig":"103"},{"size":12873,"mtime":1631110117264,"results":"115","hashOfConfig":"103"},{"size":88,"mtime":1631110117260,"results":"116","hashOfConfig":"103"},{"size":7011,"mtime":1631110117260,"results":"117","hashOfConfig":"103"},{"size":19117,"mtime":1631110117260,"results":"118","hashOfConfig":"103"},{"size":22894,"mtime":1631110117264,"results":"119","hashOfConfig":"103"},{"size":19817,"mtime":1631110117264,"results":"120","hashOfConfig":"103"},{"size":62,"mtime":1631110117272,"results":"121","hashOfConfig":"103"},{"size":14909,"mtime":1631712349657,"results":"122","hashOfConfig":"103"},{"size":11878,"mtime":1631711938943,"results":"123","hashOfConfig":"103"},{"size":6798,"mtime":1631957233551,"results":"124","hashOfConfig":"103"},{"size":13775,"mtime":1631110117260,"results":"125","hashOfConfig":"103"},{"size":1853,"mtime":1631110117260,"results":"126","hashOfConfig":"103"},{"size":9505,"mtime":1631110117260,"results":"127","hashOfConfig":"103"},{"size":11773,"mtime":1631882752738,"results":"128","hashOfConfig":"103"},{"size":8706,"mtime":1631110117264,"results":"129","hashOfConfig":"103"},{"size":2759,"mtime":1631110117264,"results":"130","hashOfConfig":"103"},{"size":2572,"mtime":1631110117264,"results":"131","hashOfConfig":"103"},{"size":12971,"mtime":1631883052700,"results":"132","hashOfConfig":"103"},{"size":303,"mtime":1631110117272,"results":"133","hashOfConfig":"103"},{"size":1083,"mtime":1631110117260,"results":"134","hashOfConfig":"103"},{"size":1233,"mtime":1631110117260,"results":"135","hashOfConfig":"103"},{"size":873,"mtime":1631110117260,"results":"136","hashOfConfig":"103"},{"size":3755,"mtime":1631110117260,"results":"137","hashOfConfig":"103"},{"size":469,"mtime":1631110117260,"results":"138","hashOfConfig":"103"},{"size":1449,"mtime":1631110117260,"results":"139","hashOfConfig":"103"},{"size":467,"mtime":1631110117260,"results":"140","hashOfConfig":"103"},{"size":4973,"mtime":1628773267088,"results":"141","hashOfConfig":"103"},{"size":452,"mtime":1631110117260,"results":"142","hashOfConfig":"103"},{"size":82,"mtime":1631110117260,"results":"143","hashOfConfig":"103"},{"size":7288,"mtime":1631110117264,"results":"144","hashOfConfig":"103"},{"size":6587,"mtime":1631110117264,"results":"145","hashOfConfig":"103"},{"size":5934,"mtime":1631110117264,"results":"146","hashOfConfig":"103"},{"size":800,"mtime":1631110117260,"results":"147","hashOfConfig":"103"},{"size":8752,"mtime":1631110117260,"results":"148","hashOfConfig":"103"},{"size":2568,"mtime":1631110117260,"results":"149","hashOfConfig":"103"},{"size":1892,"mtime":1631439176387,"results":"150","hashOfConfig":"103"},{"size":406,"mtime":1631447616590,"results":"151","hashOfConfig":"103"},{"size":1687,"mtime":1631110117260,"results":"152","hashOfConfig":"103"},{"size":1085,"mtime":1631110117260,"results":"153","hashOfConfig":"103"},{"size":4078,"mtime":1631110117260,"results":"154","hashOfConfig":"103"},{"size":4661,"mtime":1631110117260,"results":"155","hashOfConfig":"103"},{"size":4904,"mtime":1628928830104,"results":"156","hashOfConfig":"103"},{"size":4977,"mtime":1628862946401,"results":"157","hashOfConfig":"103"},{"size":6998,"mtime":1631447645426,"results":"158","hashOfConfig":"103"},{"size":243,"mtime":1631110117260,"results":"159","hashOfConfig":"103"},{"size":2324,"mtime":1631110117264,"results":"160","hashOfConfig":"103"},{"size":3388,"mtime":1631451222421,"results":"161","hashOfConfig":"103"},{"size":513,"mtime":1631110117272,"results":"162","hashOfConfig":"103"},{"size":116,"mtime":1631110117272,"results":"163","hashOfConfig":"103"},{"size":4746,"mtime":1631110117260,"results":"164","hashOfConfig":"103"},{"size":356,"mtime":1631110117272,"results":"165","hashOfConfig":"103"},{"size":268,"mtime":1631110117272,"results":"166","hashOfConfig":"103"},{"size":254,"mtime":1631110117272,"results":"167","hashOfConfig":"103"},{"size":108,"mtime":1631110117272,"results":"168","hashOfConfig":"103"},{"size":505,"mtime":1631110117272,"results":"169","hashOfConfig":"103"},{"size":2721,"mtime":1631110117264,"results":"170","hashOfConfig":"103"},{"size":254,"mtime":1631110117272,"results":"171","hashOfConfig":"103"},{"size":108,"mtime":1631110117272,"results":"172","hashOfConfig":"103"},{"size":4267,"mtime":1631110117264,"results":"173","hashOfConfig":"103"},{"size":505,"mtime":1631110117272,"results":"174","hashOfConfig":"103"},{"size":278,"mtime":1631110117272,"results":"175","hashOfConfig":"103"},{"size":124,"mtime":1631110117272,"results":"176","hashOfConfig":"103"},{"size":4704,"mtime":1631883200598,"results":"177","hashOfConfig":"103"},{"size":521,"mtime":1631110117272,"results":"178","hashOfConfig":"103"},{"size":2288,"mtime":1631110117264,"results":"179","hashOfConfig":"103"},{"size":278,"mtime":1631110117272,"results":"180","hashOfConfig":"103"},{"size":124,"mtime":1631110117272,"results":"181","hashOfConfig":"103"},{"size":521,"mtime":1631110117272,"results":"182","hashOfConfig":"103"},{"size":4003,"mtime":1631882923871,"results":"183","hashOfConfig":"103"},{"size":10510,"mtime":1631110117264,"results":"184","hashOfConfig":"103"},{"size":878,"mtime":1631110117260,"results":"185","hashOfConfig":"103"},{"size":12350,"mtime":1631956771406,"results":"186","hashOfConfig":"103"},{"size":272,"mtime":1631110117272,"results":"187","hashOfConfig":"103"},{"size":120,"mtime":1631110117272,"results":"188","hashOfConfig":"103"},{"size":517,"mtime":1631110117272,"results":"189","hashOfConfig":"103"},{"size":3833,"mtime":1631110117264,"results":"190","hashOfConfig":"103"},{"size":523,"mtime":1631110117272,"results":"191","hashOfConfig":"103"},{"size":126,"mtime":1631110117272,"results":"192","hashOfConfig":"103"},{"size":280,"mtime":1631110117272,"results":"193","hashOfConfig":"103"},{"size":5889,"mtime":1631713047317,"results":"194","hashOfConfig":"103"},{"size":11499,"mtime":1631884425903,"results":"195","hashOfConfig":"103"},{"size":290,"mtime":1631110117272,"results":"196","hashOfConfig":"103"},{"size":132,"mtime":1631110117272,"results":"197","hashOfConfig":"103"},{"size":529,"mtime":1631110117272,"results":"198","hashOfConfig":"103"},{"size":8492,"mtime":1631711981707,"results":"199","hashOfConfig":"103"},{"size":272,"mtime":1631110117272,"results":"200","hashOfConfig":"103"},{"size":120,"mtime":1631110117272,"results":"201","hashOfConfig":"103"},{"size":517,"mtime":1631110117272,"results":"202","hashOfConfig":"103"},{"size":3314,"mtime":1631110117260,"results":"203","hashOfConfig":"103"},{"filePath":"204","messages":"205","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"206"},"1ssctl6",{"filePath":"207","messages":"208","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"206"},{"filePath":"209","messages":"210","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"206"},{"filePath":"211","messages":"212","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"206"},{"filePath":"213","messages":"214","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"215","usedDeprecatedRules":"206"},{"filePath":"216","messages":"217","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"206"},{"filePath":"218","messages":"219","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"206"},{"filePath":"220","messages":"221","errorCount":0,"warningCount":14,"fixableErrorCount":0,"fixableWarningCount":0,"source":"222","usedDeprecatedRules":"206"},{"filePath":"223","messages":"224","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"225","usedDeprecatedRules":"206"},{"filePath":"226","messages":"227","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"228","usedDeprecatedRules":"206"},{"filePath":"229","messages":"230","errorCount":0,"warningCount":12,"fixableErrorCount":0,"fixableWarningCount":0,"source":"231","usedDeprecatedRules":"206"},{"filePath":"232","messages":"233","errorCount":0,"warningCount":12,"fixableErrorCount":0,"fixableWarningCount":0,"source":"234","usedDeprecatedRules":"206"},{"filePath":"235","messages":"236","errorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":"237","usedDeprecatedRules":"206"},{"filePath":"238","messages":"239","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"206"},{"filePath":"240","messages":"241","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"242","usedDeprecatedRules":"206"},{"filePath":"243","messages":"244","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"245","usedDeprecatedRules":"206"},{"filePath":"246","messages":"247","errorCount":0,"warningCount":9,"fixableErrorCount":0,"fixableWarningCount":0,"source":"248","usedDeprecatedRules":"206"},{"filePath":"249","messages":"250","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"251","usedDeprecatedRules":"206"},{"filePath":"252","messages":"253","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"206"},{"filePath":"254","messages":"255","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"256","usedDeprecatedRules":"206"},{"filePath":"257","messages":"258","errorCount":0,"warningCount":9,"fixableErrorCount":0,"fixableWarningCount":0,"source":"259","usedDeprecatedRules":"206"},{"filePath":"260","messages":"261","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"262","messages":"263","errorCount":0,"warningCount":14,"fixableErrorCount":0,"fixableWarningCount":0,"source":"264","usedDeprecatedRules":"206"},{"filePath":"265","messages":"266","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"267","usedDeprecatedRules":"206"},{"filePath":"268","messages":"269","errorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"270","usedDeprecatedRules":"206"},{"filePath":"271","messages":"272","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"273","usedDeprecatedRules":"206"},{"filePath":"274","messages":"275","errorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":"276","usedDeprecatedRules":"206"},{"filePath":"277","messages":"278","errorCount":0,"warningCount":36,"fixableErrorCount":0,"fixableWarningCount":0,"source":"279","usedDeprecatedRules":"206"},{"filePath":"280","messages":"281","errorCount":0,"warningCount":36,"fixableErrorCount":0,"fixableWarningCount":0,"source":"282","usedDeprecatedRules":"206"},{"filePath":"283","messages":"284","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"285","usedDeprecatedRules":"206"},{"filePath":"286","messages":"287","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"206"},{"filePath":"288","messages":"289","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"290","usedDeprecatedRules":"206"},{"filePath":"291","messages":"292","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"293","usedDeprecatedRules":"206"},{"filePath":"294","messages":"295","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"206"},{"filePath":"296","messages":"297","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"298","usedDeprecatedRules":"206"},{"filePath":"299","messages":"300","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"206"},{"filePath":"301","messages":"302","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"206"},{"filePath":"303","messages":"304","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"206"},{"filePath":"305","messages":"306","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"307"},{"filePath":"308","messages":"309","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"206"},{"filePath":"310","messages":"311","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"206"},{"filePath":"312","messages":"313","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"314","usedDeprecatedRules":"206"},{"filePath":"315","messages":"316","errorCount":0,"warningCount":21,"fixableErrorCount":0,"fixableWarningCount":0,"source":"317","usedDeprecatedRules":"206"},{"filePath":"318","messages":"319","errorCount":0,"warningCount":14,"fixableErrorCount":0,"fixableWarningCount":0,"source":"320","usedDeprecatedRules":"206"},{"filePath":"321","messages":"322","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"323","usedDeprecatedRules":"206"},{"filePath":"324","messages":"325","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"326","usedDeprecatedRules":"206"},{"filePath":"327","messages":"328","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"329","usedDeprecatedRules":"206"},{"filePath":"330","messages":"331","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"332","usedDeprecatedRules":"206"},{"filePath":"333","messages":"334","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"206"},{"filePath":"335","messages":"336","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"337","usedDeprecatedRules":"206"},{"filePath":"338","messages":"339","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"340","usedDeprecatedRules":"206"},{"filePath":"341","messages":"342","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"343","usedDeprecatedRules":"206"},{"filePath":"344","messages":"345","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"346","usedDeprecatedRules":"206"},{"filePath":"347","messages":"348","errorCount":0,"warningCount":11,"fixableErrorCount":0,"fixableWarningCount":0,"source":"349","usedDeprecatedRules":"350"},{"filePath":"351","messages":"352","errorCount":0,"warningCount":9,"fixableErrorCount":0,"fixableWarningCount":0,"source":"353","usedDeprecatedRules":"307"},{"filePath":"354","messages":"355","errorCount":0,"warningCount":9,"fixableErrorCount":0,"fixableWarningCount":0,"source":"356","usedDeprecatedRules":"206"},{"filePath":"357","messages":"358","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"359","usedDeprecatedRules":"206"},{"filePath":"360","messages":"361","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"362","usedDeprecatedRules":"206"},{"filePath":"363","messages":"364","errorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":"365","usedDeprecatedRules":"206"},{"filePath":"366","messages":"367","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"206"},{"filePath":"368","messages":"369","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"206"},{"filePath":"370","messages":"371","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"372","usedDeprecatedRules":"206"},{"filePath":"373","messages":"374","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"206"},{"filePath":"375","messages":"376","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"206"},{"filePath":"377","messages":"378","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"206"},{"filePath":"379","messages":"380","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"206"},{"filePath":"381","messages":"382","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"206"},{"filePath":"383","messages":"384","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"385","usedDeprecatedRules":"206"},{"filePath":"386","messages":"387","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"206"},{"filePath":"388","messages":"389","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"206"},{"filePath":"390","messages":"391","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"392","usedDeprecatedRules":"206"},{"filePath":"393","messages":"394","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"206"},{"filePath":"395","messages":"396","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"206"},{"filePath":"397","messages":"398","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"206"},{"filePath":"399","messages":"400","errorCount":0,"warningCount":9,"fixableErrorCount":0,"fixableWarningCount":0,"source":"401","usedDeprecatedRules":"206"},{"filePath":"402","messages":"403","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"206"},{"filePath":"404","messages":"405","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"406","usedDeprecatedRules":"206"},{"filePath":"407","messages":"408","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"206"},{"filePath":"409","messages":"410","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"206"},{"filePath":"411","messages":"412","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"206"},{"filePath":"413","messages":"414","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"415","usedDeprecatedRules":"206"},{"filePath":"416","messages":"417","errorCount":0,"warningCount":16,"fixableErrorCount":0,"fixableWarningCount":0,"source":"418","usedDeprecatedRules":"206"},{"filePath":"419","messages":"420","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"206"},{"filePath":"421","messages":"422","errorCount":0,"warningCount":10,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"423","messages":"424","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"206"},{"filePath":"425","messages":"426","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"206"},{"filePath":"427","messages":"428","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"206"},{"filePath":"429","messages":"430","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"431","usedDeprecatedRules":"206"},{"filePath":"432","messages":"433","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"206"},{"filePath":"434","messages":"435","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"206"},{"filePath":"436","messages":"437","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"206"},{"filePath":"438","messages":"439","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"440","usedDeprecatedRules":"206"},{"filePath":"441","messages":"442","errorCount":0,"warningCount":14,"fixableErrorCount":0,"fixableWarningCount":0,"source":"443","usedDeprecatedRules":"206"},{"filePath":"444","messages":"445","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"206"},{"filePath":"446","messages":"447","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"206"},{"filePath":"448","messages":"449","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"206"},{"filePath":"450","messages":"451","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"452","usedDeprecatedRules":"206"},{"filePath":"453","messages":"454","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"206"},{"filePath":"455","messages":"456","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"206"},{"filePath":"457","messages":"458","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"206"},{"filePath":"459","messages":"460","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"461","usedDeprecatedRules":"206"},"/home/muneeb/dev/diamond-tiles-frontend/src/index.js",[],["462","463","464","465","466"],"/home/muneeb/dev/diamond-tiles-frontend/src/App.js",[],"/home/muneeb/dev/diamond-tiles-frontend/src/store/index.js",[],"/home/muneeb/dev/diamond-tiles-frontend/src/store/reducers.js",[],"/home/muneeb/dev/diamond-tiles-frontend/src/jsx/index.js",["467","468","469","470","471"],"import React, { Suspense } from 'react';\nimport { Else, If, Then } from 'react-if';\nimport { connect } from 'react-redux';\n/// React router dom\nimport { BrowserRouter as Router, Redirect, Route, Switch } from 'react-router-dom';\nimport './chart.css';\nimport { userRoles } from './helpers/enums';\n/// Css\nimport './index.css';\nimport Layout from './layouts';\nimport Customers from './pages/customers';\nimport AddNewCustomer from './pages/customers/AddNewCustomer';\nimport CustomerActions from './pages/customers/CustomerActions';\nimport Dashboard from './pages/dashboard';\nimport Employees from './pages/employees';\nimport AddNewEmployee from './pages/employees/AddNewEmployee';\nimport EmployeeActions from './pages/employees/EmployeeActions';\nimport Error404 from './pages/Error404';\nimport Expenses from './pages/expenses';\nimport AddNewExpense from './pages/expenses/AddNewExpense';\nimport ExpensesActions from './pages/expenses/ExpenseActions';\nimport Inventory from './pages/inventory';\nimport AddNewInventory from './pages/inventory/AddNewInventory';\nimport Khaata from './pages/khaata';\nimport Login from './pages/Login';\nimport Products from './pages/products';\nimport AddNewProduct from './pages/products/AddNewProduct';\nimport ProductActions from './pages/products/ProductActions';\nimport Purchase from './pages/purchase';\nimport AddPurchase from './pages/purchase/AddPurchase';\n/// Pages\nimport Registration from './pages/Registration';\nimport AddNewSalary from './pages/salaries/AddNewSalary';\nimport Sales from './pages/sale';\nimport AddSale from './pages/sale/AddSale';\nimport Suppliers from './pages/suppliers';\nimport AddNewSupplier from './pages/suppliers/AddNewSupplier';\nimport SupplierActions from './pages/suppliers/SupplierActions';\nimport AddNewType from './pages/types/AddNewType';\nimport TypeActions from './pages/types/TypeActions';\nimport AddNewUnit from './pages/units/AddNewUnit';\nimport users from './pages/users';\n\nconst protectedRoutes = [\n   { url: 'employees', component: Employees },\n   // { url: 'dashboard', component: Dashboard },\n   { url: 'employees/:id', component: EmployeeActions },\n];\n\nconst routes = [\n   /// Deshborad\n   { url: '', component: () => <Redirect to=\"/page-login\" /> },\n   { url: 'page-register', component: Registration, isPublic: true },\n   { url: 'page-login', component: Login, isPublic: true },\n   { url: 'customers', component: Customers },\n   { url: 'users', component: users },\n   { url: 'customers/:id', component: CustomerActions },\n   { url: 'suppliers', component: Suppliers },\n   { url: 'suppliers/:id', component: SupplierActions },\n   { url: 'products', component: Products },\n   { url: 'products/:id', component: ProductActions },\n   { url: 'products/types/:id', component: TypeActions },\n   { url: 'purchase', component: Purchase },\n   { url: 'purchase/add', component: AddPurchase },\n   { url: 'sale', component: Sales },\n   { url: 'sale/add', component: AddSale },\n   { url: 'expenses', component: Expenses },\n   { url: 'expenses/:id', component: ExpensesActions },\n   { url: 'inventory', component: Inventory },\n   { url: 'dashboard', component: Dashboard },\n];\n\nconst Markup = (props) => (\n   <Suspense fallback={<p>Loading</p>}>\n      <AddNewProduct />\n      <AddNewType />\n      <AddNewUnit />\n      <AddNewSupplier />\n      <AddNewCustomer />\n      <AddNewSalary />\n      <AddNewEmployee />\n      <AddNewInventory />\n      <AddNewExpense />\n\n      <Router>\n         <Switch>\n            <If condition={props.user?.role === userRoles.CASHIER}>\n               <Then>\n                  {routes.map((data, i) => {\n                     const getComponent = () => {};\n                     return (\n                        <Route key={i} exact path={`/${data.url}`}>\n                           <Layout isPublic={data.isPublic}>\n                              <data.component />\n                           </Layout>\n                        </Route>\n                     );\n                  })}\n               </Then>\n               <Else>\n                  {[...routes, ...protectedRoutes].map((data, i) => {\n                     const getComponent = () => {};\n                     return (\n                        <Route key={i} exact path={`/${data.url}`}>\n                           <Layout isPublic={data.isPublic}>\n                              <data.component />\n                           </Layout>\n                        </Route>\n                     );\n                  })}\n               </Else>\n            </If>\n\n            <Route component={Error404} />\n         </Switch>\n      </Router>\n   </Suspense>\n);\n\nconst mapStateToProps = ({ auth }) => ({\n   user: auth.user,\n});\n\nconst mapDispatchToProps = {};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Markup);\n","/home/muneeb/dev/diamond-tiles-frontend/src/store/auth/reducer.js",[],"/home/muneeb/dev/diamond-tiles-frontend/src/jsx/pages/Error404.js",[],"/home/muneeb/dev/diamond-tiles-frontend/src/jsx/pages/employees/EmployeeActions.js",["472","473","474","475","476","477","478","479","480","481","482","483","484","485"],"import useUrlState from '@ahooksjs/use-url-state';\nimport { useDebounce } from 'ahooks';\nimport { useFormik } from 'formik';\nimport Button from 'jsx/components/Button';\nimport Pagination from 'jsx/components/Pagination';\nimport SpinnerOverlay from 'jsx/components/SpinnerOverlay';\nimport { get, patch, post, useAlert, useMutation, useQuery } from 'jsx/helpers';\nimport PageTItle from 'jsx/layouts/PageTitle';\nimport React, { useEffect, useMemo, useState } from 'react';\nimport { ButtonGroup, Card, Table, OverlayTrigger, Popover } from 'react-bootstrap';\nimport { AiFillCaretLeft, AiFillSave, AiOutlineQuestionCircle } from 'react-icons/ai';\nimport { FaSort, FaSortDown, FaSortUp } from 'react-icons/fa';\nimport { Else, If, Then, When } from 'react-if';\nimport { useHistory, useParams } from 'react-router-dom';\nimport _ from 'lodash';\n\nconst EmployeeActions = () => {\n   const history = useHistory();\n   const params = useParams();\n   const [employee, setEmployee] = useState(null);\n   const [isError, setIsError] = useState(false);\n   const [page, setPage] = useState(1);\n   const [limit, setLimit] = useState(5);\n   const [sort, setSort] = useState({ field: null, order: 1 });\n   const [search, setSearch] = useState('');\n   const debouncedSearchValue = useDebounce(search, { wait: 500 });\n\n   const [urlState, setUrlState] = useUrlState({});\n\n   const alert = useAlert();\n   const isEditing = useMemo(() => urlState?.type === 'edit', [urlState.type]);\n   const isViewEmployee = useMemo(() => urlState?.type === 'view', [urlState.type]);\n   const isAddEmployee = useMemo(() => params?.id === 'add', [params.id]);\n\n   const query = useQuery(['employee', params.id], () => get(`/employees/id/${params.id}`), {\n      enabled: !isAddEmployee,\n      onError: (err) => {\n         setIsError(true);\n         alert.setErrorAlert({\n            message: 'Invalid URL!',\n            err: { message: ['The page will redirect to manage employees.'] },\n            callback: () => history.push('/employees'),\n            duration: 3000,\n         });\n      },\n   });\n   const patchMutation = useMutation((payload) => patch(`/employees/id/${params.id}`, payload), {\n      onSuccess: () => {\n         history.push('/employees');\n      },\n      onError: (err) => {\n         alert.setErrorAlert({\n            message: 'Unable to edit employee.',\n            err,\n         });\n      },\n   });\n\n   const postMutation = useMutation((payload) => post('/employees', payload), {\n      onSuccess: () => {\n         history.push('/employees');\n      },\n      onError: (err) => {\n         alert.setErrorAlert({ message: 'Unable to add employee', err });\n      },\n   });\n\n   const mutation = useMemo(() => (isEditing ? patchMutation : postMutation), [isEditing, patchMutation, postMutation]);\n\n   if (!isEditing && !isViewEmployee && !isAddEmployee) {\n      history.push('/employees');\n   }\n\n   const formik = useFormik({\n      initialValues: {\n         name: isEditing ? employee?.name : '',\n         phone: isEditing ? employee?.phone : '',\n         cnic: isEditing ? employee?.cnic : '',\n         address: isEditing ? employee?.address : '',\n         salary: isEditing ? employee?.salary : '',\n      },\n      validateOnChange: false,\n      validateOnBlur: false,\n      onSubmit: (values) => {\n         mutation.mutate(values);\n      },\n   });\n   const handleSort = (key) => {\n      setSort((prev) => ({ field: key, order: prev.order * -1 }));\n   };\n   useEffect(() => {\n      if (isEditing && query.data) {\n         formik.setFieldValue('name', query.data?.employee?.name ?? '');\n         formik.setFieldValue('phone', query.data?.employee?.phone ?? '');\n         formik.setFieldValue('cnic', query.data?.employee?.cnic ?? '');\n         formik.setFieldValue('address', query.data?.employee?.address ?? '');\n         formik.setFieldValue('salary', query.data?.employee?.salary ?? '');\n      }\n   }, [isEditing, query.data]);\n   useEffect(() => {\n      if (page > query.data?.sales?.totalPages) {\n         setPage((prev) => prev - 1);\n      }\n   }, [page, query.data?.sales?.totalPages]);\n   return (\n      <>\n         <PageTItle activeMenu=\"employees\" motherMenu=\"Manage\" />\n         {alert.getAlert()}\n         <Card>\n            <When condition={patchMutation.isLoading || postMutation.isLoading || query.isLoading}>\n               <SpinnerOverlay />\n            </When>\n            <If condition={isAddEmployee || isEditing}>\n               <Then>\n                  <form onSubmit={formik.handleSubmit}>\n                     <Card.Header>\n                        <Card.Title>{isEditing ? 'Edit Employee' : 'Add New Employee'}</Card.Title>\n                     </Card.Header>\n                     <Card.Body>\n                        <div className=\"row\">\n                           <div className=\"form-group col-xl-6\">\n                              <label className=\"col-form-label\">Name</label>\n                              <input\n                                 className=\"form-control\"\n                                 onChange={formik.handleChange}\n                                 type=\"text\"\n                                 name=\"name\"\n                                 disabled={isError}\n                                 value={formik.values.name}\n                              />\n                           </div>\n                        </div>\n                        <div className=\"row\">\n                           <div className=\"form-group col-xl-6\">\n                              <label className=\"col-form-label\">Phone</label>\n                              <input\n                                 className=\"form-control\"\n                                 onChange={formik.handleChange}\n                                 type=\"text\"\n                                 name=\"phone\"\n                                 disabled={isError}\n                                 value={formik.values.phone}\n                              />\n                           </div>\n                        </div>\n                        <div className=\"row\">\n                           <div className=\"form-group col-xl-6\">\n                              <label className=\"col-form-label\">CNIC</label>\n                              <input\n                                 className=\"form-control\"\n                                 onChange={formik.handleChange}\n                                 type=\"text\"\n                                 name=\"cnic\"\n                                 disabled={isError}\n                                 value={formik.values.cnic}\n                              />\n                           </div>\n                        </div>\n                        <div className=\"row\">\n                           <div className=\"form-group col-xl-6\">\n                              <label className=\"col-form-label\">Address</label>\n                              <input\n                                 className=\"form-control\"\n                                 onChange={formik.handleChange}\n                                 type=\"text\"\n                                 name=\"address\"\n                                 disabled={isError}\n                                 value={formik.values.address}\n                              />\n                           </div>\n                        </div>\n                        <div className=\"row\">\n                           <div className=\"form-group col-xl-6\">\n                              <label className=\"col-form-label\">Salary</label>\n                              <input\n                                 className=\"form-control\"\n                                 onChange={formik.handleChange}\n                                 type=\"text\"\n                                 name=\"salary\"\n                                 disabled={isError}\n                                 value={formik.values.salary}\n                              />\n                           </div>\n                        </div>\n                     </Card.Body>\n                     <Card.Footer>\n                        <div className=\"row\">\n                           <div className=\"col-xl-12 tw-justify-center\">\n                              <ButtonGroup>\n                                 <Button\n                                    icon={AiFillCaretLeft}\n                                    variant=\"warning light\"\n                                    onClick={() => history.replace('/employees')}\n                                    loading={mutation.isLoading}\n                                 >\n                                    Back\n                                 </Button>\n                                 <Button\n                                    icon={AiFillSave}\n                                    variant=\"primary\"\n                                    type=\"submit\"\n                                    loading={mutation.isLoading}\n                                    disabled={isError}\n                                 >\n                                    Save\n                                 </Button>\n                              </ButtonGroup>\n                           </div>\n                        </div>\n                     </Card.Footer>\n                  </form>\n               </Then>\n               <Else>\n                  <Card.Header>\n                     <Card.Title>View Employee</Card.Title>\n                  </Card.Header>\n                  <Card.Body>\n                     <div className=\"row\">\n                        <div className=\"form-group col-xl-6\">\n                           <label className=\"col-form-label\">Name</label>\n                           <h4>{query.data?.employee?.name}</h4>\n                        </div>\n                     </div>\n                     <div className=\"row\">\n                        <div className=\"form-group col-xl-6\">\n                           <label className=\"col-form-label\">Phone</label>\n                           <h4>{query.data?.employee?.phone}</h4>\n                        </div>\n                     </div>\n                     <div className=\"row\">\n                        <div className=\"form-group col-xl-6\">\n                           <label className=\"col-form-label\">CNIC</label>\n                           <h4>{query.data?.employee?.cnic}</h4>\n                        </div>\n                     </div>\n                     <div className=\"row\">\n                        <div className=\"form-group col-xl-6\">\n                           <label className=\"col-form-label\">Address</label>\n                           <h4>{query.data?.employee?.address}</h4>\n                        </div>\n                     </div>\n                     <div className=\"row\">\n                        <div className=\"form-group col-xl-6\">\n                           <label className=\"col-form-label\">Salary</label>\n                           <h4>{query.data?.employee?.salary}</h4>\n                        </div>\n                     </div>\n                  </Card.Body>\n                  <Card.Footer>\n                     <div className=\"row\">\n                        <div className=\"col-xl-12 tw-justify-center\">\n                           <Button\n                              icon={AiFillCaretLeft}\n                              variant=\"warning light\"\n                              onClick={() => history.replace('/employees')}\n                              loading={mutation.isLoading}\n                           >\n                              Back\n                           </Button>\n                        </div>\n                     </div>\n                  </Card.Footer>\n               </Else>\n            </If>\n         </Card>\n         {/* <When condition={isViewEmployee}>\n            <Card>\n               <When condition={query.isLoading}>\n                  <SpinnerOverlay />\n               </When>\n               <Card.Header>\n                  <Card.Title>View Related Salaries</Card.Title>\n               </Card.Header>\n               <Card.Body>\n                  <If condition={query.data?.salaries?.totalDocs > 0}>\n                     <Then>\n                        <Table className=\"tw-relative\" responsive>\n                           <thead>\n                              <tr>\n                                 <th className=\"width80\">\n                                    <strong>#</strong>\n                                 </th>\n                                 <th>\n                                    <strong className=\"tw-cursor-pointer\" onClick={() => handleSort('salary')}>\n                                       SALARY\n                                       <span>\n                                          <When condition={sort.field !== 'salary'}>\n                                             <FaSort className=\"d-inline mx-1\" />\n                                          </When>\n                                          <When condition={sort.field === 'salary' && sort.order === -1}>\n                                             <FaSortDown className=\"d-inline mx-1\" />\n                                          </When>\n                                          <When condition={sort.field === 'salary' && sort.order === 1}>\n                                             <FaSortUp className=\"d-inline mx-1\" />\n                                          </When>\n                                       </span>\n                                    </strong>\n                                 </th>\n                              </tr>\n                           </thead>\n                           <tbody>\n                              {query.data?.salaries?.docs?.map((e, index) => (\n                                 <tr key={`${e._id}`}>\n                                    <td>\n                                       <strong>{index + 1}</strong>\n                                    </td>\n                                    {/* <td>{e?.employee?.name ?? 'N/A'}</td> */}\n         {/* <td>{e?.employee?.salary ?? 'N/A'}</td>\n                                 </tr>\n                              ))}\n                           </tbody>\n                        </Table>\n                     </Then>\n                     <Else>\n                        <When condition={!query.isLoading}>\n                           <p className=\"tw-m-0\">No Salaries created</p>\n                        </When>\n                     </Else>\n                  </If>\n               </Card.Body>\n            </Card>\n         </When> */}\n\n         <When condition={limit > 5 ? true : query.data?.salaries?.totalPages > 1}>\n            <Pagination\n               page={page}\n               onPageChange={setPage}\n               onLimitChange={setLimit}\n               {..._.omit(query.data?.salaries, ['docs'])}\n               isLimitDisabled={query.isLoading}\n            />\n         </When>\n      </>\n   );\n};\n\nexport default EmployeeActions;\n","/home/muneeb/dev/diamond-tiles-frontend/src/jsx/pages/Registration.js",["486"],"import { post } from 'jsx/helpers';\r\nimport React, { useState } from 'react';\r\nimport { Link, useHistory } from 'react-router-dom';\r\nimport { When } from 'react-if';\r\nimport SpinnerOverlay from 'jsx/components/SpinnerOverlay';\r\n\r\nconst Register = () => {\r\n   const history = useHistory();\r\n\r\n   const [registrationData, setRegistrationData] = useState({});\r\n   const [isLoading, setIsLoading] = useState(false);\r\n   const handleBlur = (e) => {\r\n      const newRegistrationData = { ...registrationData };\r\n      newRegistrationData[e.target.name] = e.target.value;\r\n      setRegistrationData(newRegistrationData);\r\n   };\r\n   const handleRegister = async (e) => {\r\n      e.preventDefault();\r\n      setIsLoading(true);\r\n      try {\r\n         const res = await post('/auth/register', registrationData);\r\n         setIsLoading(false);\r\n         // localStorage.setItem('auth_token', res.token);\r\n         history.push('/page-login');\r\n      } catch (err) {\r\n         setIsLoading(false);\r\n         alert(err.response?.data?.data ?? err.message);\r\n      }\r\n   };\r\n   return (\r\n      <>\r\n         <When condition={isLoading}>\r\n            <SpinnerOverlay />\r\n         </When>\r\n         <div className=\"authincation\">\r\n            <div className=\"container p-0\">\r\n               <div className=\"row justify-content-center align-items-center tw-h-screen\">\r\n                  <div className=\"col-lg-6 col-md-9\">\r\n                     <div className=\"authincation-content\">\r\n                        <div className=\"row no-gutters\">\r\n                           <div className=\"col-xl-12\">\r\n                              <div className=\"auth-form\">\r\n                                 <h4 className=\"text-center mb-4\">Sign up your account</h4>\r\n                                 <form action=\"\" onSubmit={handleRegister}>\r\n                                    <div className=\"form-group\">\r\n                                       <label className=\"mb-1\" htmlFor=\"registration-username\">\r\n                                          <strong>Username</strong>\r\n                                       </label>\r\n                                       <input\r\n                                          id=\"registration-username\"\r\n                                          type=\"text\"\r\n                                          className=\"form-control\"\r\n                                          name=\"name\"\r\n                                          onChange={handleBlur}\r\n                                       />\r\n                                    </div>\r\n                                    {/* <div className=\"form-group\">\r\n                                    <label className=\"mb-1\" htmlFor=\"registration-email\">\r\n                                       <strong>Email</strong>\r\n                                    </label>\r\n                                    <input\r\n                                       id=\"registration-email\"\r\n                                       type=\"email\"\r\n                                       className=\"form-control\"\r\n                                       placeholder=\"hello@example.com\"\r\n                                       name=\"Email\"\r\n                                       onChange={handleBlur}\r\n                                    />\r\n                                 </div> */}\r\n                                    <div className=\"form-group\">\r\n                                       <label className=\"mb-1\" htmlFor=\"registration-password\">\r\n                                          <strong>Password</strong>\r\n                                       </label>\r\n                                       <input\r\n                                          id=\"registration-password\"\r\n                                          type=\"password\"\r\n                                          className=\"form-control\"\r\n                                          name=\"password\"\r\n                                          onChange={handleBlur}\r\n                                       />\r\n                                    </div>\r\n                                    <div className=\"form-group\">\r\n                                       <label className=\"mb-1\" htmlFor=\"registration-confirm-password\">\r\n                                          <strong>Confirm Password</strong>\r\n                                       </label>\r\n                                       <input\r\n                                          id=\"registration-confirm-password\"\r\n                                          type=\"password\"\r\n                                          className=\"form-control\"\r\n                                          name=\"passwordConfirm\"\r\n                                          onChange={handleBlur}\r\n                                       />\r\n                                    </div>\r\n                                    <div className=\"text-center mt-4\">\r\n                                       <button type=\"submit\" className=\"btn btn-primary btn-block\">\r\n                                          Sign me up\r\n                                       </button>\r\n                                    </div>\r\n                                 </form>\r\n                                 <div className=\"new-account mt-3\">\r\n                                    <p>\r\n                                       Already have an account?{' '}\r\n                                       <Link className=\"text-primary\" to=\"/page-login\">\r\n                                          Sign in\r\n                                       </Link>\r\n                                    </p>\r\n                                 </div>\r\n                              </div>\r\n                           </div>\r\n                        </div>\r\n                     </div>\r\n                  </div>\r\n               </div>\r\n            </div>\r\n         </div>\r\n      </>\r\n   );\r\n};\r\n\r\nexport default Register;\r\n","/home/muneeb/dev/diamond-tiles-frontend/src/jsx/pages/expenses/ExpenseActions.js",["487","488","489","490","491"],"import useUrlState from '@ahooksjs/use-url-state';\nimport { useDebounce } from 'ahooks';\nimport dayjs from 'dayjs';\nimport relativeTime from 'dayjs/plugin/relativeTime';\nimport { useFormik } from 'formik';\nimport Button from 'jsx/components/Button';\nimport SpinnerOverlay from 'jsx/components/SpinnerOverlay';\nimport { get, post, useAlert, useMutation, useQuery } from 'jsx/helpers';\nimport PageTItle from 'jsx/layouts/PageTitle';\nimport React, { useMemo, useState } from 'react';\nimport { ButtonGroup, Card } from 'react-bootstrap';\nimport { AiFillCaretLeft, AiFillSave } from 'react-icons/ai';\nimport { Else, If, Then, When } from 'react-if';\nimport { useQueryClient } from 'react-query';\nimport { useHistory, useParams } from 'react-router-dom';\nimport CreatableSelect from '../../components/CreatableSelect';\n\nconst ExpenseActions = () => {\n   dayjs.extend(relativeTime);\n\n   const history = useHistory();\n   const params = useParams();\n   const [isError, setIsError] = useState(false);\n   const [page, setPage] = useState(1);\n   const [limit, setLimit] = useState(5);\n   const [sort, setSort] = useState({ field: null, order: -1 });\n   const [search, setSearch] = useState('');\n   const debouncedSearchValue = useDebounce(search, { wait: 500 });\n\n   const [urlState, setUrlState] = useUrlState({});\n\n   const alert = useAlert();\n   const getTypes = useQuery('expenses/types', () => get('/expenses/types', 1, 999));\n   const queryClient = useQueryClient();\n\n   const isView = useMemo(() => urlState?.type === 'view', [urlState.type]);\n   const isAdd = useMemo(() => params?.id === 'add', [params.id]);\n\n   const query = useQuery(\n      ['expenses', params.id, page, limit, sort.field, sort.order, debouncedSearchValue],\n      () => get(`/expenses/id/${params.id}`, page, limit, sort.field, sort.order, debouncedSearchValue),\n      {\n         enabled: !isAdd,\n         onError: (err) => {\n            setIsError(true);\n            alert.setErrorAlert({\n               message: 'Invalid URL!',\n               err: { message: ['The page will redirect to manage expenses.'] },\n               callback: () => history.push('/expenses'),\n               duration: 3000,\n            });\n         },\n      }\n   );\n\n   const postMutation = useMutation((payload) => post('/expenses', payload), {\n      onSuccess: () => {\n         history.push('/expenses');\n      },\n      onError: (err) => {\n         alert.setErrorAlert({ message: 'Unable to add product', err });\n      },\n   });\n   const postTypeMutation = useMutation((payload) => post('/expenses/types', payload), {\n      onSuccess: async () => {\n         await queryClient.invalidateQueries('expenses/types');\n      },\n   });\n\n   const mutation = useMemo(() => postMutation, [postMutation]);\n\n   if (!isView && !isAdd) {\n      history.push('/expenses');\n   }\n\n   const formik = useFormik({\n      initialValues: {\n         title: '',\n         amount: '',\n         type: '',\n         comments: '',\n      },\n      validateOnChange: false,\n      validateOnBlur: false,\n      onSubmit: (values) => {\n         mutation.mutate(values);\n      },\n   });\n\n   const handleCreateType = async (title) => {\n      postTypeMutation.mutate({ title });\n      // history.push({ pathname: '/types', search: `?action=add&title=${title}&redirect=/products/add` });\n   };\n   return (\n      <>\n         <div className=\"row p-0 m-0\">\n            <div className=\"col-10\">\n               <PageTItle activeMenu=\"View\" motherMenu=\"Products\" />\n            </div>\n            <div className=\"col-1\">\n               <Button\n                  icon={AiFillCaretLeft}\n                  variant=\"warning light\"\n                  onClick={() => history.goBack()}\n                  loading={mutation.isLoading}\n               >\n                  Back\n               </Button>\n            </div>\n         </div>\n         {alert.getAlert()}\n         <Card>\n            <When condition={getTypes.isLoading || postTypeMutation.isLoading || query.isLoading}>\n               <SpinnerOverlay />\n            </When>\n            <If condition={isAdd}>\n               <Then>\n                  <form onSubmit={formik.handleSubmit}>\n                     <Card.Header>\n                        <Card.Title>Add New Expense</Card.Title>\n                     </Card.Header>\n                     <Card.Body>\n                        <div className=\"row\">\n                           <div className=\"form-group col-xl-6\">\n                              <label className=\"col-form-label\">Title</label>\n                              <input\n                                 className=\"form-control\"\n                                 onChange={formik.handleChange}\n                                 type=\"text\"\n                                 name=\"title\"\n                                 disabled={isError}\n                                 value={formik.values.title}\n                              />\n                           </div>\n                        </div>\n                        <div className=\"row\">\n                           <div className=\"form-group col-xl-6\">\n                              <label className=\"col-form-label\">Amount</label>\n                              <input\n                                 className=\"form-control\"\n                                 onChange={formik.handleChange}\n                                 type=\"text\"\n                                 name=\"amount\"\n                                 disabled={isError}\n                                 value={formik.values.amount}\n                              />\n                           </div>\n                        </div>\n                        <div className=\"row\">\n                           <div className=\"form-group col-xl-6\">\n                              <label className=\"col-form-label\">Comments</label>\n                              <input\n                                 className=\"form-control\"\n                                 onChange={formik.handleChange}\n                                 type=\"text\"\n                                 name=\"comments\"\n                                 disabled={isError}\n                                 value={formik.values.comments}\n                              />\n                           </div>\n                        </div>\n                        <div className=\"row\">\n                           <div className=\"form-group col-xl-6\">\n                              <label className=\"col-form-label\">Type</label>\n                              {isAdd && (\n                                 <CreatableSelect\n                                    isClearable\n                                    onChange={(e) => formik.setFieldValue('type', e?._id)}\n                                    options={\n                                       getTypes.data?.length > 0 &&\n                                       getTypes.data.map((e) => ({ ...e, label: e.title, value: e.title }))\n                                    }\n                                    onCreateOption={handleCreateType}\n                                 />\n                              )}\n                           </div>\n                        </div>\n                     </Card.Body>\n                     <Card.Footer>\n                        <div className=\"row\">\n                           <div className=\"col-xl-12 tw-justify-center\">\n                              <ButtonGroup>\n                                 {/* <Button\n                                    icon={AiFillCaretLeft}\n                                    variant=\"warning light\"\n                                    onClick={() => history.replace('/products')}\n                                    loading={mutation.isLoading}\n                                 >\n                                    Back\n                                 </Button> */}\n                                 <Button\n                                    icon={AiFillSave}\n                                    variant=\"primary\"\n                                    type=\"submit\"\n                                    loading={mutation.isLoading}\n                                    disabled={isError}\n                                 >\n                                    Save\n                                 </Button>\n                              </ButtonGroup>\n                           </div>\n                        </div>\n                     </Card.Footer>\n                  </form>\n               </Then>\n               <Else>\n                  <Card.Header>\n                     <Card.Title>View product</Card.Title>\n                  </Card.Header>\n                  <Card.Body>\n                     <div className=\"row\">\n                        <div className=\"form-group col-xl-6\">\n                           <label className=\"col-form-label\">Title</label>\n                           <h4>{query.data?.title ?? 'N/A'}</h4>\n                        </div>\n                     </div>\n                     <div className=\"row\">\n                        <div className=\"form-group col-xl-6\">\n                           <label className=\"col-form-label\">Amount</label>\n                           <h4>{query.data?.amount ?? 'N/A'}</h4>\n                        </div>\n                     </div>\n                     <div className=\"row\">\n                        <div className=\"form-group col-xl-6\">\n                           <label className=\"col-form-label\">Type</label>\n                           <h4>{query.data?.type?.title ?? 'N/A'}</h4>\n                        </div>\n                     </div>\n                     <div className=\"row\">\n                        <div className=\"form-group col-xl-6\">\n                           <label className=\"col-form-label\">Comments</label>\n                           <h4>{query.data?.comments ?? 'N/A'}</h4>\n                        </div>\n                     </div>\n                  </Card.Body>\n               </Else>\n            </If>\n         </Card>\n      </>\n   );\n};\n\nexport default ExpenseActions;\n","/home/muneeb/dev/diamond-tiles-frontend/src/jsx/pages/purchase/AddPurchase.js",["492","493","494","495","496","497","498","499","500","501","502","503"],"/* eslint-disable react/no-this-in-sfc */\nimport Button from 'jsx/components/Button';\nimport ModalWrapper from 'jsx/components/ModalWrapper';\nimport SpinnerOverlay from 'jsx/components/SpinnerOverlay';\nimport { get, getV2, patch, post, useAlert, useMutation, useQuery } from 'jsx/helpers';\nimport PageTItle from 'jsx/layouts/PageTitle';\nimport React, { useEffect, useMemo, useRef, useState } from 'react';\nimport { ButtonGroup, Card, Table } from 'react-bootstrap';\nimport { AiFillCaretLeft, AiFillSave } from 'react-icons/ai';\nimport { FaMinusCircle, FaPlusCircle } from 'react-icons/fa';\nimport { Else, If, Then, When } from 'react-if';\nimport { useHistory, useLocation } from 'react-router-dom';\nimport { setProductsData, setProductsVisibility, setSuppliersData, setSuppliersVisibility } from 'store/actions';\nimport { batch, useDispatch } from 'react-redux';\nimport cls from 'classnames';\nimport _ from 'lodash';\nimport produce from 'immer';\nimport QueryString from 'qs';\nimport CreatableSelect from '../../components/CreatableSelect';\n\nconst PurchaseActions = () => {\n   const history = useHistory();\n\n   const alert = useAlert();\n   const dispatch = useDispatch();\n   const location = useLocation();\n   const [purchaseId, setPurchaseId] = useState(null);\n\n   const [purchase, setPurchase] = useState({\n      supplier: null,\n      paid: '0',\n      products: [{ product: null, sourcePrice: '0', variants: { a: '', b: '', c: '', d: '' }, quantity: '' }],\n   });\n\n   const existingPurchase = useQuery(['existing-purchase', purchaseId], () => getV2(`/purchases/id/${purchaseId}`), {\n      enabled: false,\n      onSuccess: (data) => {\n         console.log(data);\n\n         const updatedPurchase = produce(purchase, (draft) => {\n            draft.supplier = data.supplier;\n            draft.paid = data.paid;\n\n            const processedProducts = data.products.map((p) => {\n               const updatedProduct = { ...p };\n               const unitValue = updatedProduct.product.unit.value;\n               if (updatedProduct.product.type.title.toLowerCase() === 'tile') {\n                  Object.entries(updatedProduct.variants).forEach(([key, value]) => {\n                     let stringifiedQuantity = value / unitValue;\n                     if (!Number.isInteger(stringifiedQuantity)) stringifiedQuantity = `${value}t`;\n                     else stringifiedQuantity = `${stringifiedQuantity.toString()}b`;\n                     updatedProduct.variants[key] = stringifiedQuantity;\n                  });\n               } else {\n                  let stringifiedQuantity = updatedProduct.quantity / unitValue;\n                  if (!Number.isInteger(stringifiedQuantity)) stringifiedQuantity = `${updatedProduct.quantity}t`;\n                  else stringifiedQuantity = `${stringifiedQuantity.toString()}b`;\n                  updatedProduct.quantity = stringifiedQuantity;\n               }\n\n               console.log(updatedProduct);\n               return updatedProduct;\n            });\n\n            draft.products = processedProducts;\n         });\n\n         setPurchase(updatedPurchase);\n      },\n      onError: (err) => {\n         alert.setErrorAlert({ message: 'Unable to get existing purchcase', err });\n      },\n   });\n\n   useEffect(() => {\n      const pId = location.state?.purchaseId;\n      if (pId) setPurchaseId(pId);\n   }, []);\n\n   useEffect(() => {\n      console.log('purchaseId:%s', purchaseId);\n      if (purchaseId) existingPurchase.refetch();\n   }, [purchaseId]);\n\n   const suppliers = useQuery('all-suppliers', () =>\n      getV2('/suppliers', { page: 1, limit: 1000, search: '', sort: { name: 1 } })\n   );\n   const unitsQuery = useQuery(['units'], () => get('/units', 1, 10000, ''));\n   const products = useQuery('all-products', () =>\n      getV2('/products', { page: 1, limit: 1000, search: '', sort: { modelNumber: 1 } })\n   );\n\n   const postMutation = useMutation((payload) => post('/purchases', payload), {\n      onSuccess: () => {\n         history.replace('/purchase');\n      },\n      onError: (err) => {\n         alert.setErrorAlert({ message: 'Unable to add Purchase', err });\n      },\n   });\n\n   const patchMutation = useMutation((payload) => patch(`/purchases/id/${purchaseId}`, payload), {\n      onSuccess: () => {\n         history.replace('/purchase');\n      },\n      onError: (err) => {\n         alert.setErrorAlert({ message: 'Unable to edit Purchase', err });\n      },\n   });\n\n   const mutation = useMemo(\n      () => (purchaseId ? patchMutation : postMutation),\n      [patchMutation, postMutation, purchaseId]\n   );\n\n   const handleChangeProduct = (key, value, index) => {\n      const updatedPurchase = produce(purchase, (draft) => {\n         draft.products[index][key] = value;\n      });\n      setPurchase(updatedPurchase);\n   };\n\n   const handleChangeVariantQuantity = (key, value, index) => {\n      const updatedPurchase = produce(purchase, (draft) => {\n         draft.products[index].variants[key] = value;\n      });\n      setPurchase(updatedPurchase);\n   };\n\n   const handleAddProduct = () => {\n      const updatedPurchase = produce(purchase, (draft) => {\n         draft.products.push({\n            product: null,\n            sourcePrice: '0',\n            variants: { a: '', b: '', c: '', d: '' },\n            quantity: '',\n         });\n      });\n      setPurchase(updatedPurchase);\n   };\n\n   const handleRemoveProduct = (productIndex) => {\n      const updatedPurchase = produce(purchase, (draft) => {\n         draft.products.splice(productIndex, 1);\n      });\n      setPurchase(updatedPurchase);\n   };\n\n   const handleSubmit = (e) => {\n      e.preventDefault();\n\n      let error = '';\n\n      const isValidQuantity = (qty) => qty.includes('t') || qty.includes('T') || qty.includes('b') || qty.includes('B');\n\n      const payload = produce(purchase, (draft) => {\n         draft.supplier = draft.supplier?._id;\n\n         const referenceProducts = _.cloneDeep(draft.products);\n\n         const updatedProducts = [];\n\n         referenceProducts.forEach((referenceProduct, index) => {\n            // product & price is must\n            if (referenceProduct.product && referenceProduct.sourcePrice !== '') {\n               const processedProduct = {};\n               // send only product _id to backend\n               processedProduct.product = referenceProduct.product._id;\n               processedProduct.sourcePrice = Number(referenceProduct.sourcePrice);\n\n               if (referenceProduct.quantity) {\n                  if (!isValidQuantity(referenceProduct.quantity)) error = true;\n                  processedProduct.quantity = referenceProduct.quantity;\n               } else if (referenceProduct.variants) {\n                  const variants = _.cloneDeep(referenceProduct.variants);\n\n                  // delete empty variants\n                  Object.entries(variants).forEach(([key, value]) => {\n                     if (!value) return delete variants[key];\n                     if (!isValidQuantity(value)) error = true;\n                  });\n\n                  if (Object.keys(variants).length > 0) processedProduct.variants = variants;\n               }\n\n               if (processedProduct.variants || processedProduct.quantity) updatedProducts.push(processedProduct);\n            }\n         });\n\n         draft.products = updatedProducts;\n      });\n\n      const { supplier, paid } = payload;\n      const messages = [];\n\n      if (!supplier) messages.push('Please enter a supplier');\n      if (paid === undefined || paid === null) messages.push('Please enter the paid amount');\n      if (!payload.products.length) messages.push('Please enter product(s)');\n      if (error) messages.push('Please enter valid units with quantity(s)');\n\n      if (messages.length) {\n         alert.setErrorAlert({\n            messages: 'Unable to add new purchase',\n            err: { response: { data: { data: messages } } },\n         });\n         return;\n      }\n\n      mutation.mutate(payload);\n   };\n\n   return (\n      <>\n         <When\n            condition={\n               mutation.isLoading ||\n               unitsQuery.isLoading ||\n               products.isLoading ||\n               suppliers.isLoading ||\n               (purchaseId ? existingPurchase.isLoading : false)\n            }\n         >\n            <SpinnerOverlay />\n         </When>\n         <PageTItle activeMenu=\"Add New Purchase\" motherMenu=\"Manage\" />\n         {alert.getAlert()}\n         <form onSubmit={handleSubmit}>\n            <Card>\n               <Card.Header>\n                  <Card.Title>Add New Purchase</Card.Title>\n               </Card.Header>\n               <Card.Body>\n                  <div className=\"row\">\n                     <div className=\"form-group col-xl-2\">\n                        <label className=\"col-form-label\">Supplier</label>\n                        <CreatableSelect\n                           value={\n                              purchase.supplier ? { label: purchase.supplier.name, value: purchase.supplier } : null\n                           }\n                           onChange={(supplier) => setPurchase((prev) => ({ ...prev, supplier: supplier.value }))}\n                           options={suppliers.data?.docs.map((supplier) => ({ label: supplier.name, value: supplier }))}\n                           onCreateOption={(name) =>\n                              batch(() => {\n                                 dispatch(setSuppliersData({ name }));\n                                 dispatch(setSuppliersVisibility(true));\n                              })\n                           }\n                        />\n                     </div>\n                     <div className=\"form-group col-xl-2\">\n                        <label className=\"col-form-label\">Paid</label>\n                        <input\n                           className=\"form-control\"\n                           onChange={(e) => setPurchase((prev) => ({ ...prev, paid: e.target.value }))}\n                           type=\"text\"\n                           name=\"paid\"\n                           value={purchase.paid}\n                        />\n                     </div>\n                     <div className=\"form-group tw-mt-[38px]\">\n                        <Button variant=\"primary\" onClick={handleAddProduct}>\n                           Add New Product\n                        </Button>\n                     </div>\n                  </div>\n               </Card.Body>\n            </Card>\n\n            <div className=\"tw-flex tw-flex-wrap tw-gap-4\">\n               {purchase.products.map((product, index) => (\n                  <Card className=\"tw-max-w-[350px] tw-min-h-[435px]\" key={`product-${index}`}>\n                     <Card.Body>\n                        <div className=\"form-group\">\n                           <label className=\"col-form-label\">Product</label>\n                           <CreatableSelect\n                              value={\n                                 purchase.products[index].product\n                                    ? {\n                                         label: purchase.products[index].product.modelNumber,\n                                         value: purchase.products[index].product,\n                                      }\n                                    : null\n                              }\n                              onChange={(p) => handleChangeProduct('product', p.value, index)}\n                              options={products.data?.docs.map((p) => ({\n                                 label: p.modelNumber,\n                                 value: p,\n                              }))}\n                              onCreateOption={(modelNumber) =>\n                                 batch(() => {\n                                    dispatch(setProductsData({ modelNumber }));\n                                    dispatch(setProductsVisibility(true));\n                                 })\n                              }\n                           />\n                        </div>\n                        <When condition={purchase.products[index].product}>\n                           <If condition={purchase.products[index].product?.type.title.toLowerCase() !== 'tile'}>\n                              <Then>\n                                 <div className=\"form-group\">\n                                    <label className=\"col-form-label\">Quantity</label>\n                                    <input\n                                       className=\"form-control\"\n                                       onChange={(e) => handleChangeProduct('quantity', e.target.value, index)}\n                                       type=\"text\"\n                                       name=\"modelNumber\"\n                                       value={purchase.products[index].quantity}\n                                    />\n                                 </div>\n                              </Then>\n                              <Else>\n                                 <div className=\"form-group\">\n                                    <label className=\"col-form-label\">Quantity</label>\n                                    <div className=\"row tw-px-4\">\n                                       <div className=\"col-xl-3 tw-p-0\">\n                                          <input\n                                             className=\"form-control\"\n                                             onChange={(e) => handleChangeVariantQuantity('a', e.target.value, index)}\n                                             type=\"text\"\n                                             name=\"modelNumber\"\n                                             placeholder=\"A\"\n                                             // disabled={isError}\n                                             value={purchase.products[index].variants?.a}\n                                          />\n                                       </div>\n                                       <div className=\"col-xl-3 tw-p-0\">\n                                          <input\n                                             className=\"form-control\"\n                                             onChange={(e) => handleChangeVariantQuantity('b', e.target.value, index)}\n                                             type=\"text\"\n                                             name=\"modelNumber\"\n                                             placeholder=\"B\"\n                                             // disabled={isError}\n                                             value={purchase.products[index].variants?.b}\n                                          />\n                                       </div>\n                                       <div className=\"col-xl-3 tw-p-0\">\n                                          <input\n                                             className=\"form-control\"\n                                             onChange={(e) => handleChangeVariantQuantity('c', e.target.value, index)}\n                                             type=\"text\"\n                                             name=\"modelNumber\"\n                                             placeholder=\"C\"\n                                             // disabled={isError}\n                                             value={purchase.products[index].variants?.c}\n                                          />\n                                       </div>\n                                       <div className=\"col-xl-3 tw-p-0\">\n                                          <input\n                                             className=\"form-control\"\n                                             onChange={(e) => handleChangeVariantQuantity('d', e.target.value, index)}\n                                             type=\"text\"\n                                             name=\"modelNumber\"\n                                             placeholder=\"D\"\n                                             // disabled={isError}\n                                             value={purchase.products[index].variants?.d}\n                                          />\n                                       </div>\n                                    </div>\n                                 </div>\n                              </Else>\n                           </If>\n                        </When>\n                        <div className={cls('form-group', { 'tw-mt-[126px]': !purchase.products[index].product })}>\n                           <label className=\"col-form-label\">Price</label>\n                           <input\n                              className=\"form-control\"\n                              onChange={(e) => handleChangeProduct('sourcePrice', e.target.value, index)}\n                              type=\"number\"\n                              name=\"modelNumber\"\n                              value={purchase.products[index].sourcePrice}\n                           />\n                        </div>\n                        <When condition={index > 0}>\n                           <Button\n                              variant=\"danger\"\n                              className=\"tw-w-full tw-flex tw-justify-center\"\n                              onClick={() => handleRemoveProduct(index)}\n                           >\n                              Remove\n                           </Button>\n                        </When>\n                     </Card.Body>\n                  </Card>\n               ))}\n            </div>\n\n            <Card>\n               <Card.Footer>\n                  <div className=\"row\">\n                     <div className=\"col-xl-12 tw-justify-center\">\n                        <ButtonGroup>\n                           <Button\n                              icon={AiFillCaretLeft}\n                              variant=\"warning light\"\n                              onClick={() => history.replace('/purchase')}\n                              loading={mutation.isLoading}\n                           >\n                              Back\n                           </Button>\n                           <Button icon={AiFillSave} variant=\"primary\" type=\"submit\" loading={mutation.isLoading}>\n                              Save\n                           </Button>\n                        </ButtonGroup>\n                     </div>\n                  </div>\n               </Card.Footer>\n            </Card>\n         </form>\n      </>\n   );\n};\n\nexport default PurchaseActions;\n","/home/muneeb/dev/diamond-tiles-frontend/src/jsx/pages/sale/AddSale.js",["504","505","506","507","508","509","510","511","512","513","514","515"],"/* eslint-disable react/no-this-in-sfc */\nimport Button from 'jsx/components/Button';\nimport ModalWrapper from 'jsx/components/ModalWrapper';\nimport SpinnerOverlay from 'jsx/components/SpinnerOverlay';\nimport { get, getV2, patch, post, useAlert, useMutation, useQuery } from 'jsx/helpers';\nimport PageTItle from 'jsx/layouts/PageTitle';\nimport React, { useEffect, useMemo, useRef, useState } from 'react';\nimport { ButtonGroup, Card, Table } from 'react-bootstrap';\nimport { AiFillCaretLeft, AiFillSave } from 'react-icons/ai';\nimport { FaMinusCircle, FaPlusCircle } from 'react-icons/fa';\nimport { Else, If, Then, When } from 'react-if';\nimport { useHistory, useLocation } from 'react-router-dom';\nimport {\n   setCustomersData,\n   setCustomersVisibility,\n   setProductsData,\n   setProductsVisibility,\n   setSuppliersData,\n   setSuppliersVisibility,\n} from 'store/actions';\nimport { batch, useDispatch } from 'react-redux';\nimport cls from 'classnames';\nimport _ from 'lodash';\nimport produce from 'immer';\nimport CreatableSelect from '../../components/CreatableSelect';\n\nconst AddSale = () => {\n   const history = useHistory();\n\n   const alert = useAlert();\n   const dispatch = useDispatch();\n   const [saleId, setSaleId] = useState(null);\n   const location = useLocation();\n\n   const [sale, setSale] = useState({\n      customer: null,\n      paid: '0',\n      products: [\n         { product: null, sourcePrice: '0', retailPrice: '0', variants: { a: '', b: '', c: '', d: '' }, quantity: '' },\n      ],\n   });\n\n   const existingSale = useQuery(['existing-sale', saleId], () => getV2(`/sales/id/${saleId}`), {\n      enabled: false,\n      onSuccess: (data) => {\n         console.log(data);\n\n         const updatedSale = produce(sale, (draft) => {\n            draft.customer = data.customer;\n            draft.paid = data.paid;\n\n            const processedProducts = data.products.map((p) => {\n               const updatedProduct = { ...p };\n               const unitValue = updatedProduct.product.unit.value;\n               if (updatedProduct.product.type.title.toLowerCase() === 'tile') {\n                  Object.entries(updatedProduct.variants).forEach(([key, value]) => {\n                     let stringifiedQuantity = value / unitValue;\n                     if (!Number.isInteger(stringifiedQuantity)) stringifiedQuantity = `${value}t`;\n                     else stringifiedQuantity = `${stringifiedQuantity.toString()}b`;\n                     updatedProduct.variants[key] = stringifiedQuantity;\n                  });\n               } else {\n                  let stringifiedQuantity = updatedProduct.quantity / unitValue;\n                  if (!Number.isInteger(stringifiedQuantity)) stringifiedQuantity = `${updatedProduct.quantity}t`;\n                  else stringifiedQuantity = `${stringifiedQuantity.toString()}b`;\n                  updatedProduct.quantity = stringifiedQuantity;\n               }\n\n               console.log(updatedProduct);\n               return updatedProduct;\n            });\n\n            draft.products = processedProducts;\n         });\n\n         setSale(updatedSale);\n      },\n      onError: (err) => {\n         alert.setErrorAlert({ message: 'Unable to get existing sale', err });\n      },\n   });\n\n   useEffect(() => {\n      const sId = location.state?.saleId;\n      if (sId) setSaleId(sId);\n   }, []);\n\n   useEffect(() => {\n      if (saleId) existingSale.refetch();\n   }, [saleId]);\n\n   const customers = useQuery('all-customers', () =>\n      getV2('/customers', { page: 1, limit: 1000, search: '', sort: { name: 1 } })\n   );\n   const inventories = useQuery('all-inventories', () =>\n      getV2('/inventories', { page: 1, limit: 1000, search: '', sort: { 'product.modelNumber': 1 } })\n   );\n\n   const postMutation = useMutation((payload) => post('/sales', payload), {\n      onSuccess: () => {\n         history.replace('/sale');\n      },\n      onError: (err) => {\n         alert.setErrorAlert({ message: 'Unable to add Sale', err });\n      },\n   });\n\n   const patchMutation = useMutation((payload) => patch(`/sales/id/${saleId}`, payload), {\n      onSuccess: () => {\n         history.replace('/sale');\n      },\n      onError: (err) => {\n         alert.setErrorAlert({ message: 'Unable to edit Sale', err });\n      },\n   });\n\n   const mutation = useMemo(() => (saleId ? patchMutation : postMutation), [patchMutation, postMutation, saleId]);\n\n   const handleChangeProduct = (key, value, index) => {\n      const updatedSale = produce(sale, (draft) => {\n         draft.products[index][key] = value;\n      });\n      setSale(updatedSale);\n   };\n\n   const handleChangeVariantQuantity = (key, value, index) => {\n      const updatedSale = produce(sale, (draft) => {\n         draft.products[index].variants[key] = value;\n      });\n      setSale(updatedSale);\n   };\n\n   const handleAddProduct = () => {\n      const updatedSale = produce(sale, (draft) => {\n         draft.products.push({\n            product: null,\n            sourcePrice: '0',\n            retailPrice: '0',\n            variants: { a: '', b: '', c: '', d: '' },\n            quantity: '',\n         });\n      });\n      setSale(updatedSale);\n   };\n\n   const handleRemoveProduct = (productIndex) => {\n      const updatedSale = produce(sale, (draft) => {\n         draft.products.splice(productIndex, 1);\n      });\n      setSale(updatedSale);\n   };\n\n   const handleSubmit = (e) => {\n      e.preventDefault();\n\n      const isValidQuantity = (qty) => qty.includes('t') || qty.includes('T') || qty.includes('b') || qty.includes('B');\n      let error = false;\n\n      const payload = produce(sale, (draft) => {\n         draft.customer = draft.customer?._id;\n\n         const referenceProducts = _.cloneDeep(draft.products);\n\n         const updatedProducts = [];\n\n         referenceProducts.forEach((referenceProduct) => {\n            // product & price is must\n            if (\n               referenceProduct.product &&\n               referenceProduct.sourcePrice !== '' &&\n               referenceProduct.retailPrice !== ''\n            ) {\n               const processedProduct = {};\n               // send only product _id to backend\n               processedProduct.product = referenceProduct.product._id;\n               processedProduct.sourcePrice = Number(referenceProduct.sourcePrice);\n               processedProduct.retailPrice = Number(referenceProduct.retailPrice);\n\n               if (referenceProduct.quantity) {\n                  if (!isValidQuantity(referenceProduct.quantity)) error = true;\n                  processedProduct.quantity = referenceProduct.quantity;\n               } else if (referenceProduct.variants) {\n                  const variants = _.cloneDeep(referenceProduct.variants);\n\n                  // delete empty variants\n                  Object.entries(variants).forEach(([key, value]) => {\n                     if (!value) return delete variants[key];\n                     if (!isValidQuantity(value)) error = true;\n                  });\n\n                  if (Object.keys(variants).length > 0) processedProduct.variants = variants;\n               }\n\n               if (processedProduct.variants || processedProduct.quantity) updatedProducts.push(processedProduct);\n            }\n         });\n\n         draft.products = updatedProducts;\n      });\n\n      const { customer, paid } = payload;\n      const messages = [];\n\n      if (!customer) messages.push('Please enter a customer');\n      if (paid === undefined || paid === null) messages.push('Please enter the paid amount');\n      if (!payload.products.length) messages.push('Please enter product(s)');\n      if (error) messages.push('Please enter valid units with quantity(s)');\n\n      if (messages.length) {\n         alert.setErrorAlert({\n            messages: 'Unable to add new sale',\n            err: { response: { data: { data: messages } } },\n         });\n         return;\n      }\n\n      mutation.mutate(payload);\n   };\n\n   return (\n      <>\n         <When\n            condition={\n               postMutation.isLoading || patchMutation.isLoading || inventories.isLoading || customers.isLoading\n            }\n         >\n            <SpinnerOverlay />\n         </When>\n         <PageTItle activeMenu=\"Add New Sale\" motherMenu=\"Manage\" />\n         {alert.getAlert()}\n         <form onSubmit={handleSubmit}>\n            <Card>\n               <Card.Header>\n                  <Card.Title>Add New Sale</Card.Title>\n               </Card.Header>\n               <Card.Body>\n                  <div className=\"row\">\n                     <div className=\"form-group col-xl-2\">\n                        <label className=\"col-form-label\">Customer</label>\n                        <CreatableSelect\n                           value={sale.customer ? { label: sale.customer.name, value: sale.customer } : null}\n                           onChange={(customer) => setSale((prev) => ({ ...prev, customer: customer.value }))}\n                           options={customers.data?.docs.map((customer) => ({ label: customer.name, value: customer }))}\n                           onCreateOption={(name) =>\n                              batch(() => {\n                                 dispatch(setCustomersData({ name }));\n                                 dispatch(setCustomersVisibility(true));\n                              })\n                           }\n                        />\n                     </div>\n                     <div className=\"form-group col-xl-2\">\n                        <label className=\"col-form-label\">Paid</label>\n                        <input\n                           className=\"form-control\"\n                           onChange={(e) => setSale((prev) => ({ ...prev, paid: e.target.value }))}\n                           type=\"text\"\n                           name=\"paid\"\n                           value={sale.paid}\n                        />\n                     </div>\n                     <div className=\"form-group tw-mt-[38px]\">\n                        <Button variant=\"primary\" onClick={handleAddProduct}>\n                           Add New Product\n                        </Button>\n                     </div>\n                  </div>\n               </Card.Body>\n            </Card>\n\n            <div className=\"tw-flex tw-flex-wrap tw-gap-4\">\n               {sale.products.map((saleProduct, index) => (\n                  <Card className=\"tw-max-w-[350px] tw-min-h-[435px]\" key={`product-${index}`}>\n                     <Card.Body>\n                        <div className=\"form-group\">\n                           <label className=\"col-form-label\">Product</label>\n                           <CreatableSelect\n                              value={\n                                 saleProduct.product\n                                    ? {\n                                         label: saleProduct.product.modelNumber,\n                                         value: saleProduct.product,\n                                      }\n                                    : null\n                              }\n                              onChange={(p) => handleChangeProduct('product', p.value, index)}\n                              options={inventories.data?.docs.map((i) => ({\n                                 label: i.product.modelNumber,\n                                 value: i.product,\n                              }))}\n                              onCreateOption={(modelNumber) =>\n                                 batch(() => {\n                                    dispatch(setProductsData({ modelNumber }));\n                                    dispatch(setProductsVisibility(true));\n                                 })\n                              }\n                           />\n                        </div>\n                        <When condition={saleProduct.product}>\n                           <If condition={saleProduct.product?.type.title.toLowerCase() !== 'tile'}>\n                              <Then>\n                                 <div className=\"form-group\">\n                                    <label className=\"col-form-label\">Quantity</label>\n                                    <input\n                                       className=\"form-control\"\n                                       onChange={(e) => handleChangeProduct('quantity', e.target.value, index)}\n                                       type=\"text\"\n                                       value={saleProduct.quantity}\n                                    />\n                                 </div>\n                              </Then>\n                              <Else>\n                                 <div className=\"form-group\">\n                                    <label className=\"col-form-label\">Quantity</label>\n                                    <div className=\"row tw-px-4\">\n                                       <div className=\"col-xl-3 tw-p-0\">\n                                          <input\n                                             className=\"form-control\"\n                                             onChange={(e) => handleChangeVariantQuantity('a', e.target.value, index)}\n                                             type=\"text\"\n                                             placeholder=\"A\"\n                                             value={saleProduct.variants.a}\n                                          />\n                                       </div>\n                                       <div className=\"col-xl-3 tw-p-0\">\n                                          <input\n                                             className=\"form-control\"\n                                             onChange={(e) => handleChangeVariantQuantity('b', e.target.value, index)}\n                                             type=\"text\"\n                                             placeholder=\"B\"\n                                             value={saleProduct.variants.b}\n                                          />\n                                       </div>\n                                       <div className=\"col-xl-3 tw-p-0\">\n                                          <input\n                                             className=\"form-control\"\n                                             onChange={(e) => handleChangeVariantQuantity('c', e.target.value, index)}\n                                             type=\"text\"\n                                             placeholder=\"C\"\n                                             value={saleProduct.variants.c}\n                                          />\n                                       </div>\n                                       <div className=\"col-xl-3 tw-p-0\">\n                                          <input\n                                             className=\"form-control\"\n                                             onChange={(e) => handleChangeVariantQuantity('d', e.target.value, index)}\n                                             type=\"text\"\n                                             placeholder=\"D\"\n                                             value={saleProduct.variants.d}\n                                          />\n                                       </div>\n                                    </div>\n                                 </div>\n                              </Else>\n                           </If>\n                        </When>\n                        <div className={cls('form-group', { 'tw-mt-[126px]': !saleProduct.product })}>\n                           <label className=\"col-form-label\">Source Price</label>\n                           <input\n                              className=\"form-control\"\n                              onChange={(e) => handleChangeProduct('sourcePrice', e.target.value, index)}\n                              type=\"number\"\n                              value={saleProduct.sourcePrice}\n                           />\n                        </div>\n                        <div className=\"form-group\">\n                           <label className=\"col-form-label\">Retail Price</label>\n                           <input\n                              className=\"form-control\"\n                              onChange={(e) => handleChangeProduct('retailPrice', e.target.value, index)}\n                              type=\"number\"\n                              value={saleProduct.retailPrice}\n                           />\n                        </div>\n                        <When condition={index > 0}>\n                           <Button\n                              variant=\"danger\"\n                              className=\"tw-w-full tw-flex tw-justify-center\"\n                              onClick={() => handleRemoveProduct(index)}\n                           >\n                              Remove\n                           </Button>\n                        </When>\n                     </Card.Body>\n                  </Card>\n               ))}\n            </div>\n\n            <Card>\n               <Card.Footer>\n                  <div className=\"row\">\n                     <div className=\"col-xl-12 tw-justify-center\">\n                        <ButtonGroup>\n                           <Button\n                              icon={AiFillCaretLeft}\n                              variant=\"warning light\"\n                              onClick={() => history.replace('/sale')}\n                              loading={postMutation.isLoading || patchMutation.isLoading}\n                           >\n                              Back\n                           </Button>\n                           <Button\n                              icon={AiFillSave}\n                              variant=\"primary\"\n                              type=\"submit\"\n                              loading={postMutation.isLoading || patchMutation.isLoading}\n                           >\n                              Save\n                           </Button>\n                        </ButtonGroup>\n                     </div>\n                  </div>\n               </Card.Footer>\n            </Card>\n         </form>\n      </>\n   );\n};\n\nexport default AddSale;\n","/home/muneeb/dev/diamond-tiles-frontend/src/jsx/pages/types/TypeActions.js",["516","517","518","519","520","521","522","523"],"import { useDebounce } from 'ahooks';\nimport Button from 'jsx/components/Button';\nimport SpinnerOverlay from 'jsx/components/SpinnerOverlay';\nimport { get, useAlert, useQuery } from 'jsx/helpers';\nimport PageTItle from 'jsx/layouts/PageTitle';\nimport React, { useState, useEffect } from 'react';\nimport { Card, ButtonGroup, Table, OverlayTrigger, Popover } from 'react-bootstrap';\nimport { When, If, Else, Then } from 'react-if';\nimport { useHistory, useParams } from 'react-router-dom';\nimport dayjs from 'dayjs';\nimport relativeTime from 'dayjs/plugin/relativeTime';\n\nimport {\n   AiFillDelete,\n   AiFillEdit,\n   AiFillEye,\n   AiFillPlusCircle,\n   AiOutlineQuestionCircle,\n   AiFillCaretLeft,\n} from 'react-icons/ai';\nimport { FaSort, FaSortDown, FaSortUp } from 'react-icons/fa';\n\nconst TypeActions = () => {\n   dayjs.extend(relativeTime);\n\n   const history = useHistory();\n   const params = useParams();\n   const [page, setPage] = useState(1);\n   const [limit, setLimit] = useState(5);\n   const [sort, setSort] = useState({ field: null, order: -1 });\n   const [search, setSearch] = useState('');\n   const debouncedSearchValue = useDebounce(search, { wait: 500 });\n   const alert = useAlert();\n\n   const query = useQuery(\n      ['type', params.id, page, limit, sort.field, sort.order, debouncedSearchValue],\n      () => get(`/types/id/${params.id}`, page, limit, sort.field, sort.order, debouncedSearchValue),\n      {\n         onError: (err) => {\n            alert.setErrorAlert({\n               message: 'Invalid URL!',\n               err: { message: ['The page will redirect to manage products.'] },\n               callback: () => history.push('/products'),\n               duration: 3000,\n            });\n         },\n      }\n   );\n\n   const handleOnClickEdit = (obj) => {\n      history.push({ pathname: `/products/${obj._id}`, search: `?type=edit` });\n   };\n\n   const handleOnClickView = (obj) => {\n      history.push({ pathname: `/products/${obj._id}`, search: `?type=view` });\n   };\n   const handleOnClickAdd = () => {\n      history.push('/products/add');\n   };\n\n   const handleSort = (key) => {\n      setSort((prev) => ({ field: key, order: prev.order * -1 }));\n   };\n\n   useEffect(() => {\n      if (page > query.data?.totalPages) {\n         setPage((prev) => prev - 1);\n      }\n   }, [page, query.data?.totalPages]);\n   return (\n      <>\n         <div className=\"row p-0 m-0\">\n            <div className=\"col-10\">\n               <PageTItle activeMenu=\"Type\" motherMenu=\"Products\" />\n            </div>\n            <div className=\"col-1\">\n               <Button\n                  icon={AiFillCaretLeft}\n                  variant=\"warning light\"\n                  onClick={() => history.goBack()}\n                  loading={query.isLoading}\n               >\n                  Back\n               </Button>\n            </div>\n         </div>\n         {alert.getAlert()}\n         <div className=\"row mb-3\">\n            <div className=\"col-xl-5 my-2\">\n               <Card className=\"h-100\">\n                  <When condition={query.isLoading}>\n                     <SpinnerOverlay />\n                  </When>\n\n                  <Card.Header>\n                     <Card.Title>View Type</Card.Title>\n                  </Card.Header>\n                  <Card.Body>\n                     <div className=\"row\">\n                        <div className=\"form-group col-xl-6\">\n                           <label className=\"col-form-label\">Title</label>\n                           <h4>{query.data?.type?.title ?? 'N/A'}</h4>\n                        </div>\n                     </div>\n                  </Card.Body>\n               </Card>\n            </div>\n            <div className=\"col-xl-7 my-2\">\n               <Card className=\"h-100\">\n                  <When condition={query.isLoading}>\n                     <SpinnerOverlay />\n                  </When>\n\n                  <Card.Header>\n                     <Card.Title>View Units</Card.Title>\n                  </Card.Header>\n                  <Card.Body>\n                     <Table className=\"tw-relative\" responsive>\n                        <thead>\n                           <tr>\n                              <th className=\"width80\">\n                                 <strong>#</strong>\n                              </th>\n                              <th>\n                                 <strong className=\"tw-cursor-pointer\">TITLE</strong>\n                              </th>\n                              <th>\n                                 <strong className=\"tw-cursor-pointer\">VALUE</strong>\n                              </th>\n                           </tr>\n                        </thead>\n                        <tbody>\n                           {query.data?.units?.map((e, index) => (\n                              <tr key={`${e._id}`}>\n                                 <td>\n                                    <strong>{index + 1}</strong>\n                                 </td>\n                                 <td>{e.title}</td>\n                                 <td>{e.value}</td>\n                                 <td>\n                                    <OverlayTrigger\n                                       trigger={['hover', 'hover']}\n                                       placement=\"top\"\n                                       overlay={\n                                          <Popover className=\"tw-border-gray-500\">\n                                             <Popover.Content>{`Created by ${e.createdBy ?? 'N/A'} ${\n                                                dayjs(e.createdAt).diff(dayjs(), 'day', true) > 7\n                                                   ? `at ${dayjs(e.createdAt).format('DD-MMM-YYYY')}`\n                                                   : dayjs(e.createdAt).fromNow()\n                                             }.`}</Popover.Content>\n                                          </Popover>\n                                       }\n                                    >\n                                       <AiOutlineQuestionCircle className=\"tw-cursor-pointer\" />\n                                    </OverlayTrigger>\n                                 </td>\n                              </tr>\n                           ))}\n                        </tbody>\n                     </Table>\n                  </Card.Body>\n               </Card>\n            </div>\n         </div>\n\n         {/* VIEW PRODUCTS */}\n         <Card>\n            <When condition={query.isLoading}>\n               <SpinnerOverlay />\n            </When>\n            <Card.Header>\n               <Card.Title>View Products</Card.Title>\n               <ButtonGroup className=\"tw-float-right\">\n                  <input\n                     type=\"text\"\n                     className=\"input-rounded tw-pl-6 tw-shadow-inner tw-ring-1 py-1\"\n                     placeholder=\"Search products...\"\n                     onChange={(e) => setSearch(e.target.value)}\n                  />\n               </ButtonGroup>\n            </Card.Header>\n            <Card.Body>\n               <If condition={query.data?.products?.totalDocs > 0}>\n                  <Then>\n                     <Table className=\"tw-relative\" responsive>\n                        <thead>\n                           <tr>\n                              <th className=\"width80\">\n                                 <strong>#</strong>\n                              </th>\n                              <th>\n                                 <strong className=\"tw-cursor-pointer\" onClick={() => handleSort('title')}>\n                                    TITLE\n                                    <span>\n                                       <When condition={sort.field !== 'title'}>\n                                          <FaSort className=\"d-inline mx-1\" />\n                                       </When>\n                                       <When condition={sort.field === 'title' && sort.order === -1}>\n                                          <FaSortDown className=\"d-inline mx-1\" />\n                                       </When>\n                                       <When condition={sort.field === 'title' && sort.order === 1}>\n                                          <FaSortUp className=\"d-inline mx-1\" />\n                                       </When>\n                                    </span>\n                                 </strong>\n                              </th>\n                              <th>\n                                 <strong className=\"tw-cursor-pointer\" onClick={() => handleSort('modelNumber')}>\n                                    MODEL#\n                                    <span>\n                                       <When condition={sort.field !== 'modelNumber'}>\n                                          <FaSort className=\"d-inline mx-1\" />\n                                       </When>\n                                       <When condition={sort.field === 'modelNumber' && sort.order === -1}>\n                                          <FaSortDown className=\"d-inline mx-1\" />\n                                       </When>\n                                       <When condition={sort.field === 'modelNumber' && sort.order === 1}>\n                                          <FaSortUp className=\"d-inline mx-1\" />\n                                       </When>\n                                    </span>\n                                 </strong>\n                              </th>\n                              <th>\n                                 <strong className=\"tw-cursor-pointer\" onClick={() => handleSort('type')}>\n                                    TYPE\n                                    <span>\n                                       <When condition={sort.field !== 'type'}>\n                                          <FaSort className=\"d-inline mx-1\" />\n                                       </When>\n                                       <When condition={sort.field === 'type' && sort.order === -1}>\n                                          <FaSortDown className=\"d-inline mx-1\" />\n                                       </When>\n                                       <When condition={sort.field === 'type' && sort.order === 1}>\n                                          <FaSortUp className=\"d-inline mx-1\" />\n                                       </When>\n                                    </span>\n                                 </strong>\n                              </th>\n                           </tr>\n                        </thead>\n                        <tbody>\n                           {query.data?.products?.docs.map((e, index) => (\n                              <tr key={`${e._id}`}>\n                                 <td>\n                                    <strong>{query.data?.products?.pagingCounter * (index + 1)}</strong>\n                                 </td>\n                                 <td>{e.title}</td>\n                                 <td>{e.modelNumber}</td>\n                                 <td>{(e.type && e.type?.title) ?? 'N/A'}</td>\n                                 <td>\n                                    <OverlayTrigger\n                                       trigger={['hover', 'hover']}\n                                       placement=\"top\"\n                                       overlay={\n                                          <Popover className=\"tw-border-gray-500\">\n                                             <Popover.Content>{`Created by ${e.createdBy ?? 'N/A'} ${\n                                                dayjs(e.createdAt).diff(dayjs(), 'day', true) > 7\n                                                   ? `at ${dayjs(e.createdAt).format('DD-MMM-YYYY')}`\n                                                   : dayjs(e.createdAt).fromNow()\n                                             }.`}</Popover.Content>\n                                          </Popover>\n                                       }\n                                    >\n                                       <AiOutlineQuestionCircle className=\"tw-cursor-pointer\" />\n                                    </OverlayTrigger>\n                                 </td>\n                              </tr>\n                           ))}\n                        </tbody>\n                     </Table>\n                  </Then>\n                  <Else>\n                     <When condition={!query.isLoading && !debouncedSearchValue}>\n                        <p className=\"tw-m-0\">No products created</p>\n                     </When>\n                     <When condition={!query.isLoading && debouncedSearchValue}>\n                        <p className=\"tw-m-0\">No result found!</p>\n                     </When>\n                  </Else>\n               </If>\n            </Card.Body>\n         </Card>\n      </>\n   );\n};\n\nexport default TypeActions;\n","/home/muneeb/dev/diamond-tiles-frontend/src/jsx/helpers/enums.js",[],"/home/muneeb/dev/diamond-tiles-frontend/src/jsx/pages/Login.js",["524","525","526","527"],"import { api, get, post, useAlert } from 'jsx/helpers';\r\nimport React, { useState, useEffect } from 'react';\r\nimport { Link, useHistory } from 'react-router-dom';\r\nimport { When } from 'react-if';\r\nimport SpinnerOverlay from 'jsx/components/SpinnerOverlay';\r\nimport { connect } from 'react-redux';\r\nimport { userRoles } from 'jsx/helpers/enums';\r\nimport { setLogin } from '../../store/auth/actions';\r\n\r\nconst Login = (props) => {\r\n   const history = useHistory();\r\n   const [loginData, setLoginData] = useState({});\r\n   const [isLoading, setIsLoading] = useState(false);\r\n\r\n   const alert = useAlert();\r\n\r\n   const handleBlur = (e) => {\r\n      const newLoginData = { ...loginData };\r\n      newLoginData[e.target.name] = e.target.value;\r\n      setLoginData(newLoginData);\r\n   };\r\n\r\n   useEffect(() => {\r\n      setIsLoading(true);\r\n      const token = localStorage.getItem('auth_token');\r\n      if (token) {\r\n         get(`auth/decode/${token}`)\r\n            .then((decode) => {\r\n               props.setLogin({ ...decode, auth_token: token });\r\n               localStorage.setItem('auth_token', token);\r\n               setIsLoading(false);\r\n               if (decode?.isConfirmed) {\r\n                  // if (decode?.role === userRoles.CASHIER) {\r\n                  //    history.push('/purchase');\r\n                  // } else if (decode?.role === userRoles.ADMINISTRATOR) {\r\n                  //    history.push('/dashboard');\r\n                  // } else {\r\n                  //    alert.setErrorAlert({ message: 'Unable to login', err: 'Account not confirmed!' });\r\n                  // }\r\n                  history.push('/purchase');\r\n               } else {\r\n                  localStorage.clear();\r\n                  props.setLogin({});\r\n                  alert.setErrorAlert({ message: 'Unable to login', err: 'Account not confirmed!' });\r\n               }\r\n            })\r\n            .catch((err) => setIsLoading(false));\r\n      } else setIsLoading(false);\r\n   }, []);\r\n\r\n   const handleLogin = async (e) => {\r\n      e.preventDefault();\r\n      setIsLoading(true);\r\n      try {\r\n         const res = await api.post('/auth/login', loginData);\r\n         setIsLoading(false);\r\n         const decode = await get(`auth/decode/${res.data}`);\r\n         props.setLogin({ ...decode, auth_token: res.data });\r\n         localStorage.setItem('auth_token', res.data);\r\n         if (decode?.isConfirmed) {\r\n            // if (decode?.role === userRoles.CASHIER) {\r\n            //    history.push('/purchase');\r\n            // } else if (decode?.role === userRoles.ADMINISTRATOR) {\r\n            //    history.push('/dashboard');\r\n            // } else {\r\n            //    alert.setErrorAlert({ message: 'Unable to login', err: 'Account not confirmed!' });\r\n            // }\r\n            history.push('/purchase');\r\n         } else {\r\n            localStorage.clear();\r\n            props.setLogin({});\r\n            alert.setErrorAlert({ message: 'Unable to login', err: 'Account not confirmed!' });\r\n         }\r\n      } catch (err) {\r\n         setIsLoading(false);\r\n         alert.setErrorAlert({ message: 'Unable to login', err });\r\n      }\r\n   };\r\n\r\n   return (\r\n      <>\r\n         <When condition={isLoading}>\r\n            <SpinnerOverlay />\r\n         </When>\r\n         <div className=\"authincation\">\r\n            <div className=\"container p-0\">\r\n               <div className=\"row justify-content-center align-items-center tw-h-screen\">\r\n                  <div className=\"col-lg-6 col-md-9\">\r\n                     <div className=\"authincation-content\">\r\n                        <div className=\"row no-gutters\">\r\n                           <div className=\"col-xl-12\">\r\n                              <div className=\"auth-form\">\r\n                                 {alert.getAlert()}\r\n                                 <h4 className=\"text-center mb-4\">Sign in your account</h4>\r\n                                 <form action=\"\" onSubmit={handleLogin}>\r\n                                    <div className=\"form-group\">\r\n                                       <label className=\"mb-1\" htmlFor=\"login-name\">\r\n                                          <strong>Name</strong>\r\n                                       </label>\r\n                                       <input\r\n                                          id=\"login-name\"\r\n                                          type=\"text\"\r\n                                          className=\"form-control\"\r\n                                          name=\"name\"\r\n                                          onChange={handleBlur}\r\n                                       />\r\n                                    </div>\r\n                                    <div className=\"form-group\">\r\n                                       <label className=\"mb-1\" htmlFor=\"login-password\">\r\n                                          <strong>Password</strong>\r\n                                       </label>\r\n                                       <input\r\n                                          id=\"login-password\"\r\n                                          type=\"password\"\r\n                                          className=\"form-control\"\r\n                                          name=\"password\"\r\n                                          onChange={handleBlur}\r\n                                       />\r\n                                    </div>\r\n                                    <div className=\"form-row d-flex justify-content-between mt-4 mb-2\">\r\n                                       <div className=\"form-group\">\r\n                                          <Link to=\"/page-forgot-password\">Forgot Password?</Link>\r\n                                       </div>\r\n                                    </div>\r\n                                    <div className=\"text-center\">\r\n                                       <button type=\"submit\" className=\"btn btn-primary btn-block\">\r\n                                          Sign Me In\r\n                                       </button>\r\n                                    </div>\r\n                                 </form>\r\n                                 <div className=\"new-account mt-3\">\r\n                                    <p>\r\n                                       Don't have an account?{' '}\r\n                                       <Link className=\"text-primary\" to=\"/page-register\">\r\n                                          Sign up\r\n                                       </Link>\r\n                                    </p>\r\n                                 </div>\r\n                              </div>\r\n                           </div>\r\n                        </div>\r\n                     </div>\r\n                  </div>\r\n               </div>\r\n            </div>\r\n         </div>\r\n      </>\r\n   );\r\n};\r\n\r\nconst mapStateToProps = ({ auth }) => ({});\r\n\r\nconst mapDispatchToProps = (dispatch) => ({\r\n   setLogin: (payload) => dispatch(setLogin(payload)),\r\n});\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(Login);\r\n","/home/muneeb/dev/diamond-tiles-frontend/src/jsx/pages/customers/CustomerActions.js",["528","529","530","531","532","533"],"import useUrlState from '@ahooksjs/use-url-state';\nimport { useFormik } from 'formik';\nimport Button from 'jsx/components/Button';\nimport SpinnerOverlay from 'jsx/components/SpinnerOverlay';\nimport { get, patch, post, useAlert, useMutation, useQuery } from 'jsx/helpers';\nimport PageTItle from 'jsx/layouts/PageTitle';\nimport React, { useEffect, useMemo, useState } from 'react';\nimport { ButtonGroup, Card, OverlayTrigger, Popover, Table } from 'react-bootstrap';\nimport { AiFillCaretLeft, AiFillSave, AiOutlineQuestionCircle } from 'react-icons/ai';\nimport { FaSort, FaSortDown, FaSortUp } from 'react-icons/fa';\nimport { Else, If, Then, When } from 'react-if';\nimport { useHistory, useParams } from 'react-router-dom';\nimport dayjs from 'dayjs';\nimport relativeTime from 'dayjs/plugin/relativeTime';\nimport { useDebounce } from 'ahooks';\nimport Pagination from 'jsx/components/Pagination';\nimport _ from 'lodash';\nimport { connect } from 'react-redux';\nimport { userRoles } from 'jsx/helpers/enums';\n\nconst CustomerActions = (props) => {\n   dayjs.extend(relativeTime);\n\n   const history = useHistory();\n   const params = useParams();\n   const [customer, setCustomer] = useState(null);\n   const [isError, setIsError] = useState(false);\n\n   const [urlState, setUrlState] = useUrlState({});\n   const [page, setPage] = useState(1);\n   const [limit, setLimit] = useState(5);\n   const [sort, setSort] = useState({ field: null, order: 1 });\n   const [search, setSearch] = useState('');\n   const debouncedSearchValue = useDebounce(search, { wait: 500 });\n\n   const alert = useAlert();\n   const isEditing = useMemo(\n      () => props.user?.role !== userRoles.CASHIER && urlState?.type === 'edit',\n      [urlState.type]\n   );\n   const isViewCustomer = useMemo(() => urlState?.type === 'view', [urlState.type]);\n   const isAddCustomer = useMemo(() => params?.id === 'add', [params.id]);\n\n   const query = useQuery(\n      ['customer', params.id, page, limit, sort.field, sort.order, debouncedSearchValue],\n      () => get(`/customers/id/${params.id}`, page, limit, sort.field, sort.order, debouncedSearchValue),\n      {\n         enabled: !isAddCustomer,\n         onError: (err) => {\n            setIsError(true);\n            alert.setErrorAlert({\n               message: 'Invalid URL!',\n               err: { message: ['The page will redirect to manage customers.'] },\n               callback: () => history.push('/customers'),\n               duration: 3000,\n            });\n         },\n      }\n   );\n   const patchMutation = useMutation((payload) => patch(`/customers/id/${params.id}`, payload), {\n      onSuccess: () => {\n         history.push('/customers');\n      },\n      onError: (err) => {\n         alert.setErrorAlert({\n            message: 'Unable to edit customer.',\n            err,\n         });\n      },\n   });\n\n   const postMutation = useMutation((payload) => post('/customers', payload), {\n      onSuccess: () => {\n         history.push('/customers');\n      },\n      onError: (err) => {\n         alert.setErrorAlert({ message: 'Unable to add customer', err });\n      },\n   });\n\n   const mutation = useMemo(() => (isEditing ? patchMutation : postMutation), [isEditing, patchMutation, postMutation]);\n\n   if (!isEditing && !isViewCustomer && !isAddCustomer) {\n      history.push('/customers');\n   }\n\n   const formik = useFormik({\n      initialValues: { name: isEditing ? customer?.name : '', phone: isEditing ? customer?.phone : '' },\n      validateOnChange: false,\n      validateOnBlur: false,\n      onSubmit: (values) => {\n         mutation.mutate(values);\n      },\n   });\n   const handleSort = (key) => {\n      setSort((prev) => ({ field: key, order: prev.order * -1 }));\n   };\n   useEffect(() => {\n      if (isEditing && query.data) {\n         formik.setFieldValue('name', query.data?.customer?.name ?? '');\n         formik.setFieldValue('phone', query.data?.customer?.phone ?? '');\n      }\n   }, [isEditing, query.data]);\n\n   useEffect(() => {\n      if (page > query.data?.sales?.totalPages) {\n         setPage((prev) => prev - 1);\n      }\n   }, [page, query.data?.sales?.totalPages]);\n\n   return (\n      <>\n         <PageTItle activeMenu=\"Customers\" motherMenu=\"Manage\" />\n         {alert.getAlert()}\n         <Card>\n            <When condition={patchMutation.isLoading || postMutation.isLoading || query.isLoading}>\n               <SpinnerOverlay />\n            </When>\n            <If condition={isAddCustomer || isEditing}>\n               <Then>\n                  <form onSubmit={formik.handleSubmit}>\n                     <Card.Header>\n                        <Card.Title>{isEditing ? 'Edit Customer' : 'Add New Customer'}</Card.Title>\n                     </Card.Header>\n                     <Card.Body>\n                        <div className=\"row\">\n                           <div className=\"form-group col-xl-6\">\n                              <label className=\"col-form-label\">Name</label>\n                              <input\n                                 className=\"form-control\"\n                                 onChange={formik.handleChange}\n                                 type=\"text\"\n                                 name=\"name\"\n                                 disabled={isError}\n                                 value={formik.values.name}\n                              />\n                           </div>\n                        </div>\n                        <div className=\"row\">\n                           <div className=\"form-group col-xl-6\">\n                              <label className=\"col-form-label\">Phone</label>\n                              <input\n                                 className=\"form-control\"\n                                 onChange={formik.handleChange}\n                                 type=\"text\"\n                                 name=\"phone\"\n                                 disabled={isError}\n                                 value={formik.values.phone}\n                              />\n                           </div>\n                        </div>\n                     </Card.Body>\n                     <Card.Footer>\n                        <div className=\"row\">\n                           <div className=\"col-xl-12 tw-justify-center\">\n                              <ButtonGroup>\n                                 <Button\n                                    icon={AiFillCaretLeft}\n                                    variant=\"warning light\"\n                                    onClick={() => history.replace('/customers')}\n                                    loading={mutation.isLoading}\n                                 >\n                                    Back\n                                 </Button>\n                                 <Button\n                                    icon={AiFillSave}\n                                    variant=\"primary\"\n                                    type=\"submit\"\n                                    loading={mutation.isLoading}\n                                    disabled={isError}\n                                 >\n                                    Save\n                                 </Button>\n                              </ButtonGroup>\n                           </div>\n                        </div>\n                     </Card.Footer>\n                  </form>\n               </Then>\n               <Else>\n                  <Card.Header>\n                     <Card.Title>View Customer</Card.Title>\n                  </Card.Header>\n                  <Card.Body>\n                     <div className=\"row\">\n                        <div className=\"form-group col-xl-6\">\n                           <label className=\"col-form-label\">Name</label>\n                           <h4>{query.data?.customer?.name ?? 'N/A'}</h4>\n                        </div>\n                     </div>\n                     <div className=\"row\">\n                        <div className=\"form-group col-xl-6\">\n                           <label className=\"col-form-label\">Phone</label>\n                           <h4>{query.data?.customer?.phone ?? 'N/A'}</h4>\n                        </div>\n                     </div>\n                  </Card.Body>\n                  <Card.Footer>\n                     <div className=\"row\">\n                        <div className=\"col-xl-12 tw-justify-center\">\n                           <Button\n                              icon={AiFillCaretLeft}\n                              variant=\"warning light\"\n                              onClick={() => history.replace('/customers')}\n                              loading={mutation.isLoading}\n                           >\n                              Back\n                           </Button>\n                        </div>\n                     </div>\n                  </Card.Footer>\n               </Else>\n            </If>\n         </Card>\n         <When condition={isViewCustomer}>\n            <Card>\n               <When condition={query.isLoading}>\n                  <SpinnerOverlay />\n               </When>\n               <Card.Header>\n                  <Card.Title>View Related Sales</Card.Title>\n               </Card.Header>\n               <Card.Body>\n                  <If condition={query.data?.sales?.totalDocs > 0}>\n                     <Then>\n                        <Table className=\"tw-relative\" responsive>\n                           <thead>\n                              <tr>\n                                 <th className=\"width80\">\n                                    <strong>#</strong>\n                                 </th>\n                                 <th>\n                                    <strong className=\"tw-cursor-pointer\" onClick={() => handleSort('customer')}>\n                                       Customer\n                                       <span>\n                                          <When condition={sort.field !== 'customer'}>\n                                             <FaSort className=\"d-inline mx-1\" />\n                                          </When>\n                                          <When condition={sort.field === 'customer' && sort.order === -1}>\n                                             <FaSortDown className=\"d-inline mx-1\" />\n                                          </When>\n                                          <When condition={sort.field === 'customer' && sort.order === 1}>\n                                             <FaSortUp className=\"d-inline mx-1\" />\n                                          </When>\n                                       </span>\n                                    </strong>\n                                 </th>\n                                 <th>\n                                    <strong className=\"tw-cursor-pointer\" onClick={() => handleSort('inventory')}>\n                                       Model Number\n                                       <span>\n                                          <When condition={sort.field !== 'inventory'}>\n                                             <FaSort className=\"d-inline mx-1\" />\n                                          </When>\n                                          <When condition={sort.field === 'inventory' && sort.order === -1}>\n                                             <FaSortDown className=\"d-inline mx-1\" />\n                                          </When>\n                                          <When condition={sort.field === 'inventory' && sort.order === 1}>\n                                             <FaSortUp className=\"d-inline mx-1\" />\n                                          </When>\n                                       </span>\n                                    </strong>\n                                 </th>\n                                 <th>\n                                    <strong className=\"tw-cursor-pointer\" onClick={() => handleSort('quantity')}>\n                                       Qty\n                                       <span>\n                                          <When condition={sort.field !== 'quantity'}>\n                                             <FaSort className=\"d-inline mx-1\" />\n                                          </When>\n                                          <When condition={sort.field === 'quantity' && sort.order === -1}>\n                                             <FaSortDown className=\"d-inline mx-1\" />\n                                          </When>\n                                          <When condition={sort.field === 'quantity' && sort.order === 1}>\n                                             <FaSortUp className=\"d-inline mx-1\" />\n                                          </When>\n                                       </span>\n                                    </strong>\n                                 </th>\n                                 <th>\n                                    <strong className=\"tw-cursor-pointer\" onClick={() => handleSort('retailPrice')}>\n                                       Total\n                                       <span>\n                                          <When condition={sort.field !== 'retailPrice'}>\n                                             <FaSort className=\"d-inline mx-1\" />\n                                          </When>\n                                          <When condition={sort.field === 'retailPrice' && sort.order === -1}>\n                                             <FaSortDown className=\"d-inline mx-1\" />\n                                          </When>\n                                          <When condition={sort.field === 'retailPrice' && sort.order === 1}>\n                                             <FaSortUp className=\"d-inline mx-1\" />\n                                          </When>\n                                       </span>\n                                    </strong>\n                                 </th>\n                                 <th>\n                                    <strong className=\"tw-cursor-pointer\" onClick={() => handleSort('paid')}>\n                                       Paid\n                                       <span>\n                                          <When condition={sort.field !== 'paid'}>\n                                             <FaSort className=\"d-inline mx-1\" />\n                                          </When>\n                                          <When condition={sort.field === 'paid' && sort.order === -1}>\n                                             <FaSortDown className=\"d-inline mx-1\" />\n                                          </When>\n                                          <When condition={sort.field === 'paid' && sort.order === 1}>\n                                             <FaSortUp className=\"d-inline mx-1\" />\n                                          </When>\n                                       </span>\n                                    </strong>\n                                 </th>\n                                 <th>\n                                    <strong>Remaining</strong>\n                                 </th>\n                              </tr>\n                           </thead>\n                           <tbody>\n                              {query.data?.sales &&\n                                 query.data?.sales?.docs.map((e, index) => {\n                                    const getRemainig = () => {\n                                       if (!e?.sourcePrice || !e?.paid) return null;\n                                       if (e.sourcePrice === e.paid) return null;\n                                       return e.sourcePrice - e.paid;\n                                    };\n                                    const getId = () => {\n                                       const id = e._id;\n                                       return id.slice(id.length - 3);\n                                    };\n                                    return (\n                                       <tr\n                                          key={`${e._id}`}\n                                          className={e.isRemaining && 'tw-bg-red-400 tw-text-gray-50'}\n                                       >\n                                          <td>\n                                             <strong>{getId()}</strong>\n                                          </td>\n                                          <td>{e?.customer?.name ?? 'N/A'}</td>\n                                          <td>{e?.inventory?.modelNumber ?? 'N/A'}</td>\n                                          <td>{e?.quantity ?? 'N/a'}</td>\n                                          <td>{e?.retailPrice ?? 'N/A'}</td>\n                                          <td>{e?.paid ?? 'N/A'}</td>\n                                          <td>{getRemainig()}</td>\n\n                                          <td>\n                                             <OverlayTrigger\n                                                trigger={['hover', 'hover']}\n                                                placement=\"top\"\n                                                overlay={\n                                                   <Popover className=\"tw-border-gray-500\">\n                                                      <Popover.Content>{`Created by ${e.createdBy ?? 'N/A'} ${\n                                                         dayjs(e.createdAt).diff(dayjs(), 'day', true) > 7\n                                                            ? `at ${dayjs(e.createdAt).format('DD-MMM-YYYY')}`\n                                                            : dayjs(e.createdAt).fromNow()\n                                                      }.`}</Popover.Content>\n                                                   </Popover>\n                                                }\n                                             >\n                                                <AiOutlineQuestionCircle className=\"tw-cursor-pointer\" />\n                                             </OverlayTrigger>\n                                          </td>\n                                       </tr>\n                                    );\n                                 })}\n                           </tbody>\n                        </Table>\n                     </Then>\n                     <Else>\n                        <When condition={!query.isLoading}>\n                           <p className=\"tw-m-0\">No Sales created</p>\n                        </When>\n                     </Else>\n                  </If>\n               </Card.Body>\n            </Card>\n         </When>\n         <When condition={limit > 5 ? true : query.data?.sales?.totalPages > 1}>\n            <Pagination\n               page={page}\n               onPageChange={setPage}\n               onLimitChange={setLimit}\n               {..._.omit(query.data?.sales, ['docs'])}\n               isLimitDisabled={query.isLoading}\n            />\n         </When>\n      </>\n   );\n};\n\nconst mapStateToProps = ({ auth }) => ({\n   user: auth.user,\n});\n\nconst mapDispatchToProps = {};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(CustomerActions);\n","/home/muneeb/dev/diamond-tiles-frontend/src/jsx/pages/products/ProductActions.js",["534","535","536","537","538","539","540","541","542"],"import useUrlState from '@ahooksjs/use-url-state';\nimport dayjs from 'dayjs';\nimport relativeTime from 'dayjs/plugin/relativeTime';\n\nimport { useFormik } from 'formik';\nimport Button from 'jsx/components/Button';\nimport Pagination from 'jsx/components/Pagination';\nimport Select from 'jsx/components/Select';\nimport SpinnerOverlay from 'jsx/components/SpinnerOverlay';\nimport { get, patch, post, useAlert, useMutation, useQuery } from 'jsx/helpers';\nimport { userRoles } from 'jsx/helpers/enums';\nimport PageTItle from 'jsx/layouts/PageTitle';\nimport _ from 'lodash';\nimport React, { useEffect, useMemo, useState } from 'react';\nimport { ButtonGroup, Card, OverlayTrigger, Popover, Table } from 'react-bootstrap';\nimport { AiFillCaretLeft, AiFillEye, AiFillSave, AiOutlineQuestionCircle } from 'react-icons/ai';\nimport { FaSort, FaSortDown, FaSortUp } from 'react-icons/fa';\nimport { Else, If, Then, When } from 'react-if';\nimport { useQueryClient } from 'react-query';\nimport { connect } from 'react-redux';\nimport { useHistory, useParams } from 'react-router-dom';\nimport CreatableSelect from '../../components/CreatableSelect';\n\nconst ProductActions = (props) => {\n   dayjs.extend(relativeTime);\n\n   const history = useHistory();\n   const params = useParams();\n   const [isError, setIsError] = useState(false);\n   const [salePage, setSalePage] = useState(1);\n   const [saleLimit, setSaleLimit] = useState(5);\n   const [saleSort, setSaleSort] = useState({ field: 'sourcePrice', order: 1 });\n   const [inventoriesPage, setInventoriesPage] = useState(1);\n   const [inventoriesLimit, setInventoriesLimit] = useState(5);\n   const [inventoriesSort, setInventoriesSort] = useState({ field: 'sourcePrice', order: 1 });\n\n   const [urlState, setUrlState] = useUrlState({});\n\n   const alert = useAlert();\n   const getTypes = useQuery('types', () => get('/types'));\n   const queryClient = useQueryClient();\n\n   const isEditing = useMemo(\n      () => props.user?.role !== userRoles.CASHIER && urlState?.type === 'edit',\n      [urlState.type]\n   );\n   const isViewProduct = useMemo(() => urlState?.type === 'view', [urlState.type]);\n   const isAddProduct = useMemo(() => params?.id === 'add', [params.id]);\n\n   const query = useQuery(\n      [\n         'product',\n         params.id,\n         salePage,\n         saleLimit,\n         saleSort.field,\n         saleSort.order,\n         inventoriesPage,\n         inventoriesLimit,\n         inventoriesSort.field,\n         inventoriesSort.order,\n      ],\n      () =>\n         get(\n            `/products/id/${params.id}?salePage=${salePage}&saleLimit=${saleLimit}&saleSort[${saleSort.field}]=${saleSort.order}&inventoriesPage=${inventoriesPage}&inventoriesLimit=${inventoriesLimit}&inventoriesSort[${inventoriesSort.field}]=${inventoriesSort.order}`\n         ),\n      {\n         enabled: !isAddProduct,\n         onError: (err) => {\n            setIsError(true);\n            alert.setErrorAlert({\n               message: 'Unable to view product',\n               err,\n               duration: 3000,\n            });\n         },\n      }\n   );\n\n   const patchMutation = useMutation((payload) => patch(`/products/id/${params.id}`, payload), {\n      onSuccess: () => {\n         history.push('/products');\n      },\n      onError: (err) => {\n         alert.setErrorAlert({\n            message: 'Unable to edit product.',\n            err,\n         });\n      },\n   });\n\n   const postMutation = useMutation((payload) => post('/products', payload), {\n      onSuccess: () => {\n         history.push('/products');\n      },\n      onError: (err) => {\n         alert.setErrorAlert({ message: 'Unable to add product', err });\n      },\n   });\n   const postTypeMutation = useMutation((payload) => post('/types', payload), {\n      onSuccess: async () => {\n         await queryClient.invalidateQueries('types');\n      },\n   });\n\n   const mutation = useMemo(() => (isEditing ? patchMutation : postMutation), [isEditing, patchMutation, postMutation]);\n\n   if (!isEditing && !isViewProduct && !isAddProduct) {\n      history.push('/products');\n   }\n\n   const formik = useFormik({\n      initialValues: {\n         modelNumber: '',\n         retailPrice: '',\n         type: '',\n         unit: '',\n      },\n      validateOnChange: false,\n      validateOnBlur: false,\n      onSubmit: (values) => {\n         console.log(values);\n         values.unit = values.unit.label;\n         mutation.mutate(values);\n      },\n   });\n\n   const units = useQuery(['units', formik.values.type], () =>\n      get(`/units?type=${formik.values.type}`, 1, 1000, null, 1, '')\n   );\n\n   console.log(formik.values.type);\n\n   const handleCreateType = async (title) => {\n      postTypeMutation.mutate({ title });\n      // history.push({ pathname: '/types', search: `?action=add&title=${title}&redirect=/products/add` });\n   };\n   const handleInventoriesSort = (key) => {\n      setInventoriesSort((prev) => ({ field: key, order: prev.order * -1 }));\n   };\n\n   useEffect(() => {\n      if (isEditing && query.data?.product) {\n         formik.setFieldValue('modelNumber', query.data?.product?.modelNumber ?? '');\n         formik.setFieldValue('retailPrice', query.data?.product?.retailPrice ?? '');\n         formik.setFieldValue('type', query.data?.product?.type?._id ?? '');\n\n         const unit = query.data?.product?.unit;\n\n         formik.setFieldValue('unit', unit ? { label: unit, value: unit } : {});\n      }\n   }, [isEditing, query.data?.product]);\n\n   // console.log(isEditing, units.data, formik.values.unit);\n\n   return (\n      <>\n         <div className=\"row p-0 m-0\">\n            <div className=\"col-10\">\n               <PageTItle activeMenu=\"View\" motherMenu=\"Products\" />\n            </div>\n            <div className=\"col-1\">\n               <Button\n                  icon={AiFillCaretLeft}\n                  variant=\"warning light\"\n                  onClick={() => history.replace('/products')}\n                  loading={mutation.isLoading}\n               >\n                  Back\n               </Button>\n            </div>\n         </div>\n         {alert.getAlert()}\n         <Card>\n            <When condition={getTypes.isLoading || postTypeMutation.isLoading || query.isLoading}>\n               <SpinnerOverlay />\n            </When>\n            <If condition={isAddProduct || isEditing}>\n               <Then>\n                  <form onSubmit={formik.handleSubmit}>\n                     <Card.Header>\n                        <Card.Title>{isEditing ? 'Edit Product' : 'Add New product'}</Card.Title>\n                     </Card.Header>\n                     <Card.Body>\n                        <div className=\"row\">\n                           <div className=\"form-group col-xl-6\">\n                              <label className=\"col-form-label\">Model Number</label>\n                              <input\n                                 className=\"form-control\"\n                                 onChange={formik.handleChange}\n                                 type=\"text\"\n                                 name=\"modelNumber\"\n                                 disabled={isError}\n                                 value={formik.values.modelNumber}\n                              />\n                           </div>\n                        </div>\n                        <div className=\"row\">\n                           <div className=\"form-group col-xl-6\">\n                              <label className=\"col-form-label\">Type</label>\n                              {(query.data?.product || isAddProduct) && (\n                                 <CreatableSelect\n                                    isClearable\n                                    defaultValue={\n                                       isEditing && {\n                                          _id: query.data?.product?.type?.id,\n                                          label: query.data?.product?.type?.title,\n                                          value: query.data?.product?.type?.title,\n                                       }\n                                    }\n                                    onChange={(e) => formik.setFieldValue('type', e?._id)}\n                                    options={\n                                       getTypes.data?.length > 0 &&\n                                       getTypes.data.map((e) => ({ ...e, label: e.title, value: e.title }))\n                                    }\n                                    onCreateOption={handleCreateType}\n                                 />\n                              )}\n                           </div>\n                        </div>\n                        <div className=\"row\">\n                           <div className=\"form-group col-xl-3\">\n                              <label className=\"col-form-label\">Retail Price</label>\n                              <input\n                                 style={{ height: '38px' }}\n                                 className=\"form-control\"\n                                 onChange={formik.handleChange}\n                                 type=\"text\"\n                                 name=\"retailPrice\"\n                                 disabled={isError}\n                                 value={formik.values.retailPrice}\n                              />\n                           </div>\n                           <div className=\"form-group col-xl-3\">\n                              <label className=\"col-form-label\">Unit</label>\n                              <Select\n                                 width=\"tw-w-full\"\n                                 onChange={(e) => formik.setFieldValue('unit', { label: e.label, value: e.label })}\n                                 value={formik.values.unit}\n                                 options={units.data?.map((e) => ({ label: e.title, value: e }))}\n                              />\n                           </div>\n                        </div>\n                     </Card.Body>\n                     <Card.Footer>\n                        <div className=\"row\">\n                           <div className=\"col-xl-12 tw-justify-center\">\n                              <ButtonGroup>\n                                 {/* <Button\n                                    icon={AiFillCaretLeft}\n                                    variant=\"warning light\"\n                                    onClick={() => history.replace('/products')}\n                                    loading={mutation.isLoading}\n                                 >\n                                    Back\n                                 </Button> */}\n                                 <Button\n                                    icon={AiFillSave}\n                                    variant=\"primary\"\n                                    type=\"submit\"\n                                    loading={mutation.isLoading}\n                                    disabled={isError}\n                                 >\n                                    Save\n                                 </Button>\n                              </ButtonGroup>\n                           </div>\n                        </div>\n                     </Card.Footer>\n                  </form>\n               </Then>\n               <Else>\n                  <Card.Header>\n                     <Card.Title>View product</Card.Title>\n                  </Card.Header>\n                  <Card.Body>\n                     <div className=\"row\">\n                        <div className=\"form-group col-xl-6\">\n                           <label className=\"col-form-label\">Model Number</label>\n                           <h4>{query.data?.product?.modelNumber ?? 'N/A'}</h4>\n                        </div>\n                     </div>\n                     <div className=\"row\">\n                        <div className=\"form-group col-xl-6\">\n                           <label className=\"col-form-label\">Retail Price</label>\n                           <h4>{query.data?.product?.retailPrice ?? 'N/A'}</h4>\n                        </div>\n                     </div>\n                     <div className=\"row\">\n                        <div className=\"form-group col-xl-6\">\n                           <label className=\"col-form-label\">Unit</label>\n                           <h4>{query.data?.product?.unit ?? 'N/A'}</h4>\n                        </div>\n                     </div>\n                     <div className=\"row\">\n                        <div className=\"form-group col-xl-6\">\n                           <label className=\"col-form-label\">Type</label>\n                           <h4>{query.data?.product?.type?.title ?? 'N/A'}</h4>\n                        </div>\n                     </div>\n                  </Card.Body>\n               </Else>\n            </If>\n         </Card>\n         <When condition={isViewProduct}>\n            <Card>\n               <When condition={query.isLoading}>\n                  <SpinnerOverlay />\n               </When>\n               <Card.Header>\n                  <Card.Title>View Related Purchases</Card.Title>\n               </Card.Header>\n               <Card.Body>\n                  <If condition={query.data?.inventories?.totalDocs > 0}>\n                     <Then>\n                        <Table className=\"tw-relative\" responsive>\n                           <thead>\n                              <tr>\n                                 <th className=\"width80\">\n                                    <strong>#</strong>\n                                 </th>\n                                 <th>\n                                    <strong\n                                       className=\"tw-cursor-pointer\"\n                                       onClick={() => handleInventoriesSort('supplier')}\n                                    >\n                                       SUPPLIER\n                                       <span>\n                                          <When condition={inventoriesSort.field !== 'supplier'}>\n                                             <FaSort className=\"d-inline mx-1\" />\n                                          </When>\n                                          <When\n                                             condition={\n                                                inventoriesSort.field === 'supplier' && inventoriesSort.order === -1\n                                             }\n                                          >\n                                             <FaSortDown className=\"d-inline mx-1\" />\n                                          </When>\n                                          <When\n                                             condition={\n                                                inventoriesSort.field === 'supplier' && inventoriesSort.order === 1\n                                             }\n                                          >\n                                             <FaSortUp className=\"d-inline mx-1\" />\n                                          </When>\n                                       </span>\n                                    </strong>\n                                 </th>\n                                 <th>\n                                    <strong\n                                       className=\"tw-cursor-pointer\"\n                                       onClick={() => handleInventoriesSort('modelNumber')}\n                                    >\n                                       MODEL NUMBER\n                                       <span>\n                                          <When condition={inventoriesSort.field !== 'modelNumber'}>\n                                             <FaSort className=\"d-inline mx-1\" />\n                                          </When>\n                                          <When\n                                             condition={\n                                                inventoriesSort.field === 'modelNumber' && inventoriesSort.order === -1\n                                             }\n                                          >\n                                             <FaSortDown className=\"d-inline mx-1\" />\n                                          </When>\n                                          <When\n                                             condition={\n                                                inventoriesSort.field === 'modelNumber' && inventoriesSort.order === 1\n                                             }\n                                          >\n                                             <FaSortUp className=\"d-inline mx-1\" />\n                                          </When>\n                                       </span>\n                                    </strong>\n                                 </th>\n                                 <th>\n                                    <strong\n                                       className=\"tw-cursor-pointer\"\n                                       onClick={() => handleInventoriesSort('sourcePrice')}\n                                    >\n                                       PRICE\n                                       <span>\n                                          <When condition={inventoriesSort.field !== 'sourcePrice'}>\n                                             <FaSort className=\"d-inline mx-1\" />\n                                          </When>\n                                          <When\n                                             condition={\n                                                inventoriesSort.field === 'sourcePrice' && inventoriesSort.order === -1\n                                             }\n                                          >\n                                             <FaSortDown className=\"d-inline mx-1\" />\n                                          </When>\n                                          <When\n                                             condition={\n                                                inventoriesSort.field === 'sourcePrice' && inventoriesSort.order === 1\n                                             }\n                                          >\n                                             <FaSortUp className=\"d-inline mx-1\" />\n                                          </When>\n                                       </span>\n                                    </strong>\n                                 </th>\n                                 <th>\n                                    <strong className=\"tw-cursor-pointer\" onClick={() => handleInventoriesSort('paid')}>\n                                       PAID\n                                       <span>\n                                          <When condition={inventoriesSort.field !== 'paid'}>\n                                             <FaSort className=\"d-inline mx-1\" />\n                                          </When>\n                                          <When\n                                             condition={\n                                                inventoriesSort.field === 'paid' && inventoriesSort.order === -1\n                                             }\n                                          >\n                                             <FaSortDown className=\"d-inline mx-1\" />\n                                          </When>\n                                          <When\n                                             condition={inventoriesSort.field === 'paid' && inventoriesSort.order === 1}\n                                          >\n                                             <FaSortUp className=\"d-inline mx-1\" />\n                                          </When>\n                                       </span>\n                                    </strong>\n                                 </th>\n                              </tr>\n                           </thead>\n                           <tbody>\n                              {query.data?.inventories?.docs.map((e, index) => (\n                                 <tr key={`${e._id}`} className={e.isRemaining && 'tw-bg-red-400 tw-text-gray-50'}>\n                                    <td>\n                                       <strong className={e.isRemaining && 'tw-text-gray-50'}>\n                                          {query.data.inventories?.pagingCounter * (index + 1)}\n                                       </strong>\n                                    </td>\n                                    <td>{e?.supplier?.name ?? 'N/A'}</td>\n                                    <td>{e?.product?.modelNumber ?? 'N/A'}</td>\n                                    <td>{e?.sourcePrice ?? 'N/a'}</td>\n                                    <td>{e?.paid ?? 'N/A'}</td>\n                                    <td>\n                                       <OverlayTrigger\n                                          trigger={['hover', 'hover']}\n                                          placement=\"top\"\n                                          overlay={\n                                             <Popover className=\"tw-border-gray-500\">\n                                                <Popover.Content>{`Created by ${e.createdBy ?? 'N/A'} ${\n                                                   dayjs(e.createdAt).diff(dayjs(), 'day', true) > 7\n                                                      ? `at ${dayjs(e.createdAt).format('DD-MMM-YYYY')}`\n                                                      : dayjs(e.createdAt).fromNow()\n                                                }.`}</Popover.Content>\n                                             </Popover>\n                                          }\n                                       >\n                                          <AiOutlineQuestionCircle className=\"tw-cursor-pointer\" />\n                                       </OverlayTrigger>\n                                    </td>\n                                 </tr>\n                              ))}\n                           </tbody>\n                        </Table>\n                     </Then>\n                     <Else>\n                        <When condition={!query.isLoading}>\n                           <p className=\"tw-m-0\">No Purchases created</p>\n                        </When>\n                     </Else>\n                  </If>\n               </Card.Body>\n            </Card>\n         </When>\n         <When condition={inventoriesLimit > 5 ? true : query.data?.inventories?.totalPages > 1}>\n            <Pagination\n               page={inventoriesPage}\n               onPageChange={setInventoriesPage}\n               onLimitChange={setInventoriesLimit}\n               {..._.omit(query.data, ['docs'])}\n               isLimitDisabled={query.isLoading}\n            />\n         </When>\n      </>\n   );\n};\n\nconst mapStateToProps = ({ auth }) => ({\n   user: auth.user,\n});\n\nconst mapDispatchToProps = {};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(ProductActions);\n","/home/muneeb/dev/diamond-tiles-frontend/src/jsx/pages/suppliers/SupplierActions.js",["543","544","545","546","547","548"],"import useUrlState from '@ahooksjs/use-url-state';\nimport dayjs from 'dayjs';\nimport relativeTime from 'dayjs/plugin/relativeTime';\nimport { useFormik } from 'formik';\nimport Button from 'jsx/components/Button';\nimport SpinnerOverlay from 'jsx/components/SpinnerOverlay';\nimport { get, patch, post, useAlert, useMutation, useQuery } from 'jsx/helpers';\nimport PageTItle from 'jsx/layouts/PageTitle';\nimport React, { useEffect, useMemo, useState } from 'react';\nimport { ButtonGroup, Card, OverlayTrigger, Pagination, Popover, Table } from 'react-bootstrap';\nimport { AiFillCaretLeft, AiFillSave, AiOutlineQuestionCircle } from 'react-icons/ai';\nimport { FaSort, FaSortDown, FaSortUp } from 'react-icons/fa';\nimport { Else, If, Then, When } from 'react-if';\nimport { useHistory, useParams } from 'react-router-dom';\n\nimport _, { isArray } from 'lodash';\nimport { connect } from 'react-redux';\nimport { userRoles } from 'jsx/helpers/enums';\n\nconst SupplierActions = (props) => {\n   const history = useHistory();\n   const params = useParams();\n   const [isError, setIsError] = useState(false);\n\n   const [urlState, setUrlState] = useUrlState({});\n\n   const alert = useAlert();\n   const isEditing = useMemo(\n      () => props.user?.role !== userRoles.CASHIER && urlState?.type === 'edit',\n      [urlState.type]\n   );\n   const isViewSupplier = useMemo(() => urlState?.type === 'view', [urlState.type]);\n   const isAddSupplier = useMemo(() => params?.id === 'add', [params.id]);\n\n   const [page, setPage] = useState(1);\n   const [limit, setLimit] = useState(5);\n   const [sort, setSort] = useState({ field: 'sourcePrice', order: 1 });\n\n   const query = useQuery(['supplier', params.id], () => get(`/suppliers/id/${params.id}`), {\n      enabled: !isAddSupplier,\n      onError: (err) => {\n         setIsError(true);\n         alert.setErrorAlert({\n            message: 'Unable to view supplier',\n            err,\n            callback: () => history.push('/suppliers'),\n            duration: 3000,\n         });\n      },\n   });\n   const patchMutation = useMutation((payload) => patch(`/suppliers/id/${params.id}`, payload), {\n      onSuccess: () => {\n         history.push('/suppliers');\n      },\n      onError: (err) => {\n         alert.setErrorAlert({\n            message: 'Unable to edit supplier.',\n            err,\n         });\n      },\n   });\n\n   const postMutation = useMutation((payload) => post('/suppliers', payload), {\n      onSuccess: () => {\n         history.push('/suppliers');\n      },\n      onError: (err) => {\n         alert.setErrorAlert({ message: 'Unable to add supplier', err });\n      },\n   });\n\n   const mutation = useMemo(() => (isEditing ? patchMutation : postMutation), [isEditing, patchMutation, postMutation]);\n\n   if (!isEditing && !isViewSupplier && !isAddSupplier) {\n      history.push('/suppliers');\n   }\n\n   const formik = useFormik({\n      initialValues: {\n         name: '',\n         phone: '',\n         company: '',\n      },\n      validateOnChange: false,\n      validateOnBlur: false,\n      onSubmit: (values) => {\n         mutation.mutate(values);\n      },\n   });\n\n   useEffect(() => {\n      if (isEditing && query.data) {\n         formik.setFieldValue('name', query.data?.supplier?.name ?? '');\n         formik.setFieldValue('phone', query.data?.supplier?.phone ?? '');\n         formik.setFieldValue('company', query.data?.supplier?.company ?? '');\n      }\n   }, [isEditing, query.data]);\n\n   const handleSort = (key) => {\n      setSort((prev) => ({ field: key, order: prev.order * -1 }));\n   };\n\n   return (\n      <>\n         <PageTItle activeMenu=\"Suppliers\" motherMenu=\"Manage\" />\n         {alert.getAlert()}\n         <Card>\n            <When condition={patchMutation.isLoading || postMutation.isLoading || query.isLoading}>\n               <SpinnerOverlay />\n            </When>\n            <If condition={isAddSupplier || isEditing}>\n               <Then>\n                  <form onSubmit={formik.handleSubmit}>\n                     <Card.Header>\n                        <Card.Title>{isEditing ? 'Edit Supplier' : 'Add New Supplier'}</Card.Title>\n                     </Card.Header>\n                     <Card.Body>\n                        <div className=\"row\">\n                           <div className=\"form-group col-xl-6\">\n                              <label className=\"col-form-label\">Name</label>\n                              <input\n                                 className=\"form-control\"\n                                 onChange={formik.handleChange}\n                                 type=\"text\"\n                                 name=\"name\"\n                                 disabled={isError}\n                                 value={formik.values.name}\n                              />\n                           </div>\n                        </div>\n                        <div className=\"row\">\n                           <div className=\"form-group col-xl-6\">\n                              <label className=\"col-form-label\">Phone</label>\n                              <input\n                                 className=\"form-control\"\n                                 onChange={formik.handleChange}\n                                 type=\"text\"\n                                 name=\"phone\"\n                                 disabled={isError}\n                                 value={formik.values.phone}\n                              />\n                           </div>\n                        </div>\n                        <div className=\"row\">\n                           <div className=\"form-group col-xl-6\">\n                              <label className=\"col-form-label\">Company</label>\n                              <input\n                                 className=\"form-control\"\n                                 onChange={formik.handleChange}\n                                 type=\"text\"\n                                 name=\"company\"\n                                 disabled={isError}\n                                 value={formik.values.company}\n                              />\n                           </div>\n                        </div>\n                     </Card.Body>\n                     <Card.Footer>\n                        <div className=\"row\">\n                           <div className=\"col-xl-12 tw-justify-center\">\n                              <ButtonGroup>\n                                 <Button\n                                    icon={AiFillCaretLeft}\n                                    variant=\"warning light\"\n                                    onClick={() => history.replace('/suppliers')}\n                                    loading={mutation.isLoading}\n                                 >\n                                    Back\n                                 </Button>\n                                 <Button\n                                    icon={AiFillSave}\n                                    variant=\"primary\"\n                                    type=\"submit\"\n                                    loading={mutation.isLoading}\n                                    disabled={isError}\n                                 >\n                                    Save\n                                 </Button>\n                              </ButtonGroup>\n                           </div>\n                        </div>\n                     </Card.Footer>\n                  </form>\n               </Then>\n               <Else>\n                  <Card.Header>\n                     <Card.Title>View Supplier</Card.Title>\n                  </Card.Header>\n                  <Card.Body>\n                     <div className=\"row\">\n                        <div className=\"form-group col-xl-6\">\n                           <label className=\"col-form-label\">Name</label>\n                           <h4>{query.data?.supplier?.name ?? 'N/A'}</h4>\n                        </div>\n                     </div>\n                     <div className=\"row\">\n                        <div className=\"form-group col-xl-6\">\n                           <label className=\"col-form-label\">Phone</label>\n                           <h4>{query.data?.supplier?.phone ?? 'N/A'}</h4>\n                        </div>\n                     </div>\n                     <div className=\"row\">\n                        <div className=\"form-group col-xl-6\">\n                           <label className=\"col-form-label\">Company</label>\n                           <h4>{query.data?.supplier?.company ?? 'N/A'}</h4>\n                        </div>\n                     </div>\n                  </Card.Body>\n                  <Card>\n                     <When condition={query.isLoading}>\n                        <SpinnerOverlay />\n                     </When>\n                     <Card.Header>\n                        <Card.Title>View Related Purchases</Card.Title>\n                     </Card.Header>\n                     <Card.Body>\n                        <If condition={query.data?.inventories?.totalDocs > 0}>\n                           <Then>\n                              <Table className=\"tw-relative\" responsive>\n                                 <thead>\n                                    <tr>\n                                       <th className=\"width80\">\n                                          <strong>#</strong>\n                                       </th>\n                                       <th>\n                                          <strong className=\"tw-cursor-pointer\" onClick={() => handleSort('supplier')}>\n                                             SUPPLIER\n                                             <span>\n                                                <When condition={sort.field !== 'supplier'}>\n                                                   <FaSort className=\"d-inline mx-1\" />\n                                                </When>\n                                                <When condition={sort.field === 'supplier' && sort.order === -1}>\n                                                   <FaSortDown className=\"d-inline mx-1\" />\n                                                </When>\n                                                <When condition={sort.field === 'supplier' && sort.order === 1}>\n                                                   <FaSortUp className=\"d-inline mx-1\" />\n                                                </When>\n                                             </span>\n                                          </strong>\n                                       </th>\n                                       <th>\n                                          <strong\n                                             className=\"tw-cursor-pointer\"\n                                             onClick={() => handleSort('modelNumber')}\n                                          >\n                                             MODEL NUMBER\n                                             <span>\n                                                <When condition={sort.field !== 'modelNumber'}>\n                                                   <FaSort className=\"d-inline mx-1\" />\n                                                </When>\n                                                <When condition={sort.field === 'modelNumber' && sort.order === -1}>\n                                                   <FaSortDown className=\"d-inline mx-1\" />\n                                                </When>\n                                                <When condition={sort.field === 'modelNumber' && sort.order === 1}>\n                                                   <FaSortUp className=\"d-inline mx-1\" />\n                                                </When>\n                                             </span>\n                                          </strong>\n                                       </th>\n                                       <th>\n                                          <strong\n                                             className=\"tw-cursor-pointer\"\n                                             onClick={() => handleSort('sourcePrice')}\n                                          >\n                                             PRICE\n                                             <span>\n                                                <When condition={sort.field !== 'sourcePrice'}>\n                                                   <FaSort className=\"d-inline mx-1\" />\n                                                </When>\n                                                <When condition={sort.field === 'sourcePrice' && sort.order === -1}>\n                                                   <FaSortDown className=\"d-inline mx-1\" />\n                                                </When>\n                                                <When condition={sort.field === 'sourcePrice' && sort.order === 1}>\n                                                   <FaSortUp className=\"d-inline mx-1\" />\n                                                </When>\n                                             </span>\n                                          </strong>\n                                       </th>\n                                       <th>\n                                          <strong className=\"tw-cursor-pointer\" onClick={() => handleSort('paid')}>\n                                             PAID\n                                             <span>\n                                                <When condition={sort.field !== 'paid'}>\n                                                   <FaSort className=\"d-inline mx-1\" />\n                                                </When>\n                                                <When condition={sort.field === 'paid' && sort.order === -1}>\n                                                   <FaSortDown className=\"d-inline mx-1\" />\n                                                </When>\n                                                <When condition={sort.field === 'paid' && sort.order === 1}>\n                                                   <FaSortUp className=\"d-inline mx-1\" />\n                                                </When>\n                                             </span>\n                                          </strong>\n                                       </th>\n                                       <th>\n                                          <strong>REMAINING</strong>\n                                       </th>\n                                       <th>\n                                          <strong>QUANTITY</strong>\n                                       </th>\n                                    </tr>\n                                 </thead>\n                                 <tbody>\n                                    {query.data?.inventories?.docs?.map((e, index) => {\n                                       const getQuantity = () => {\n                                          let q = e.quantity.single;\n                                          // eslint-disable-next-line prefer-destructuring\n                                          if (isArray(q)) q = q[0];\n                                          return q;\n                                       };\n\n                                       const quantity = getQuantity();\n\n                                       const getSourcePrice = () => {\n                                          const q = getQuantity();\n                                          return e.sourcePrice * q;\n                                       };\n\n                                       const sourcePrice = getSourcePrice();\n\n                                       const getRemainig = () => {\n                                          if (sourcePrice === e.paid) return null;\n\n                                          return sourcePrice - e.paid;\n                                       };\n\n                                       const getId = () => {\n                                          const id = e._id;\n                                          return id.slice(id.length - 3);\n                                       };\n\n                                       return (\n                                          <tr\n                                             key={`${e._id}`}\n                                             className={e.isRemaining && 'tw-bg-red-400 tw-text-gray-50'}\n                                          >\n                                             <td>\n                                                <strong className={e.isRemaining && 'tw-text-gray-50'}>\n                                                   {getId()}\n                                                </strong>\n                                             </td>\n                                             <td>{e?.supplier?.name ?? 'N/A'}</td>\n                                             <td>{e?.product?.modelNumber ?? 'N/A'}</td>\n                                             <td>{sourcePrice}</td>\n                                             <td>{e?.paid ?? 'N/A'}</td>\n                                             <td>{getRemainig()}</td>\n                                             <td>{quantity ? `${quantity} singles` : ''}</td>\n\n                                             <td>\n                                                <OverlayTrigger\n                                                   trigger={['hover', 'hover']}\n                                                   placement=\"top\"\n                                                   overlay={\n                                                      <Popover className=\"tw-border-gray-500\">\n                                                         <Popover.Content>{`Created by ${e.createdBy ?? 'N/A'} ${\n                                                            dayjs(e.createdAt).diff(dayjs(), 'day', true) > 7\n                                                               ? `at ${dayjs(e.createdAt).format('DD-MMM-YYYY')}`\n                                                               : dayjs(e.createdAt).fromNow()\n                                                         }.`}</Popover.Content>\n                                                      </Popover>\n                                                   }\n                                                >\n                                                   <AiOutlineQuestionCircle className=\"tw-cursor-pointer\" />\n                                                </OverlayTrigger>\n                                             </td>\n                                          </tr>\n                                       );\n                                    })}\n                                 </tbody>\n                              </Table>\n                           </Then>\n                           <Else>\n                              <When condition={!query.isLoading}>\n                                 <p className=\"tw-m-0\">No Purchases created</p>\n                              </When>\n                           </Else>\n                        </If>\n                     </Card.Body>\n                  </Card>\n                  <When condition={setLimit > 5 ? true : query.data?.inventories?.totalPages > 1}>\n                     <Pagination\n                        page={page}\n                        onPageChange={setPage}\n                        onLimitChange={setLimit}\n                        {..._.omit(query.data, ['docs'])}\n                        isLimitDisabled={query.isLoading}\n                     />\n                  </When>\n               </Else>\n            </If>\n         </Card>\n      </>\n   );\n};\n\nconst mapStateToProps = ({ auth }) => ({\n   user: auth.user,\n});\n\nconst mapDispatchToProps = {};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(SupplierActions);\n","/home/muneeb/dev/diamond-tiles-frontend/src/store/auth/actionTypes.js",[],"/home/muneeb/dev/diamond-tiles-frontend/src/jsx/pages/employees/index.js",["549","550"],"import { useDebounce } from 'ahooks';\nimport dayjs from 'dayjs';\nimport relativeTime from 'dayjs/plugin/relativeTime';\nimport Button from 'jsx/components/Button';\nimport Pagination from 'jsx/components/Pagination';\nimport SpinnerOverlay from 'jsx/components/SpinnerOverlay';\nimport { del, get, useAlert, useMutation, useQuery } from 'jsx/helpers';\nimport PageTItle from 'jsx/layouts/PageTitle';\nimport _ from 'lodash';\nimport React, { useEffect, useState } from 'react';\nimport { ButtonGroup, Card, Col, OverlayTrigger, Popover, Row, Table } from 'react-bootstrap';\nimport { AiFillDelete, AiFillEdit, AiFillEye, AiFillPlusCircle, AiOutlineQuestionCircle } from 'react-icons/ai';\nimport { FaSort, FaSortDown, FaSortUp } from 'react-icons/fa';\nimport { Else, If, Then, When } from 'react-if';\nimport { useQueryClient } from 'react-query';\nimport { useDispatch } from 'react-redux';\nimport { useHistory } from 'react-router-dom';\nimport { setEmployeesData, setEmployeesVisibility } from 'store/actions';\nimport swal from 'sweetalert';\n\nconst Employees = () => {\n   dayjs.extend(relativeTime);\n   const history = useHistory();\n   const [page, setPage] = useState(1);\n   const [limit, setLimit] = useState(5);\n   const [sort, setSort] = useState({ field: null, order: -1 });\n   const [search, setSearch] = useState('');\n   const debouncedSearchValue = useDebounce(search, { wait: 500 });\n\n   const alert = useAlert();\n   const queryClient = useQueryClient();\n\n   const dispatch = useDispatch();\n\n   const query = useQuery(['employees', page, limit, sort.field, sort.order, debouncedSearchValue], () =>\n      get('/employees', page, limit, sort.field, sort.order, debouncedSearchValue)\n   );\n   const deleteMutation = useMutation((id) => del(`/employees/id/${id}`), {\n      onSuccess: async () => {\n         await queryClient.invalidateQueries('employees');\n         alert.setAlert({\n            message: 'Employee deleted successfully',\n            variant: 'success',\n         });\n      },\n      onError: (err) => {\n         alert.setErrorAlert({ message: 'Unable to delete employee', err });\n      },\n   });\n\n   const handleOnClickEdit = (obj) => {\n      dispatch(setEmployeesVisibility(true));\n      dispatch(setEmployeesData(obj));\n   };\n\n   const handleOnClickAdd = () => {\n      dispatch(setEmployeesVisibility(true));\n   };\n\n   const handleOnClickDelete = (id) => {\n      swal({\n         title: 'Are you sure?',\n         text: 'Once deleted, you will not be able to recover it!',\n         icon: 'warning',\n         buttons: true,\n         dangerMode: true,\n      }).then((willDelete) => {\n         if (willDelete) {\n            deleteMutation.mutate(id);\n         }\n      });\n   };\n\n   const alertMarkup = alert.getAlert();\n\n   const handleSort = (key) => {\n      setSort((prev) => ({ field: key, order: prev.order * -1 }));\n   };\n\n   useEffect(() => {\n      if (page > query.data?.totalPages) {\n         setPage((prev) => prev - 1);\n      }\n   }, [page, query.data?.totalPages]);\n\n   return (\n      <>\n         <PageTItle activeMenu=\"employees\" motherMenu=\"Manage\" />\n         <div className=\"row tw-mb-8\">\n            <div className=\"col-xl-6\">\n               <Button variant=\"primary\" icon={AiFillPlusCircle} onClick={handleOnClickAdd}>\n                  Add New employee\n               </Button>\n            </div>\n\n            <div className=\"col-xl-6\">\n               <ButtonGroup className=\"tw-float-right\">\n                  <input\n                     type=\"text\"\n                     className=\"input-rounded tw-rounded-r-none tw-pl-6\"\n                     placeholder=\"Search Employees...\"\n                     disabled={deleteMutation.isLoading}\n                     onChange={(e) => setSearch(e.target.value)}\n                  />\n                  <Button variant=\"secondary\" className=\"btn btn-secondary tw-pl-6\" loading={query.isLoading}>\n                     Search\n                  </Button>\n               </ButtonGroup>\n            </div>\n         </div>\n         {alertMarkup ? (\n            <Row>\n               <Col lg={12}>{alertMarkup}</Col>\n            </Row>\n         ) : null}\n         <div className=\"row\">\n            <Col lg={12}>\n               <Card>\n                  <When condition={query.isLoading || deleteMutation.isLoading}>\n                     <SpinnerOverlay />\n                  </When>\n                  <Card.Header>\n                     <Card.Title>Manage Employees</Card.Title>\n                  </Card.Header>\n                  <Card.Body>\n                     <If condition={query.data?.totalDocs > 0}>\n                        <Then>\n                           <Table className=\"tw-relative\" responsive>\n                              <thead>\n                                 <tr>\n                                    <th className=\"width80\">\n                                       <strong>#</strong>\n                                    </th>\n                                    <th>\n                                       <strong className=\"tw-cursor-pointer\" onClick={() => handleSort('name')}>\n                                          NAME\n                                          <span>\n                                             <When condition={sort.field !== 'name'}>\n                                                <FaSort className=\"d-inline mx-1\" />\n                                             </When>\n                                             <When condition={sort.field === 'name' && sort.order === -1}>\n                                                <FaSortDown className=\"d-inline mx-1\" />\n                                             </When>\n                                             <When condition={sort.field === 'name' && sort.order === 1}>\n                                                <FaSortUp className=\"d-inline mx-1\" />\n                                             </When>\n                                          </span>\n                                       </strong>\n                                    </th>\n                                    <th>\n                                       <strong className=\"tw-cursor-pointer\" onClick={() => handleSort('phone')}>\n                                          PHONE#\n                                          <span>\n                                             <When condition={sort.field !== 'phone'}>\n                                                <FaSort className=\"d-inline mx-1\" />\n                                             </When>\n                                             <When condition={sort.field === 'phone' && sort.order === -1}>\n                                                <FaSortDown className=\"d-inline mx-1\" />\n                                             </When>\n                                             <When condition={sort.field === 'phone' && sort.order === 1}>\n                                                <FaSortUp className=\"d-inline mx-1\" />\n                                             </When>\n                                          </span>\n                                       </strong>\n                                    </th>\n                                    <th>\n                                       <strong className=\"tw-cursor-pointer\" onClick={() => handleSort('cnic')}>\n                                          CNIC\n                                          <span>\n                                             <When condition={sort.field !== 'cnic'}>\n                                                <FaSort className=\"d-inline mx-1\" />\n                                             </When>\n                                             <When condition={sort.field === 'cnic' && sort.order === -1}>\n                                                <FaSortDown className=\"d-inline mx-1\" />\n                                             </When>\n                                             <When condition={sort.field === 'cnic' && sort.order === 1}>\n                                                <FaSortUp className=\"d-inline mx-1\" />\n                                             </When>\n                                          </span>\n                                       </strong>\n                                    </th>\n                                    <th>\n                                       <strong className=\"tw-cursor-pointer\" onClick={() => handleSort('address')}>\n                                          ADDRESS\n                                          <span>\n                                             <When condition={sort.field !== 'address'}>\n                                                <FaSort className=\"d-inline mx-1\" />\n                                             </When>\n                                             <When condition={sort.field === 'address' && sort.order === -1}>\n                                                <FaSortDown className=\"d-inline mx-1\" />\n                                             </When>\n                                             <When condition={sort.field === 'address' && sort.order === 1}>\n                                                <FaSortUp className=\"d-inline mx-1\" />\n                                             </When>\n                                          </span>\n                                       </strong>\n                                    </th>\n                                    <th>\n                                       <strong className=\"tw-cursor-pointer\" onClick={() => handleSort('salary')}>\n                                          SALARY\n                                          <span>\n                                             <When condition={sort.field !== 'salary'}>\n                                                <FaSort className=\"d-inline mx-1\" />\n                                             </When>\n                                             <When condition={sort.field === 'salary' && sort.order === -1}>\n                                                <FaSortDown className=\"d-inline mx-1\" />\n                                             </When>\n                                             <When condition={sort.field === 'salary' && sort.order === 1}>\n                                                <FaSortUp className=\"d-inline mx-1\" />\n                                             </When>\n                                          </span>\n                                       </strong>\n                                    </th>\n                                 </tr>\n                              </thead>\n                              <tbody>\n                                 {query.data?.docs.map((e, index) => (\n                                    <tr key={`${e._id}`}>\n                                       <td>\n                                          <strong>{query.data.pagingCounter + index}</strong>\n                                       </td>\n                                       <td>{e.name}</td>\n                                       <td>{e.phone}</td>\n                                       <td>{e.cnic}</td>\n                                       <td>{e.address}</td>\n                                       <td>{e.salary}</td>\n                                       <td>\n                                          <div className=\"tw-flex tw-items-center tw-gap-2\">\n                                             <OverlayTrigger\n                                                trigger={['hover', 'hover']}\n                                                placement=\"top\"\n                                                overlay={\n                                                   <Popover className=\"tw-border-gray-500\">\n                                                      <Popover.Content>{`Created by ${e.createdBy ?? 'N/A'} ${\n                                                         dayjs(e.createdAt).diff(dayjs(), 'day', true) > 7\n                                                            ? `at ${dayjs(e.createdAt).format('DD-MMM-YYYY')}`\n                                                            : dayjs(e.createdAt).fromNow()\n                                                      }.`}</Popover.Content>\n                                                   </Popover>\n                                                }\n                                             >\n                                                <AiOutlineQuestionCircle className=\"tw-cursor-pointer\" />\n                                             </OverlayTrigger>\n                                             <ButtonGroup>\n                                                <Button\n                                                   variant=\"light\"\n                                                   size=\"sm\"\n                                                   icon={AiFillEdit}\n                                                   onClick={() => handleOnClickEdit(e)}\n                                                >\n                                                   Edit\n                                                </Button>\n                                                <Button\n                                                   variant=\"danger\"\n                                                   size=\"sm\"\n                                                   icon={AiFillDelete}\n                                                   onClick={() => handleOnClickDelete(e._id)}\n                                                >\n                                                   Delete\n                                                </Button>\n                                             </ButtonGroup>\n                                          </div>\n                                       </td>\n                                    </tr>\n                                 ))}\n                              </tbody>\n                           </Table>\n                        </Then>\n                        <Else>\n                           <When condition={!query.isLoading && !debouncedSearchValue}>\n                              <p className=\"tw-m-0\">No employees created</p>\n                           </When>\n                           <When condition={!query.isLoading && debouncedSearchValue}>\n                              <p className=\"tw-m-0\">No result found!</p>\n                           </When>\n                        </Else>\n                     </If>\n                  </Card.Body>\n               </Card>\n            </Col>\n         </div>\n         <When condition={limit > 5 ? true : query.data?.totalPages > 1}>\n            <Pagination\n               page={page}\n               onPageChange={setPage}\n               onLimitChange={setLimit}\n               {..._.omit(query.data, ['docs'])}\n               isLimitDisabled={query.isLoading || deleteMutation.isLoading}\n            />\n         </When>\n      </>\n   );\n};\n\nexport default Employees;\n","/home/muneeb/dev/diamond-tiles-frontend/src/jsx/pages/inventory/index.js",["551","552","553","554","555","556","557","558","559"],"/* eslint-disable prefer-destructuring */\nimport { useDebounce } from 'ahooks';\nimport dayjs from 'dayjs';\nimport relativeTime from 'dayjs/plugin/relativeTime';\nimport produce from 'immer';\nimport Button from 'jsx/components/Button';\nimport Pagination from 'jsx/components/Pagination';\nimport SpinnerOverlay from 'jsx/components/SpinnerOverlay';\nimport { del, get, getV2, useAlert, useQuery } from 'jsx/helpers';\nimport { userRoles } from 'jsx/helpers/enums';\nimport getQuantity from 'jsx/helpers/getQuantity';\nimport PageTItle from 'jsx/layouts/PageTitle';\nimport _, { isArray } from 'lodash';\nimport React, { useEffect, useState, Fragment } from 'react';\n\nimport { ButtonGroup, Card, Col, OverlayTrigger, Popover, Row, Table } from 'react-bootstrap';\nimport ReactDatePicker from 'react-datepicker';\nimport { AiFillDelete, AiFillEdit, AiFillPlusCircle, AiOutlineQuestionCircle } from 'react-icons/ai';\nimport { FaSort, FaSortDown, FaSortUp } from 'react-icons/fa';\nimport { Else, If, Then, When } from 'react-if';\nimport { useMutation, useQueryClient } from 'react-query';\nimport { useDispatch, connect, batch } from 'react-redux';\nimport { useHistory } from 'react-router-dom';\nimport { setInventoriesData, setInventoriesVisibility } from 'store/actions';\nimport swal from 'sweetalert';\n\nconst Khaata = (props) => {\n   const history = useHistory();\n   const [page, setPage] = useState(1);\n   const [limit, setLimit] = useState(5);\n   const [sort, setSort] = useState({ field: null, order: -1 });\n   const [search, setSearch] = useState('');\n   const debouncedSearchValue = useDebounce(search, { wait: 500 });\n\n   const alert = useAlert();\n   const queryClient = useQueryClient();\n   const dispatch = useDispatch();\n\n   const query = useQuery(['inventories', page, limit, sort.field, sort.order, debouncedSearchValue], () =>\n      getV2('/inventories', {\n         page,\n         limit,\n         search: debouncedSearchValue,\n         sort: { [sort.field]: sort.order },\n      })\n   );\n   const alertMarkup = alert.getAlert();\n\n   const handleSort = (key) => {\n      setSort((prev) => ({ field: key, order: prev.order * -1 }));\n   };\n\n   useEffect(() => {\n      if (page > query.data?.totalPages) {\n         setPage((prev) => prev - 1);\n      }\n   }, [page, query.data?.totalPages]);\n\n   const mutation = useMutation((id) => del(`/inventories/id/${id}`), {\n      onSuccess: async () => {\n         await queryClient.invalidateQueries('inventories');\n         alert.setAlert({\n            message: 'Inventory deleted successfully',\n            variant: 'success',\n         });\n      },\n      onError: (err) => {\n         alert.setErrorAlert({ message: 'Unable to delete user', err });\n      },\n   });\n\n   const handleOnClickDelete = (id) => {\n      swal({\n         title: 'Are you sure?',\n         text: 'Once deleted, you will not be able to recover it!',\n         icon: 'warning',\n         buttons: true,\n         dangerMode: true,\n      }).then((willDelete) => {\n         if (willDelete) {\n            mutation.mutate(id);\n         }\n      });\n   };\n\n   const handleOnClickAdd = () => {\n      dispatch(setInventoriesVisibility(true));\n   };\n\n   const handleEdit = (inventory) => {\n      const updatedInventory = produce(inventory, (draft) => {\n         if (inventory.product.type.title.toLowerCase() === 'tile') {\n            Object.entries(inventory.variants).forEach(([key, value]) => {\n               if (value[0] > 0) draft.variants[key] = `${value[0]}b`;\n               else draft.variants[key] = `${value[1]}t`;\n            });\n         } else {\n            const quantity = inventory.quantity;\n            if (quantity[0] > 0) draft.quantity = `${quantity[0]}b`;\n            else draft.variants = `${quantity[1]}t`;\n         }\n      });\n\n      batch(() => {\n         dispatch(setInventoriesData(updatedInventory));\n         dispatch(setInventoriesVisibility(true));\n      });\n   };\n\n   return (\n      <>\n         <PageTItle activeMenu=\"Inventory\" motherMenu=\"Diamond Tiles\" />\n         {alertMarkup ? (\n            <Row>\n               <Col lg={12}>{alertMarkup}</Col>\n            </Row>\n         ) : null}\n\n         <div className=\"row\">\n            <Col lg={12}>\n               <Card>\n                  <When condition={query.isLoading || mutation.isLoading}>\n                     <SpinnerOverlay />\n                  </When>\n                  <Card.Header>\n                     <Card.Title>Inventory</Card.Title>\n                     <ButtonGroup className=\"tw-float-right\">\n                        <input\n                           type=\"text\"\n                           className=\"input-rounded tw-rounded-r-none tw-pl-6 tw-shadow-inner tw-ring-1 \"\n                           placeholder=\"Search Inventory by Product\"\n                           onChange={(e) => setSearch(e.target.value)}\n                           value={search}\n                        />\n                        <Button size=\"sm\" variant=\"primary\" icon={AiFillPlusCircle} onClick={handleOnClickAdd}>\n                           Add Inventory\n                        </Button>\n                     </ButtonGroup>\n                  </Card.Header>\n                  <Card.Body>\n                     <If condition={query.data?.totalDocs > 0}>\n                        <Then>\n                           <Table className=\"tw-relative\" responsive>\n                              <thead>\n                                 <tr>\n                                    <th className=\"width80\">\n                                       <strong>#</strong>\n                                    </th>\n                                    <th>\n                                       <strong className=\"tw-cursor-pointer\" onClick={() => handleSort('modelNumber')}>\n                                          Product\n                                          <span>\n                                             <When condition={sort.field !== 'modelNumber'}>\n                                                <FaSort className=\"d-inline mx-1\" />\n                                             </When>\n                                             <When condition={sort.field === 'modelNumber' && sort.order === -1}>\n                                                <FaSortDown className=\"d-inline mx-1\" />\n                                             </When>\n                                             <When condition={sort.field === 'modelNumber' && sort.order === 1}>\n                                                <FaSortUp className=\"d-inline mx-1\" />\n                                             </When>\n                                          </span>\n                                       </strong>\n                                    </th>\n\n                                    <th>\n                                       <strong className=\"tw-cursor-pointer\" onClick={() => handleSort('quantity')}>\n                                          QUANTITY\n                                          <span>\n                                             <When condition={sort.field !== 'quantity'}>\n                                                <FaSort className=\"d-inline mx-1\" />\n                                             </When>\n                                             <When condition={sort.field === 'quantity' && sort.order === -1}>\n                                                <FaSortDown className=\"d-inline mx-1\" />\n                                             </When>\n                                             <When condition={sort.field === 'quantity' && sort.order === 1}>\n                                                <FaSortUp className=\"d-inline mx-1\" />\n                                             </When>\n                                          </span>\n                                       </strong>\n                                    </th>\n                                 </tr>\n                              </thead>\n                              <tbody>\n                                 {query.data?.docs.map((e, index) => {\n                                    const isVariant = e.variants;\n                                    return (\n                                       <tr key={`${e._id}`}>\n                                          <td>\n                                             <strong>{query.data.pagingCounter + index}</strong>\n                                          </td>\n                                          <td>{e.product.modelNumber ?? 'N/A'}</td>\n                                          <td>\n                                             {isVariant\n                                                ? Object.entries(e.variants).map(([key, value]) => (\n                                                     <>\n                                                        <span className=\"tw-mr-4\">{`${key.toUpperCase()}: ${getQuantity(\n                                                           value\n                                                        )}`}</span>\n                                                     </>\n                                                  ))\n                                                : getQuantity(e.quantity)}\n                                          </td>\n                                          <td>\n                                             <When condition={props.user?.role !== userRoles.CASHIER}>\n                                                <ButtonGroup>\n                                                   <Button\n                                                      variant=\"light\"\n                                                      size=\"sm\"\n                                                      icon={AiFillEdit}\n                                                      onClick={() => handleEdit(e)}\n                                                   >\n                                                      Edit\n                                                   </Button>\n                                                   <Button\n                                                      variant=\"danger\"\n                                                      size=\"sm\"\n                                                      icon={AiFillDelete}\n                                                      onClick={() => handleOnClickDelete(e._id)}\n                                                   >\n                                                      Delete\n                                                   </Button>\n                                                </ButtonGroup>\n                                             </When>\n                                          </td>\n                                       </tr>\n                                    );\n                                 })}\n                              </tbody>\n                           </Table>\n                        </Then>\n                        <Else>\n                           <When condition={!query.isLoading && !debouncedSearchValue}>\n                              <p className=\"tw-m-0\">No inventory created</p>\n                           </When>\n                           <When condition={!query.isLoading && debouncedSearchValue}>\n                              <p className=\"tw-m-0\">No result found!</p>\n                           </When>\n                        </Else>\n                     </If>\n                  </Card.Body>\n               </Card>\n            </Col>\n         </div>\n         <When condition={limit > 5 ? true : query.data?.totalPages > 1}>\n            <Pagination\n               page={page}\n               onPageChange={setPage}\n               onLimitChange={setLimit}\n               {..._.omit(query.data, ['docs'])}\n               isLimitDisabled={query.isLoading}\n            />\n         </When>\n      </>\n   );\n};\n\nexport default connect((state) => ({ user: state.auth.user }))(Khaata);\n","/home/muneeb/dev/diamond-tiles-frontend/src/jsx/pages/dashboard/index.js",["560","561","562","563","564"],"/home/muneeb/dev/diamond-tiles-frontend/src/jsx/pages/khaata/index.js",["565","566","567","568","569","570","571","572","573","574","575","576","577","578"],"import { useDebounce } from 'ahooks';\nimport dayjs from 'dayjs';\nimport relativeTime from 'dayjs/plugin/relativeTime';\nimport { getActiveElement } from 'formik';\nimport Button from 'jsx/components/Button';\nimport Pagination from 'jsx/components/Pagination';\nimport SpinnerOverlay from 'jsx/components/SpinnerOverlay';\nimport { get, useAlert, useQuery } from 'jsx/helpers';\nimport { userRoles } from 'jsx/helpers/enums';\nimport PageTItle from 'jsx/layouts/PageTitle';\nimport _ from 'lodash';\nimport React, { useEffect, useState } from 'react';\nimport { ButtonGroup, Card, Col, OverlayTrigger, Popover, Row, Table } from 'react-bootstrap';\nimport {\n   AiFillDelete,\n   AiFillEdit,\n   AiFillEye,\n   AiFillPlusCircle,\n   AiOutlineClear,\n   AiOutlineQuestionCircle,\n} from 'react-icons/ai';\nimport { FaSort, FaSortDown, FaSortUp } from 'react-icons/fa';\nimport { Else, If, Then, When } from 'react-if';\nimport { useQueryClient } from 'react-query';\nimport { connect } from 'react-redux';\nimport { useHistory } from 'react-router-dom';\n\nconst Khaata = (props) => {\n   dayjs.extend(relativeTime);\n   const history = useHistory();\n   const [page, setPage] = useState(1);\n   const [limit, setLimit] = useState(5);\n   const [sort, setSort] = useState({ field: null, order: -1 });\n   const [search, setSearch] = useState('');\n   const debouncedSearchValue = useDebounce(search, { wait: 500 });\n\n   const alert = useAlert();\n   const queryClient = useQueryClient();\n\n   const query = useQuery(['expenses/khaata', page, limit, sort.field, sort.order], () =>\n      get('/expenses/khaata', page, limit, sort.field, sort.order)\n   );\n\n   // const handleOnClickView = (obj) => {\n   //    history.push({ pathname: `/expenses/khaata/${obj._id}`, search: `?type=view` });\n   // };\n\n   const alertMarkup = alert.getAlert();\n\n   const handleSort = (key) => {\n      setSort((prev) => ({ field: key, order: prev.order * -1 }));\n   };\n\n   useEffect(() => {\n      if (page > query.data?.totalPages) {\n         setPage((prev) => prev - 1);\n      }\n   }, [page, query.data?.totalPages]);\n\n   return (\n      <>\n         <PageTItle activeMenu=\"khaata\" motherMenu=\"Diamond Tiles\" />\n         {alertMarkup ? (\n            <Row>\n               <Col lg={12}>{alertMarkup}</Col>\n            </Row>\n         ) : null}\n         <div className=\"row\">\n            <Col lg={12}>\n               <Card>\n                  <When condition={query.isLoading}>\n                     <SpinnerOverlay />\n                  </When>\n                  <Card.Header>\n                     <Card.Title>Khaata</Card.Title>\n                  </Card.Header>\n                  <Card.Body>\n                     <If condition={query.data?.totalDocs > 0}>\n                        <Then>\n                           <Table className=\"tw-relative\" responsive>\n                              <thead>\n                                 <tr>\n                                    <th className=\"width80\">\n                                       <strong>#</strong>\n                                    </th>\n                                    <th>\n                                       <strong className=\"tw-cursor-pointer\" onClick={() => handleSort('customer')}>\n                                          Customer\n                                          <span>\n                                             <When condition={sort.field !== 'customer'}>\n                                                <FaSort className=\"d-inline mx-1\" />\n                                             </When>\n                                             <When condition={sort.field === 'customer' && sort.order === -1}>\n                                                <FaSortDown className=\"d-inline mx-1\" />\n                                             </When>\n                                             <When condition={sort.field === 'customer' && sort.order === 1}>\n                                                <FaSortUp className=\"d-inline mx-1\" />\n                                             </When>\n                                          </span>\n                                       </strong>\n                                    </th>\n                                    <th>\n                                       <strong className=\"tw-cursor-pointer\" onClick={() => handleSort('inventory')}>\n                                          Product\n                                          <span>\n                                             <When condition={sort.field !== 'inventory'}>\n                                                <FaSort className=\"d-inline mx-1\" />\n                                             </When>\n                                             <When condition={sort.field === 'inventory' && sort.order === -1}>\n                                                <FaSortDown className=\"d-inline mx-1\" />\n                                             </When>\n                                             <When condition={sort.field === 'inventory' && sort.order === 1}>\n                                                <FaSortUp className=\"d-inline mx-1\" />\n                                             </When>\n                                          </span>\n                                       </strong>\n                                    </th>\n                                    <th>\n                                       <strong className=\"tw-cursor-pointer\" onClick={() => handleSort('quantity')}>\n                                          Qty\n                                          <span>\n                                             <When condition={sort.field !== 'quantity'}>\n                                                <FaSort className=\"d-inline mx-1\" />\n                                             </When>\n                                             <When condition={sort.field === 'quantity' && sort.order === -1}>\n                                                <FaSortDown className=\"d-inline mx-1\" />\n                                             </When>\n                                             <When condition={sort.field === 'quantity' && sort.order === 1}>\n                                                <FaSortUp className=\"d-inline mx-1\" />\n                                             </When>\n                                          </span>\n                                       </strong>\n                                    </th>\n                                    <th>\n                                       <strong className=\"tw-cursor-pointer\" onClick={() => handleSort('retailPrice')}>\n                                          Total\n                                          <span>\n                                             <When condition={sort.field !== 'retailPrice'}>\n                                                <FaSort className=\"d-inline mx-1\" />\n                                             </When>\n                                             <When condition={sort.field === 'retailPrice' && sort.order === -1}>\n                                                <FaSortDown className=\"d-inline mx-1\" />\n                                             </When>\n                                             <When condition={sort.field === 'retailPrice' && sort.order === 1}>\n                                                <FaSortUp className=\"d-inline mx-1\" />\n                                             </When>\n                                          </span>\n                                       </strong>\n                                    </th>\n                                    <th>\n                                       <strong className=\"tw-cursor-pointer\" onClick={() => handleSort('paid')}>\n                                          Paid\n                                          <span>\n                                             <When condition={sort.field !== 'paid'}>\n                                                <FaSort className=\"d-inline mx-1\" />\n                                             </When>\n                                             <When condition={sort.field === 'paid' && sort.order === -1}>\n                                                <FaSortDown className=\"d-inline mx-1\" />\n                                             </When>\n                                             <When condition={sort.field === 'paid' && sort.order === 1}>\n                                                <FaSortUp className=\"d-inline mx-1\" />\n                                             </When>\n                                          </span>\n                                       </strong>\n                                    </th>\n                                 </tr>\n                              </thead>\n                              <tbody>\n                                 {query.data &&\n                                    query.data?.docs.map((e, index) => {\n                                       const getId = () => {\n                                          const id = e._id;\n                                          return id.slice(id.length - 3);\n                                       };\n                                       const getTotal = () => {\n                                          const price = e.type === 'inventory' ? e.sourcePrice : e.retailPrice;\n                                          if (!price) return null;\n                                          return price * e.quantity;\n                                       };\n                                       return (\n                                          <tr key={`${e._id}`}>\n                                             <td>\n                                                <strong>{getId()}</strong>\n                                             </td>\n                                             <td>{e[e.type === 'sale' ? 'customer' : 'supplier']?.name ?? 'N/A'}</td>\n                                             <td>\n                                                {e[e.type === 'sale' ? 'inventory' : 'product']?.modelNumber ?? 'N/A'}\n                                             </td>\n                                             <td>{e?.quantity ?? 'N/a'}</td>\n                                             <td>{getTotal()}</td>\n                                             <td>{e?.paid ?? 'N/A'}</td>\n                                             <td>\n                                                <OverlayTrigger\n                                                   trigger={['hover', 'hover']}\n                                                   placement=\"top\"\n                                                   overlay={\n                                                      <Popover className=\"tw-border-gray-500\">\n                                                         <Popover.Content>{`Created by ${e.createdBy ?? 'N/A'} ${\n                                                            dayjs(e.createdAt).diff(dayjs(), 'day', true) > 7\n                                                               ? `at ${dayjs(e.createdAt).format('DD-MMM-YYYY')}`\n                                                               : dayjs(e.createdAt).fromNow()\n                                                         }.`}</Popover.Content>\n                                                      </Popover>\n                                                   }\n                                                >\n                                                   <AiOutlineQuestionCircle className=\"tw-cursor-pointer\" />\n                                                </OverlayTrigger>\n                                             </td>\n                                             {/* <When condition={props.user?.role !== userRoles.CASHIER}>\n                                                <td>\n                                                   <Button\n                                                      variant=\"danger\"\n                                                      size=\"sm\"\n                                                      icon={AiOutlineClear}\n                                                      onClick={() => {}}\n                                                   >\n                                                      Clear\n                                                   </Button>\n                                                </td>\n                                             </When> */}\n                                          </tr>\n                                       );\n                                    })}\n                              </tbody>\n                           </Table>\n                        </Then>\n                        <Else>\n                           <When condition={!query.isLoading && !debouncedSearchValue}>\n                              <p className=\"tw-m-0\">No sales created</p>\n                           </When>\n                           <When condition={!query.isLoading && debouncedSearchValue}>\n                              <p className=\"tw-m-0\">No result found!</p>\n                           </When>\n                        </Else>\n                     </If>\n                  </Card.Body>\n               </Card>\n            </Col>\n         </div>\n         <When condition={limit > 5 ? true : query.data?.totalPages > 1}>\n            <Pagination\n               page={page}\n               onPageChange={setPage}\n               onLimitChange={setLimit}\n               {..._.omit(query.data, ['docs'])}\n               isLimitDisabled={query.isLoading}\n            />\n         </When>\n      </>\n   );\n};\n\nconst mapStateToProps = ({ auth }) => ({\n   user: auth.user,\n});\n\nconst mapDispatchToProps = {};\nexport default connect(mapStateToProps, mapDispatchToProps)(Khaata);\n","/home/muneeb/dev/diamond-tiles-frontend/src/jsx/layouts/index.js",["579","580"],"import React, { memo, useEffect } from 'react';\nimport { setLogin, setLogout } from 'store/auth/actions';\nimport { connect } from 'react-redux';\nimport Nav from './nav';\nimport Footer from './Footer';\nimport { get } from '../helpers';\n\nconst Layout = ({ children: Children, isPublic, setUser, logout }) => {\n   const token = localStorage.getItem('auth_token');\n   const getUserProfile = async () => {\n      try {\n         const res = await get(`/auth/decode/${token}`);\n         if (!res?.isConfirmed) {\n            logout();\n            localStorage.clear();\n            window.location = 'page-login';\n         } else {\n            setUser({ ...res, auth_token: token });\n         }\n      } catch (error) {\n         logout();\n         setUser({});\n         localStorage.clear();\n         window.location = 'page-login';\n      }\n   };\n\n   useEffect(() => {\n      if (token) {\n         getUserProfile();\n      }\n   }, [token]);\n\n   const MemoizedNav = memo(Nav);\n   if (isPublic)\n      return (\n         <>\n            <div id=\"main-wrapper\" className=\"show\">\n               <div className=\"container-fluid\">\n                  {/* <Children /> */}\n                  {Children}\n               </div>\n            </div>\n         </>\n      );\n\n   return (\n      <>\n         <div id=\"main-wrapper\" className=\"show\">\n            <MemoizedNav />\n            <div className=\"content-body\">\n               <div className=\"container-fluid\">\n                  {/* <Children /> */}\n                  {Children}\n               </div>\n            </div>\n            <Footer />\n         </div>\n      </>\n   );\n};\nconst mapStateToProps = (state) => ({});\n\nconst mapDispatchToProps = (dispatch) => ({\n   setUser: (payload) => dispatch(setLogin(payload)),\n   logout: () => dispatch(setLogout()),\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Layout);\n","/home/muneeb/dev/diamond-tiles-frontend/src/jsx/pages/expenses/index.js",["581","582","583","584","585","586","587"],"import { useDebounce } from 'ahooks';\nimport dayjs from 'dayjs';\nimport relativeTime from 'dayjs/plugin/relativeTime';\nimport Button from 'jsx/components/Button';\nimport Pagination from 'jsx/components/Pagination';\nimport SpinnerOverlay from 'jsx/components/SpinnerOverlay';\nimport { del, get, useAlert, useMutation, useQuery } from 'jsx/helpers';\nimport { userRoles } from 'jsx/helpers/enums';\nimport getSortingIcon from 'jsx/helpers/getSortingIcon';\nimport PageTItle from 'jsx/layouts/PageTitle';\nimport _ from 'lodash';\nimport React, { useState, useEffect } from 'react';\nimport { ButtonGroup, Card, Col, OverlayTrigger, Popover, Row, Table } from 'react-bootstrap';\nimport { AiFillDelete, AiFillEdit, AiFillEye, AiFillPlusCircle, AiOutlineQuestionCircle } from 'react-icons/ai';\nimport { FaSort, FaSortDown, FaSortUp } from 'react-icons/fa';\nimport { Else, If, Then, When } from 'react-if';\nimport { useQueryClient } from 'react-query';\nimport { connect, useDispatch } from 'react-redux';\nimport { useHistory } from 'react-router-dom';\nimport { setExpensesVisibility } from 'store/actions';\nimport swal from 'sweetalert';\nimport ExpenseTypes from '../expenseTypes';\nimport Salaries from '../salaries';\n\nconst Expenses = (props) => {\n   dayjs.extend(relativeTime);\n   const history = useHistory();\n   const [page, setPage] = useState(1);\n   const [limit, setLimit] = useState(5);\n   const [sort, setSort] = useState({ field: null, order: -1 });\n   const [search, setSearch] = useState('');\n   const debouncedSearchValue = useDebounce(search, { wait: 500 });\n\n   const alert = useAlert();\n   const queryClient = useQueryClient();\n   const dispatch = useDispatch();\n\n   const query = useQuery(['expenses', page, limit, sort.field, sort.order, debouncedSearchValue], () =>\n      get('/expenses', page, limit, sort.field, sort.order, debouncedSearchValue)\n   );\n   const deleteMutation = useMutation((id) => del(`/expenses/id/${id}`), {\n      onSuccess: async () => {\n         await queryClient.invalidateQueries('expenses');\n         alert.setAlert({\n            message: 'Sale deleted successfully',\n            variant: 'success',\n         });\n      },\n      onError: (err) => {\n         alert.setErrorAlert({ message: 'Unable to delete sale', err });\n      },\n   });\n\n   // const handleOnClickView = (obj) => {\n   //    history.push({ pathname: `/expenses/${obj._id}`, search: `?type=view` });\n   // };\n   const handleOnClickAdd = () => {\n      history.push('/expenses/add');\n   };\n\n   const handleOnClickDelete = (id) => {\n      swal({\n         title: 'Are you sure?',\n         text: 'Once deleted, you will not be able to recover it!',\n         icon: 'warning',\n         buttons: true,\n         dangerMode: true,\n      }).then((willDelete) => {\n         if (willDelete) {\n            deleteMutation.mutate(id);\n         }\n      });\n   };\n\n   const alertMarkup = alert.getAlert();\n\n   const handleSort = (key) => {\n      setSort((prev) => ({ field: key, order: prev.order * -1 }));\n   };\n   useEffect(() => {\n      if (page > query.data?.totalPages) {\n         setPage((prev) => prev - 1);\n      }\n   }, [page, query.data?.totalPages]);\n\n   return (\n      <>\n         <PageTItle activeMenu=\"Expenses\" motherMenu=\"Diamond Tiles\" />\n\n         {alertMarkup ? (\n            <Row>\n               <Col lg={12}>{alertMarkup}</Col>\n            </Row>\n         ) : null}\n         <div className=\"row\">\n            <div className=\"col-xl-12 mb-4\">\n               <Salaries />\n            </div>\n            <Col lg={12}>\n               <Card>\n                  <When condition={query.isLoading || deleteMutation.isLoading}>\n                     <SpinnerOverlay />\n                  </When>\n                  <Card.Header>\n                     <Card.Title>Manage Expenses</Card.Title>\n                     <ButtonGroup className=\"tw-float-right\">\n                        <input\n                           type=\"text\"\n                           className=\"input-rounded tw-rounded-r-none tw-pl-6 tw-shadow-inner tw-ring-1 \"\n                           placeholder=\"Search Expenses...\"\n                           disabled={deleteMutation.isLoading}\n                           onChange={(e) => setSearch(e.target.value)}\n                        />\n                        <Button\n                           size=\"sm\"\n                           variant=\"primary\"\n                           icon={AiFillPlusCircle}\n                           onClick={() => dispatch(setExpensesVisibility(true))}\n                        >\n                           Add New Expense\n                        </Button>\n                     </ButtonGroup>\n                  </Card.Header>\n                  <Card.Body>\n                     <If condition={query.data?.totalDocs > 0}>\n                        <Then>\n                           <Table className=\"tw-relative\" responsive>\n                              <thead>\n                                 <tr>\n                                    <th className=\"width80\">\n                                       <strong>#</strong>\n                                    </th>\n                                    <th>{getSortingIcon({ label: 'Title' })}</th>\n\n                                    <th>\n                                       {getSortingIcon({ label: 'Amount', key: 'amount', onSort: handleSort, sort })}\n                                    </th>\n                                 </tr>\n                              </thead>\n                              <tbody>\n                                 {query.data?.docs.map((e, index) => (\n                                    <tr key={`${e._id}`}>\n                                       <td>\n                                          <strong>{query.data.pagingCounter + index}</strong>\n                                       </td>\n                                       <td>{e.title}</td>\n                                       <td>\n                                          {new Intl.NumberFormat('en-IN', {\n                                             maximumSignificantDigits: 3,\n                                          }).format(e.amount)}{' '}\n                                          PKR\n                                       </td>\n                                       <td>\n                                          <div className=\"tw-flex tw-items-center tw-gap-4\">\n                                             <OverlayTrigger\n                                                trigger={['hover', 'hover']}\n                                                placement=\"top\"\n                                                overlay={\n                                                   <Popover className=\"tw-border-gray-500\">\n                                                      <Popover.Content>\n                                                         {dayjs(e.createdAt).format('dddd[,] DD MMMM YYYY')}\n                                                      </Popover.Content>\n                                                   </Popover>\n                                                }\n                                             >\n                                                <AiOutlineQuestionCircle className=\"tw-cursor-pointer\" />\n                                             </OverlayTrigger>\n                                             <ButtonGroup>\n                                                <When condition={props.user?.role !== userRoles.CASHIER}>\n                                                   <Button\n                                                      variant=\"danger\"\n                                                      size=\"sm\"\n                                                      icon={AiFillDelete}\n                                                      onClick={() => handleOnClickDelete(e._id)}\n                                                   >\n                                                      Delete\n                                                   </Button>\n                                                </When>\n                                             </ButtonGroup>\n                                          </div>\n                                       </td>\n                                    </tr>\n                                 ))}\n                              </tbody>\n                           </Table>\n                        </Then>\n                        <Else>\n                           <When condition={!query.isLoading && !debouncedSearchValue}>\n                              <p className=\"tw-m-0\">No Expenses created</p>\n                           </When>\n                           <When condition={!query.isLoading && debouncedSearchValue}>\n                              <p className=\"tw-m-0\">No result found!</p>\n                           </When>\n                        </Else>\n                     </If>\n                  </Card.Body>\n               </Card>\n            </Col>\n         </div>\n         <When condition={limit > 5 ? true : query.data?.totalPages > 1}>\n            <Pagination\n               page={page}\n               onPageChange={setPage}\n               onLimitChange={setLimit}\n               {..._.omit(query.data, ['docs'])}\n               isLimitDisabled={query.isLoading || deleteMutation.isLoading}\n            />\n         </When>\n      </>\n   );\n};\n\nconst mapStateToProps = ({ auth }) => ({\n   user: auth.user,\n});\n\nconst mapDispatchToProps = {};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Expenses);\n","/home/muneeb/dev/diamond-tiles-frontend/src/jsx/pages/customers/index.js",["588","589"],"import Button from 'jsx/components/Button';\nimport Pagination from 'jsx/components/Pagination';\nimport SpinnerOverlay from 'jsx/components/SpinnerOverlay';\nimport { del, get, useAlert, useMutation, useQuery } from 'jsx/helpers';\nimport PageTItle from 'jsx/layouts/PageTitle';\nimport _ from 'lodash';\nimport React, { useEffect, useState } from 'react';\nimport { ButtonGroup, Card, Col, Row, Table, Popover, OverlayTrigger } from 'react-bootstrap';\nimport { AiFillDelete, AiFillEdit, AiFillEye, AiFillPlusCircle, AiOutlineQuestionCircle } from 'react-icons/ai';\nimport { Else, If, Then, When } from 'react-if';\nimport { useQueryClient } from 'react-query';\nimport { useHistory } from 'react-router-dom';\nimport dayjs from 'dayjs';\nimport relativeTime from 'dayjs/plugin/relativeTime';\nimport swal from 'sweetalert';\nimport { FaSort, FaSortDown, FaSortUp } from 'react-icons/fa';\nimport { useDebounce } from 'ahooks';\nimport { batch, connect, useDispatch } from 'react-redux';\nimport { userRoles } from 'jsx/helpers/enums';\nimport { setCustomersData, setCustomersVisibility } from 'store/actions';\n\ndayjs.extend(relativeTime);\nconst Customers = (props) => {\n   const history = useHistory();\n   const [page, setPage] = useState(1);\n   const [limit, setLimit] = useState(5);\n   const [sort, setSort] = useState({ field: null, order: 1 });\n   const [search, setSearch] = useState('');\n   const debouncedSearchValue = useDebounce(search, { wait: 500 });\n   const dispatch = useDispatch();\n\n   const alert = useAlert();\n   const queryClient = useQueryClient();\n\n   const query = useQuery(['customers', page, limit, sort.field, sort.order, debouncedSearchValue], () =>\n      get('/customers', page, limit, sort.field, sort.order, debouncedSearchValue)\n   );\n   const deleteMutation = useMutation((id) => del(`/customers/id/${id}`), {\n      onSuccess: async () => {\n         await queryClient.invalidateQueries('customers');\n         alert.setAlert({\n            message: 'Customer deleted successfully',\n            variant: 'success',\n         });\n      },\n      onError: (err) => {\n         alert.setErrorAlert({ message: 'Unable to delete customer', err });\n      },\n   });\n\n   const handleEdit = (customer) => {\n      batch(() => {\n         dispatch(setCustomersData(customer));\n         dispatch(setCustomersVisibility(true));\n      });\n   };\n\n   const handleOnClickView = (obj) => {\n      history.push({ pathname: `/customers/${obj._id}`, search: `?type=view` });\n   };\n   const handleOnClickAdd = () => {\n      history.push('/customers/add');\n   };\n\n   const handleOnClickDelete = (id) => {\n      swal({\n         title: 'Are you sure?',\n         text: 'Once deleted, you will not be able to recover it!',\n         icon: 'warning',\n         buttons: true,\n         dangerMode: true,\n      }).then((willDelete) => {\n         if (willDelete) {\n            deleteMutation.mutate(id);\n         }\n      });\n   };\n\n   const alertMarkup = alert.getAlert();\n\n   const handleSort = (key) => {\n      setSort((prev) => ({ field: key, order: prev.order * -1 }));\n   };\n\n   useEffect(() => {\n      if (page > query.data?.totalPages) {\n         setPage((prev) => prev - 1);\n      }\n   }, [page, query.data?.totalPages]);\n\n   return (\n      <>\n         <PageTItle activeMenu=\"Customers\" motherMenu=\"Manage\" />\n         <div className=\"row tw-mb-8\">\n            <div className=\"col-xl-6\">\n               <Button variant=\"primary\" icon={AiFillPlusCircle} onClick={handleOnClickAdd}>\n                  Add New Customer\n               </Button>\n            </div>\n\n            <div className=\"col-xl-6\">\n               <ButtonGroup className=\"tw-float-right\">\n                  <input\n                     type=\"text\"\n                     className=\"input-rounded tw-rounded-r-none tw-pl-6\"\n                     placeholder=\"Search Customers...\"\n                     disabled={deleteMutation.isLoading}\n                     onChange={(e) => setSearch(e.target.value)}\n                  />\n                  <Button variant=\"secondary\" className=\"btn btn-secondary tw-pl-6\" loading={query.isLoading}>\n                     Search\n                  </Button>\n               </ButtonGroup>\n            </div>\n         </div>\n         {alertMarkup ? (\n            <Row>\n               <Col lg={12}>{alertMarkup}</Col>\n            </Row>\n         ) : null}\n         <div className=\"row\">\n            <Col lg={12}>\n               <Card>\n                  <When condition={query.isLoading || deleteMutation.isLoading}>\n                     <SpinnerOverlay />\n                  </When>\n                  <Card.Header>\n                     <Card.Title>Manage Customers</Card.Title>\n                  </Card.Header>\n                  <Card.Body>\n                     <If condition={query.data?.totalDocs > 0}>\n                        <Then>\n                           <Table className=\"tw-relative\" responsive>\n                              <thead>\n                                 <tr>\n                                    <th className=\"width80\">\n                                       <strong>#</strong>\n                                    </th>\n                                    <th>\n                                       <strong className=\"tw-cursor-pointer\" onClick={() => handleSort('name')}>\n                                          NAME\n                                          <span>\n                                             <When condition={sort.field !== 'name'}>\n                                                <FaSort className=\"d-inline mx-1\" />\n                                             </When>\n                                             <When condition={sort.field === 'name' && sort.order === -1}>\n                                                <FaSortDown className=\"d-inline mx-1\" />\n                                             </When>\n                                             <When condition={sort.field === 'name' && sort.order === 1}>\n                                                <FaSortUp className=\"d-inline mx-1\" />\n                                             </When>\n                                          </span>\n                                       </strong>\n                                    </th>\n                                    <th>\n                                       <strong className=\"tw-cursor-pointer\" onClick={() => handleSort('phone')}>\n                                          Phone\n                                          <span>\n                                             <When condition={sort.field !== 'phone'}>\n                                                <FaSort className=\"d-inline mx-1\" />\n                                             </When>\n                                             <When condition={sort.field === 'phone' && sort.order === -1}>\n                                                <FaSortDown className=\"d-inline mx-1\" />\n                                             </When>\n                                             <When condition={sort.field === 'phone' && sort.order === 1}>\n                                                <FaSortUp className=\"d-inline mx-1\" />\n                                             </When>\n                                          </span>\n                                       </strong>\n                                    </th>\n                                 </tr>\n                              </thead>\n\n                              <tbody>\n                                 {query.data?.docs.map((e, index) => (\n                                    <tr key={`${e._id}`}>\n                                       <td>\n                                          <strong>{query.data.pagingCounter + index}</strong>\n                                       </td>\n                                       <td>{e.name}</td>\n                                       <td>{e.phone}</td>\n                                       <td>\n                                          <OverlayTrigger\n                                             trigger=\"hover\"\n                                             placement=\"top\"\n                                             overlay={\n                                                <Popover className=\"tw-border-gray-500\">\n                                                   <Popover.Content>{`Created by ${e.createdBy ?? 'N/A'} ${\n                                                      dayjs(e.createdAt).diff(dayjs(), 'day', true) > 7\n                                                         ? `at ${dayjs(e.createdAt).format('DD-MMM-YYYY')}`\n                                                         : dayjs(e.createdAt).fromNow()\n                                                   }.`}</Popover.Content>\n                                                </Popover>\n                                             }\n                                          >\n                                             <AiOutlineQuestionCircle className=\"tw-cursor-pointer\" />\n                                          </OverlayTrigger>\n                                       </td>\n                                       <When condition={props.user?.role !== userRoles.CASHIER}>\n                                          <td>\n                                             <ButtonGroup>\n                                                <Button\n                                                   variant=\"light\"\n                                                   size=\"sm\"\n                                                   icon={AiFillEdit}\n                                                   onClick={() => handleEdit(e)}\n                                                >\n                                                   Edit\n                                                </Button>\n                                                <Button\n                                                   variant=\"danger\"\n                                                   size=\"sm\"\n                                                   icon={AiFillDelete}\n                                                   onClick={() => handleOnClickDelete(e._id)}\n                                                >\n                                                   Delete\n                                                </Button>\n                                             </ButtonGroup>\n                                          </td>\n                                       </When>\n                                    </tr>\n                                 ))}\n                              </tbody>\n                           </Table>\n                        </Then>\n                        <Else>\n                           <When condition={!query.isLoading && !debouncedSearchValue}>\n                              <p className=\"tw-m-0\">No customers created</p>\n                           </When>\n                           <When condition={!query.isLoading && debouncedSearchValue}>\n                              <p className=\"tw-m-0\">No result found!</p>\n                           </When>\n                        </Else>\n                     </If>\n                  </Card.Body>\n               </Card>\n            </Col>\n         </div>\n         <When condition={limit > 5 ? true : query.data?.totalPages > 1}>\n            <Pagination\n               page={page}\n               onPageChange={setPage}\n               onLimitChange={setLimit}\n               {..._.omit(query.data, ['docs'])}\n               isLimitDisabled={query.isLoading || deleteMutation.isLoading}\n            />\n         </When>\n      </>\n   );\n};\nconst mapStateToProps = ({ auth }) => ({\n   user: auth.user,\n});\n\nconst mapDispatchToProps = {};\nexport default connect(mapStateToProps, mapDispatchToProps)(Customers);\n","/home/muneeb/dev/diamond-tiles-frontend/src/jsx/pages/products/index.js",["590","591","592","593","594","595","596","597"],"import { useDebounce } from 'ahooks';\nimport dayjs from 'dayjs';\nimport relativeTime from 'dayjs/plugin/relativeTime';\nimport Button from 'jsx/components/Button';\nimport Pagination from 'jsx/components/Pagination';\nimport SpinnerOverlay from 'jsx/components/SpinnerOverlay';\nimport { del, get, useAlert, useMutation, useQuery } from 'jsx/helpers';\nimport PageTItle from 'jsx/layouts/PageTitle';\nimport _ from 'lodash';\nimport React, { useCallback, useEffect, useState } from 'react';\nimport { ButtonGroup, Card, Col, OverlayTrigger, Popover, Row, Table } from 'react-bootstrap';\nimport { AiFillDelete, AiFillEdit, AiFillEye, AiFillPlusCircle, AiOutlineQuestionCircle } from 'react-icons/ai';\nimport { FaSort, FaSortDown, FaSortUp } from 'react-icons/fa';\nimport { Else, If, Then, When } from 'react-if';\nimport { useQueryClient } from 'react-query';\nimport { useHistory } from 'react-router-dom';\nimport swal from 'sweetalert';\nimport { connect, useDispatch, useSelector } from 'react-redux';\nimport { userRoles } from 'jsx/helpers/enums';\nimport ModalWrapper from 'jsx/components/ModalWrapper';\nimport { setProductsVisibility } from 'store/actions';\nimport Types from '../types';\nimport Units from '../units';\n\ndayjs.extend(relativeTime);\n\nconst Products = (props) => {\n   const history = useHistory();\n   const [page, setPage] = useState(1);\n   const [limit, setLimit] = useState(5);\n   const [sort, setSort] = useState({ field: null, order: -1 });\n   const [search, setSearch] = useState('');\n\n   const dispatch = useDispatch();\n   const debouncedSearchValue = useDebounce(search, { wait: 500 });\n\n   const alert = useAlert();\n   const queryClient = useQueryClient();\n\n   const query = useQuery(['products', page, limit, sort.field, sort.order, debouncedSearchValue], () =>\n      get('/products', page, limit, sort.field, sort.order, debouncedSearchValue)\n   );\n   const deleteMutation = useMutation((id) => del(`/products/id/${id}`), {\n      onSuccess: async () => {\n         await queryClient.invalidateQueries('products');\n         alert.setAlert({\n            message: 'Product deleted successfully',\n            variant: 'success',\n         });\n      },\n      onError: (err) => {\n         alert.setErrorAlert({ message: 'Unable to delete product', err });\n      },\n   });\n\n   const handleOnClickAdd = () => {\n      dispatch(setProductsVisibility(true));\n   };\n\n   const handleOnClickDelete = (id) => {\n      swal({\n         title: 'Are you sure?',\n         text: 'Once deleted, you will not be able to recover it!',\n         icon: 'warning',\n         buttons: true,\n         dangerMode: true,\n      }).then((willDelete) => {\n         if (willDelete) {\n            deleteMutation.mutate(id);\n         }\n      });\n   };\n\n   const alertMarkup = alert.getAlert();\n\n   const handleSort = (key) => {\n      setSort((prev) => ({ field: key, order: prev.order * -1 }));\n   };\n\n   const getHeadingWithSort = useCallback(\n      (label, field) => (\n         <strong className=\"tw-cursor-pointer\" onClick={() => handleSort(field)}>\n            {label}\n            <span>\n               <When condition={sort.field !== field}>\n                  <FaSort className=\"d-inline mx-1\" />\n               </When>\n               <When condition={sort.field === field && sort.order === -1}>\n                  <FaSortDown className=\"d-inline mx-1\" />\n               </When>\n               <When condition={sort.field === field && sort.order === 1}>\n                  <FaSortUp className=\"d-inline mx-1\" />\n               </When>\n            </span>\n         </strong>\n      ),\n      [sort.field, sort.order]\n   );\n\n   useEffect(() => {\n      if (page > query.data?.totalPages) {\n         setPage((prev) => prev - 1);\n      }\n   }, [page, query.data?.totalPages]);\n\n   return (\n      <>\n         <PageTItle activeMenu=\"products\" motherMenu=\"Manage\" />\n         <div className=\"row my-3\">\n            <div className=\"col-xl-5  my-2\">\n               <Types />\n            </div>\n            <div className=\"col-xl-7  my-2\">\n               <Units />\n            </div>\n         </div>\n\n         {alertMarkup ? (\n            <Row>\n               <Col lg={12}>{alertMarkup}</Col>\n            </Row>\n         ) : null}\n         <div className=\"row\">\n            <Col lg={12}>\n               <Card>\n                  <When condition={query.isLoading || deleteMutation.isLoading}>\n                     <SpinnerOverlay />\n                  </When>\n                  <Card.Header>\n                     <Card.Title>Manage Products</Card.Title>\n                     <ButtonGroup className=\"tw-float-right\">\n                        <input\n                           type=\"text\"\n                           className=\"input-rounded tw-rounded-r-none tw-pl-6 tw-shadow-inner tw-ring-1 \"\n                           placeholder=\"Search products by model\"\n                           disabled={deleteMutation.isLoading}\n                           onChange={(e) => setSearch(e.target.value)}\n                        />\n                        <Button size=\"sm\" variant=\"primary\" icon={AiFillPlusCircle} onClick={handleOnClickAdd}>\n                           Add New Product\n                        </Button>\n                     </ButtonGroup>\n                  </Card.Header>\n                  <Card.Body>\n                     <If condition={query.data?.totalDocs > 0}>\n                        <Then>\n                           <Table className=\"tw-relative\" responsive>\n                              <thead>\n                                 <tr>\n                                    <th className=\"width80\">\n                                       <strong>#</strong>\n                                    </th>\n\n                                    <th>{getHeadingWithSort('Model', 'modelNumber')}</th>\n                                    <th>\n                                       <strong>Type</strong>\n                                    </th>\n                                    <th>\n                                       <strong>Unit</strong>\n                                    </th>\n                                 </tr>\n                              </thead>\n                              <tbody>\n                                 {query.data?.docs.map((e, index) => (\n                                    <tr key={`${e._id}`}>\n                                       <td>\n                                          <strong>{query.data.pagingCounter + index}</strong>\n                                       </td>\n                                       <td>{e.modelNumber}</td>\n                                       <td>{e.type.title}</td>\n                                       <td>{e.unit.title}</td>\n                                       <td>\n                                          <When condition={props.user?.role !== userRoles.CASHIER}>\n                                             <Button\n                                                variant=\"danger\"\n                                                size=\"sm\"\n                                                icon={AiFillDelete}\n                                                onClick={() => handleOnClickDelete(e._id)}\n                                             >\n                                                Delete\n                                             </Button>\n                                          </When>\n                                       </td>\n                                    </tr>\n                                 ))}\n                              </tbody>\n                           </Table>\n                        </Then>\n                        <Else>\n                           <When condition={!query.isLoading && !debouncedSearchValue}>\n                              <p className=\"tw-m-0\">No products created</p>\n                           </When>\n                           <When condition={!query.isLoading && debouncedSearchValue}>\n                              <p className=\"tw-m-0\">No result found!</p>\n                           </When>\n                        </Else>\n                     </If>\n                  </Card.Body>\n               </Card>\n            </Col>\n         </div>\n         <When condition={limit > 5 ? true : query.data?.totalPages > 1}>\n            <Pagination\n               page={page}\n               onPageChange={setPage}\n               onLimitChange={setLimit}\n               {..._.omit(query.data, ['docs'])}\n               isLimitDisabled={query.isLoading || deleteMutation.isLoading}\n            />\n         </When>\n      </>\n   );\n};\nconst mapStateToProps = ({ auth }) => ({\n   user: auth.user,\n});\n\nconst mapDispatchToProps = {};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Products);\n","/home/muneeb/dev/diamond-tiles-frontend/src/jsx/pages/sale/index.js",["598","599","600","601","602","603","604","605","606","607","608","609","610","611","612","613","614","615","616","617","618","619","620","621","622","623","624","625","626","627","628","629","630","631","632","633"],"import dayjs from 'dayjs';\nimport relativeTime from 'dayjs/plugin/relativeTime';\nimport produce from 'immer';\nimport Button from 'jsx/components/Button';\nimport Pagination from 'jsx/components/Pagination';\nimport SpinnerOverlay from 'jsx/components/SpinnerOverlay';\nimport { del, get, getV2, useAlert, useMutation, useQuery } from 'jsx/helpers';\nimport { userRoles } from 'jsx/helpers/enums';\nimport getSortingIcon from 'jsx/helpers/getSortingIcon';\nimport PageTItle from 'jsx/layouts/PageTitle';\nimport _, { isArray } from 'lodash';\nimport React, { useEffect, useState } from 'react';\nimport { ButtonGroup, Card, Col, OverlayTrigger, Popover, Row, Table } from 'react-bootstrap';\nimport ReactDatePicker from 'react-datepicker';\nimport { AiFillDelete, AiFillEdit, AiFillEye, AiFillPlusCircle, AiOutlineQuestionCircle } from 'react-icons/ai';\nimport { FaSort, FaSortDown, FaSortUp } from 'react-icons/fa';\nimport { Else, If, Then, When } from 'react-if';\nimport { useQueryClient } from 'react-query';\nimport { connect } from 'react-redux';\nimport { useHistory } from 'react-router-dom';\nimport swal from 'sweetalert';\nimport ClearSale from './ClearSale';\nimport RefundSale from './RefundSale';\nimport ManageSales from './MangeSales';\n\nconst Sale = (props) => {\n   const history = useHistory();\n\n   const alert = useAlert();\n\n   const [startDate, setStartDate] = useState(new Date());\n   const [endDate, setEndDate] = useState(new Date());\n\n   const handleOnClickAdd = () => {\n      history.push('/sale/add');\n   };\n\n   const alertMarkup = alert.getAlert();\n\n   return (\n      <>\n         <PageTItle activeMenu=\"Sale\" motherMenu=\"Diamond Tiles\" />\n\n         <div className=\"row tw-mb-8\">\n            <div className=\"col-xl-6\">\n               <Button variant=\"primary\" icon={AiFillPlusCircle} onClick={handleOnClickAdd}>\n                  Add New Sale\n               </Button>\n            </div>\n            <div className=\"col-xl-6 tw-flex tw-justify-end tw-items-center\">\n               <ReactDatePicker selected={startDate} onChange={(d) => setStartDate(d)} dateFormat=\"dd MMMM yyyy\" />\n               <span className=\"mx-4\">to</span>\n               <ReactDatePicker selected={endDate} onChange={(d) => setEndDate(d)} dateFormat=\"dd MMMM yyyy\" />\n            </div>\n         </div>\n         {alertMarkup ? (\n            <Row>\n               <Col lg={12}>{alertMarkup}</Col>\n            </Row>\n         ) : null}\n         <div className=\"row\">\n            <Col lg={12}>\n               <ManageSales startDate={startDate} endDate={endDate} />\n            </Col>\n         </div>\n      </>\n   );\n};\n\nconst mapStateToProps = ({ auth }) => ({\n   user: auth.user,\n});\n\nconst mapDispatchToProps = {};\nexport default connect(mapStateToProps, mapDispatchToProps)(Sale);\n","/home/muneeb/dev/diamond-tiles-frontend/src/jsx/pages/purchase/index.js",["634","635","636","637","638","639","640","641","642","643","644","645","646","647","648","649","650","651","652","653","654","655","656","657","658","659","660","661","662","663","664","665","666","667","668","669"],"import dayjs from 'dayjs';\nimport relativeTime from 'dayjs/plugin/relativeTime';\nimport produce from 'immer';\nimport Button from 'jsx/components/Button';\nimport Pagination from 'jsx/components/Pagination';\nimport SpinnerOverlay from 'jsx/components/SpinnerOverlay';\nimport { del, get, useAlert, useMutation, useQuery } from 'jsx/helpers';\nimport { userRoles } from 'jsx/helpers/enums';\nimport getQuantity from 'jsx/helpers/getQuantity';\nimport PageTItle from 'jsx/layouts/PageTitle';\nimport _, { isArray } from 'lodash';\nimport React, { useEffect, useState } from 'react';\nimport { ButtonGroup, Card, Col, OverlayTrigger, Popover, Row, Table } from 'react-bootstrap';\nimport { AiFillDelete, AiFillEdit, AiFillEye, AiFillPlusCircle, AiOutlineQuestionCircle } from 'react-icons/ai';\nimport { FaSort, FaSortDown, FaSortUp } from 'react-icons/fa';\nimport { Else, If, Then, When } from 'react-if';\nimport { useQueryClient } from 'react-query';\nimport { connect } from 'react-redux';\nimport { useHistory } from 'react-router-dom';\nimport swal from 'sweetalert';\nimport getSortingIcon from 'jsx/helpers/getSortingIcon';\nimport ReactDatePicker from 'react-datepicker';\nimport ClearPurchase from './ClearPurchase';\nimport RefundPurchase from './RefundPurchase';\nimport ManagePurchase from './ManagePurchase';\n\ndayjs.extend(relativeTime);\n\nconst Purchase = () => {\n   const history = useHistory();\n\n   const handleOnClickAdd = () => {\n      history.push('/purchase/add');\n   };\n\n   const [startDate, setStartDate] = useState(new Date());\n   const [endDate, setEndDate] = useState(new Date());\n\n   return (\n      <>\n         <PageTItle activeMenu=\"purchase\" motherMenu=\"Diamond Tiles\" />\n         <div className=\"row tw-mb-8\">\n            <div className=\"col-xl-6\">\n               <Button variant=\"primary\" icon={AiFillPlusCircle} onClick={handleOnClickAdd}>\n                  Add New Purchase\n               </Button>\n            </div>\n            <div className=\"col-xl-6 tw-flex tw-justify-end tw-items-center\">\n               <ReactDatePicker selected={startDate} onChange={(d) => setStartDate(d)} dateFormat=\"dd MMMM yyyy\" />\n               <span className=\"mx-4\">to</span>\n               <ReactDatePicker selected={endDate} onChange={(d) => setEndDate(d)} dateFormat=\"dd MMMM yyyy\" />\n            </div>\n         </div>\n         <ManagePurchase startDate={startDate} endDate={endDate} />\n      </>\n   );\n};\n\nconst mapStateToProps = ({ auth }) => ({\n   user: auth.user,\n});\n\nconst mapDispatchToProps = {};\nexport default connect(mapStateToProps, mapDispatchToProps)(Purchase);\n","/home/muneeb/dev/diamond-tiles-frontend/src/jsx/pages/suppliers/index.js",["670","671"],"import { useDebounce } from 'ahooks';\nimport dayjs from 'dayjs';\nimport relativeTime from 'dayjs/plugin/relativeTime';\nimport Button from 'jsx/components/Button';\nimport Pagination from 'jsx/components/Pagination';\nimport SpinnerOverlay from 'jsx/components/SpinnerOverlay';\nimport { del, get, useAlert, useMutation, useQuery } from 'jsx/helpers';\nimport { userRoles } from 'jsx/helpers/enums';\nimport PageTItle from 'jsx/layouts/PageTitle';\nimport _ from 'lodash';\nimport React, { useState, useEffect } from 'react';\nimport { ButtonGroup, Card, Col, OverlayTrigger, Popover, Row, Table } from 'react-bootstrap';\nimport { AiFillDelete, AiFillEdit, AiFillEye, AiFillPlusCircle, AiOutlineQuestionCircle } from 'react-icons/ai';\nimport { FaSort, FaSortDown, FaSortUp } from 'react-icons/fa';\nimport { Else, If, Then, When } from 'react-if';\nimport { useQueryClient } from 'react-query';\nimport { batch, connect, useDispatch } from 'react-redux';\nimport { useHistory } from 'react-router-dom';\nimport { setSuppliersData, setSuppliersVisibility } from 'store/actions';\nimport swal from 'sweetalert';\n\ndayjs.extend(relativeTime);\nconst Suppliers = (props) => {\n   const history = useHistory();\n   const [page, setPage] = useState(1);\n   const [limit, setLimit] = useState(5);\n   const [sort, setSort] = useState({ field: null, order: -1 });\n   const [search, setSearch] = useState('');\n   const debouncedSearchValue = useDebounce(search, { wait: 500 });\n\n   const alert = useAlert();\n   const queryClient = useQueryClient();\n\n   const dispatch = useDispatch();\n\n   const query = useQuery(['suppliers', page, limit, sort.field, sort.order, debouncedSearchValue], () =>\n      get('/suppliers', page, limit, sort.field, sort.order, debouncedSearchValue)\n   );\n   const deleteMutation = useMutation((id) => del(`/suppliers/id/${id}`), {\n      onSuccess: async () => {\n         await queryClient.invalidateQueries('suppliers');\n         alert.setAlert({\n            message: 'Supplier deleted successfully',\n            variant: 'success',\n         });\n      },\n      onError: (err) => {\n         alert.setErrorAlert({ message: 'Unable to delete supplier', err });\n      },\n   });\n\n   const handleEdit = (supplier) => {\n      batch(() => {\n         dispatch(setSuppliersData(supplier));\n         dispatch(setSuppliersVisibility(true));\n      });\n   };\n\n   const handleOnClickView = (obj) => {\n      history.push({ pathname: `/suppliers/${obj._id}`, search: `?type=view` });\n   };\n   const handleOnClickAdd = () => {\n      history.push('/suppliers/add');\n   };\n\n   const handleOnClickDelete = (id) => {\n      swal({\n         title: 'Are you sure?',\n         text: 'Once deleted, you will not be able to recover it!',\n         icon: 'warning',\n         buttons: true,\n         dangerMode: true,\n      }).then((willDelete) => {\n         if (willDelete) {\n            deleteMutation.mutate(id);\n         }\n      });\n   };\n\n   const alertMarkup = alert.getAlert();\n   const handleSort = (key) => {\n      setSort((prev) => ({ field: key, order: prev.order * -1 }));\n   };\n\n   useEffect(() => {\n      if (page > query.data?.totalPages) {\n         setPage((prev) => prev - 1);\n      }\n   }, [page, query.data?.totalPages]);\n   return (\n      <>\n         <PageTItle activeMenu=\"Suppliers\" motherMenu=\"Manage\" />\n         <div className=\"row tw-mb-8\">\n            <div className=\"col-xl-6\">\n               <Button variant=\"primary\" icon={AiFillPlusCircle} onClick={handleOnClickAdd}>\n                  Add New Supplier\n               </Button>\n            </div>\n\n            <div className=\"col-xl-6\">\n               <ButtonGroup className=\"tw-float-right\">\n                  <input\n                     type=\"text\"\n                     className=\"input-rounded tw-rounded-r-none tw-pl-6\"\n                     placeholder=\"Search Suppliers...\"\n                     disabled={deleteMutation.isLoading}\n                     onChange={(e) => setSearch(e.target.value)}\n                  />\n                  <Button variant=\"secondary\" className=\"btn btn-secondary tw-pl-6\" loading={query.isLoading}>\n                     Search\n                  </Button>\n               </ButtonGroup>\n            </div>\n         </div>\n         {alertMarkup ? (\n            <Row>\n               <Col lg={12}>{alertMarkup}</Col>\n            </Row>\n         ) : null}\n         <div className=\"row\">\n            <Col lg={12}>\n               <Card>\n                  <When condition={query.isLoading || deleteMutation.isLoading}>\n                     <SpinnerOverlay />\n                  </When>\n                  <Card.Header>\n                     <Card.Title>Manage Suppliers</Card.Title>\n                  </Card.Header>\n                  <Card.Body>\n                     <If condition={query.data?.totalDocs > 0}>\n                        <Then>\n                           <Table className=\"tw-relative\" responsive>\n                              <thead>\n                                 <tr>\n                                    <th className=\"width80\">\n                                       <strong>#</strong>\n                                    </th>\n                                    <th>\n                                       <strong className=\"tw-cursor-pointer\" onClick={() => handleSort('name')}>\n                                          NAME\n                                          <span>\n                                             <When condition={sort.field !== 'name'}>\n                                                <FaSort className=\"d-inline mx-1\" />\n                                             </When>\n                                             <When condition={sort.field === 'name' && sort.order === -1}>\n                                                <FaSortDown className=\"d-inline mx-1\" />\n                                             </When>\n                                             <When condition={sort.field === 'name' && sort.order === 1}>\n                                                <FaSortUp className=\"d-inline mx-1\" />\n                                             </When>\n                                          </span>\n                                       </strong>\n                                    </th>\n                                    <th>\n                                       <strong className=\"tw-cursor-pointer\" onClick={() => handleSort('phone')}>\n                                          PHONE\n                                          <span>\n                                             <When condition={sort.field !== 'phone'}>\n                                                <FaSort className=\"d-inline mx-1\" />\n                                             </When>\n                                             <When condition={sort.field === 'phone' && sort.order === -1}>\n                                                <FaSortDown className=\"d-inline mx-1\" />\n                                             </When>\n                                             <When condition={sort.field === 'phone' && sort.order === 1}>\n                                                <FaSortUp className=\"d-inline mx-1\" />\n                                             </When>\n                                          </span>\n                                       </strong>\n                                    </th>\n                                    <th>\n                                       <strong className=\"tw-cursor-pointer\" onClick={() => handleSort('company')}>\n                                          COMPANY\n                                          <span>\n                                             <When condition={sort.field !== 'company'}>\n                                                <FaSort className=\"d-inline mx-1\" />\n                                             </When>\n                                             <When condition={sort.field === 'company' && sort.order === -1}>\n                                                <FaSortDown className=\"d-inline mx-1\" />\n                                             </When>\n                                             <When condition={sort.field === 'company' && sort.order === 1}>\n                                                <FaSortUp className=\"d-inline mx-1\" />\n                                             </When>\n                                          </span>\n                                       </strong>\n                                    </th>\n                                 </tr>\n                              </thead>\n                              <tbody>\n                                 {query.data?.docs.map((e, index) => (\n                                    <tr key={`${e._id}`}>\n                                       <td>\n                                          <strong>{query.data.pagingCounter + index}</strong>\n                                       </td>\n                                       <td>{e.name}</td>\n                                       <td>{e.phone}</td>\n                                       <td>{e.company}</td>\n                                       <td>\n                                          <OverlayTrigger\n                                             trigger={['hover', 'hover']}\n                                             placement=\"top\"\n                                             overlay={\n                                                <Popover className=\"tw-border-gray-500\">\n                                                   <Popover.Content>{`Created by ${e.createdBy ?? 'N/A'} ${\n                                                      dayjs(e.createdAt).diff(dayjs(), 'day', true) > 7\n                                                         ? `at ${dayjs(e.createdAt).format('DD-MMM-YYYY')}`\n                                                         : dayjs(e.createdAt).fromNow()\n                                                   }.`}</Popover.Content>\n                                                </Popover>\n                                             }\n                                          >\n                                             <AiOutlineQuestionCircle className=\"tw-cursor-pointer\" />\n                                          </OverlayTrigger>\n                                       </td>\n                                       <When condition={props.user?.role !== userRoles.CASHIER}>\n                                          <td>\n                                             <ButtonGroup>\n                                                <Button\n                                                   variant=\"light\"\n                                                   size=\"sm\"\n                                                   icon={AiFillEdit}\n                                                   onClick={() => handleEdit(e)}\n                                                >\n                                                   Edit\n                                                </Button>\n                                                <Button\n                                                   variant=\"danger\"\n                                                   size=\"sm\"\n                                                   icon={AiFillDelete}\n                                                   onClick={() => handleOnClickDelete(e._id)}\n                                                >\n                                                   Delete\n                                                </Button>\n                                             </ButtonGroup>\n                                          </td>\n                                       </When>\n                                    </tr>\n                                 ))}\n                              </tbody>\n                           </Table>\n                        </Then>\n                        <Else>\n                           <When condition={!query.isLoading && !debouncedSearchValue}>\n                              <p className=\"tw-m-0\">No suppliers created</p>\n                           </When>\n                           <When condition={!query.isLoading && debouncedSearchValue}>\n                              <p className=\"tw-m-0\">No result found!</p>\n                           </When>\n                        </Else>\n                     </If>\n                  </Card.Body>\n               </Card>\n            </Col>\n         </div>\n         <When condition={limit > 5 ? true : query.data?.totalPages > 1}>\n            <Pagination\n               page={page}\n               onPageChange={setPage}\n               onLimitChange={setLimit}\n               {..._.omit(query.data, ['docs'])}\n               isLimitDisabled={query.isLoading || deleteMutation.isLoading}\n            />\n         </When>\n      </>\n   );\n};\nconst mapStateToProps = ({ auth }) => ({\n   user: auth.user,\n});\n\nconst mapDispatchToProps = {};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Suppliers);\n","/home/muneeb/dev/diamond-tiles-frontend/src/store/auth/actions.js",[],"/home/muneeb/dev/diamond-tiles-frontend/src/jsx/components/CreatableSelect.js",["672","673"],"import Creatable from 'react-select/creatable';\n\nconst selectStyles = {\n   control: (provided, state) => {\n      provided.borderColor = state.menuIsOpen ? '#44bdec' : 'hsl(0, 0%, 80%)';\n      provided.boxShadow = state.menuIsOpen ? '0 0 0 1px #44bdec' : '';\n      provided['&:hover'] = { borderColor: '#44bdec' };\n      provided.justifyContent = 'center';\n      provided.paddingTop = '0.2rem';\n      provided.paddingBottom = '0.2rem';\n\n      return provided;\n   },\n   valueContainer: (provided, state) => {\n      provided.justifyContent = 'center';\n      return provided;\n   },\n   menu: (provided, state) => {\n      provided.textAlign = 'center';\n      return provided;\n   },\n   option: (provided, state) => {\n      provided.backgroundColor = state.isSelected || state.isFocused ? '#44bdec' : 'transparent';\n\n      if (state.isFocused) provided.color = 'white';\n      return provided;\n   },\n};\n\nconst Select = ({ className = '', ...props }) => (\n   <Creatable menuPlacement=\"auto\" className={`tw-w-[auto] ${className}`} styles={selectStyles} {...props} />\n);\n\nexport default Select;\n","/home/muneeb/dev/diamond-tiles-frontend/src/jsx/components/Select.js",["674","675","676"],"import ReactSelect from 'react-select';\n\nconst selectStyles = (height) => ({\n   control: (provided, state) => {\n      provided.borderColor = state.menuIsOpen ? '#44bdec' : 'hsl(0, 0%, 80%)';\n      provided.boxShadow = state.menuIsOpen ? '0 0 0 1px #44bdec' : '';\n      provided['&:hover'] = { borderColor: '#44bdec' };\n      provided.justifyContent = 'center';\n      provided.paddingTop = '0.2rem';\n      provided.paddingBottom = '0.2rem';\n      provided.height = height;\n\n      console.log(provided);\n\n      return provided;\n   },\n   valueContainer: (provided, state) => {\n      provided.justifyContent = 'center';\n\n      return provided;\n   },\n   menu: (provided, state) => {\n      provided.textAlign = 'center';\n      return provided;\n   },\n   option: (provided, state) => {\n      provided.backgroundColor = state.isSelected || state.isFocused ? '#44bdec' : 'transparent';\n\n      if (state.isFocused) provided.color = 'white';\n      return provided;\n   },\n});\n\nconst Select = ({ width = 'tw-w-[100px]', className = '', height = '36px', ...props }) => (\n   <ReactSelect\n      menuPlacement=\"auto\"\n      className={`${width} ${className}`}\n      styles={() => selectStyles(height)}\n      {...props}\n   />\n);\n\nexport default Select;\n","/home/muneeb/dev/diamond-tiles-frontend/src/jsx/components/Button.js",[],"/home/muneeb/dev/diamond-tiles-frontend/src/jsx/components/Pagination.js",["677","678"],"import cls from 'classnames';\nimport { useState } from 'react';\nimport { AiOutlineDoubleLeft, AiOutlineDoubleRight, AiOutlineLeft, AiOutlineRight } from 'react-icons/ai';\nimport Select from './Select';\n\nconst getOption = (v) => ({ value: v, label: v });\nconst options = [getOption(5), getOption(10), getOption(25)];\n\nconst PaginationItem = ({\n   children,\n   className = '',\n   disabled,\n   first = false,\n   last = false,\n   active = false,\n   ...props\n}) => (\n   <li\n      {...props}\n      className={cls(\n         'tw-transition-all tw-cursor-pointer tw-flex tw-items-center tw-text-[#7E7E7E] tw-px-[12px] tw-py-[6px] tw-bg-white tw-border tw-border-solid',\n         className,\n         { 'tw-border-[#44bdec] tw-bg-[#44bdec] tw-text-white': active },\n         { 'tw-cursor-not-allowed': disabled },\n         { 'hover:tw-border-[#44bdec] hover:tw-bg-[#44bdec] hover:tw-text-white': !disabled },\n         { 'tw-rounded-l-md': first },\n         { 'tw-rounded-r-md': last }\n      )}\n   >\n      {children}\n   </li>\n);\n\nconst FirstPage = (props) => (\n   <PaginationItem first {...props}>\n      <AiOutlineDoubleLeft />\n   </PaginationItem>\n);\n\nconst PrevPage = (props) => (\n   <PaginationItem {...props}>\n      <AiOutlineLeft />\n   </PaginationItem>\n);\n\nconst EllipsisPage = (props) => (\n   <PaginationItem disabled {...props}>\n      ...\n   </PaginationItem>\n);\n\nconst NextPage = (props) => (\n   <PaginationItem {...props}>\n      <AiOutlineRight />\n   </PaginationItem>\n);\n\nconst LastPage = (props) => (\n   <PaginationItem last {...props}>\n      <AiOutlineDoubleRight />\n   </PaginationItem>\n);\n\nconst Page = ({ children, ...props }) => <PaginationItem {...props}>{children}</PaginationItem>;\n\nconst Pagination = ({\n   isLimitDisabled,\n   page,\n   onPageChange,\n   onLimitChange,\n   totalPages,\n   hasNextPage,\n   hasPrevPage,\n   totalDocs,\n}) => {\n   const [option, setOption] = useState(getOption(5));\n\n   const renderPagination = () => {\n      const pages = [];\n\n      const handleFirstPage = () => {\n         if (page > 1) onPageChange(1);\n      };\n\n      const handlePrevPage = () => {\n         if (page > 1) onPageChange((prev) => prev - 1);\n      };\n\n      const handleNextPage = () => {\n         if (page < totalPages) onPageChange((prev) => prev + 1);\n      };\n\n      const handleLastPage = () => {\n         if (page < totalPages) onPageChange(totalPages);\n      };\n\n      pages.push(<FirstPage disabled={page === 1} onClick={handleFirstPage} />);\n      pages.push(<PrevPage disabled={page === 1} onClick={handlePrevPage} />);\n\n      for (let currPage = 0; currPage < totalPages; currPage++) {\n         pages.push(\n            <Page active={page === currPage + 1} onClick={() => onPageChange(currPage + 1)}>\n               {currPage + 1}\n            </Page>\n         );\n      }\n\n      pages.push(<NextPage disabled={!hasNextPage} onClick={handleNextPage} />);\n      pages.push(<LastPage disabled={!hasNextPage} onClick={handleLastPage} />);\n\n      return pages;\n   };\n\n   return (\n      <div className=\"tw-flex tw-flex-col tw-items-center tw-gap-3 tw-overflow-visible\">\n         <p className=\"tw-m-0\">{`Showing ${\n            // eslint-disable-next-line no-nested-ternary\n            totalPages === page ? totalDocs : page * option.value > totalDocs ? totalDocs : page * option.value\n         } of ${totalDocs}`}</p>\n         <ul className=\"tw-flex \">{renderPagination()}</ul>\n         <Select\n            isDisabled={isLimitDisabled}\n            className=\"tw-mb-6\"\n            options={options}\n            placeholder=\"Select Page Size\"\n            value={option}\n            onChange={(opt) => {\n               setOption(opt);\n               onLimitChange(opt.value);\n            }}\n         />\n      </div>\n   );\n};\n\nexport default Pagination;\n","/home/muneeb/dev/diamond-tiles-frontend/src/jsx/components/SpinnerOverlay.js",[],"/home/muneeb/dev/diamond-tiles-frontend/src/jsx/components/ModalWrapper.js",[],"/home/muneeb/dev/diamond-tiles-frontend/src/jsx/layouts/PageTitle.js",[],"/home/muneeb/dev/diamond-tiles-frontend/src/jsx/components/invoice.js",[],["679","680","681","682","683"],"/home/muneeb/dev/diamond-tiles-frontend/src/jsx/layouts/Footer.js",[],"/home/muneeb/dev/diamond-tiles-frontend/src/jsx/helpers/index.js",[],"/home/muneeb/dev/diamond-tiles-frontend/src/jsx/pages/salaries/index.js",["684","685","686","687","688"],"import dayjs from 'dayjs';\nimport Button from 'jsx/components/Button';\nimport Pagination from 'jsx/components/Pagination';\nimport SpinnerOverlay from 'jsx/components/SpinnerOverlay';\nimport { del, get, useAlert, useQuery } from 'jsx/helpers';\nimport getSortingIcon from 'jsx/helpers/getSortingIcon';\nimport _ from 'lodash';\nimport React, { useEffect, useState } from 'react';\nimport { ButtonGroup, Card, OverlayTrigger, Table, Popover } from 'react-bootstrap';\nimport { AiFillDelete, AiFillPlusCircle, AiOutlineQuestionCircle } from 'react-icons/ai';\nimport { FaSort, FaSortDown, FaSortUp } from 'react-icons/fa';\nimport { Else, If, Then, When } from 'react-if';\nimport { useMutation, useQueryClient } from 'react-query';\nimport { useDispatch } from 'react-redux';\nimport { setSalariesVisibility } from 'store/actions';\nimport swal from 'sweetalert';\n\nconst Salaries = () => {\n   const [page, setPage] = useState(1);\n   const [limit, setLimit] = useState(5);\n   const [sort, setSort] = useState({ field: null, order: -1 });\n\n   const queryClient = useQueryClient();\n\n   const alert = useAlert();\n\n   const dispatch = useDispatch();\n\n   const query = useQuery(['salaries', page, limit, sort.field, sort.order], () =>\n      get('/salaries', page, limit, sort.field, sort.order)\n   );\n\n   const handleSort = (key) => {\n      setSort((prev) => ({ field: key, order: prev.order * -1 }));\n   };\n   useEffect(() => {\n      if (page > query.data?.totalPages) {\n         setPage((prev) => prev - 1);\n      }\n   }, [page, query.data?.totalPages]);\n\n   const deleteMutation = useMutation((id) => del(`/salaries/id/${id}`), {\n      onSuccess: async () => {\n         console.log('updating');\n         await queryClient.invalidateQueries('salaries');\n         console.log('updated');\n         alert.setAlert({\n            message: 'Salary deleted successfully',\n            variant: 'success',\n         });\n      },\n      onError: (err) => {\n         alert.setErrorAlert({ message: 'Unable to delete salary', err });\n      },\n   });\n   const handleOnClickDelete = (id) => {\n      swal({\n         title: 'Are you sure?',\n         text: 'Once deleted, you will not be able to recover it!',\n         icon: 'warning',\n         buttons: true,\n         dangerMode: true,\n      }).then((willDelete) => {\n         if (willDelete) {\n            deleteMutation.mutate(id);\n         }\n      });\n   };\n\n   return (\n      <>\n         <Card className=\"h-100\">\n            <When condition={query.isLoading || deleteMutation.isLoading}>\n               <SpinnerOverlay />\n            </When>\n            <Card.Header>\n               <Card.Title>Salaries</Card.Title>\n               <ButtonGroup className=\"tw-float-right\">\n                  <input\n                     type=\"text\"\n                     className=\"input-rounded tw-rounded-r-none tw-pl-6 tw-shadow-inner tw-ring-1 \"\n                     placeholder=\"Search Salaries by Employee...\"\n                     // disabled={deleteMutation.isLoading}\n                     // onChange={(e) => setSearch(e.target.value)}\n                  />\n                  <Button\n                     size=\"sm\"\n                     variant=\"primary\"\n                     icon={AiFillPlusCircle}\n                     onClick={() => dispatch(setSalariesVisibility(true))}\n                  >\n                     Add New Salary\n                  </Button>\n               </ButtonGroup>\n            </Card.Header>\n            <Card.Body>\n               <If condition={query.data?.totalDocs > 0}>\n                  <Then>\n                     <Table className=\"tw-relative\" responsive>\n                        <thead>\n                           <tr>\n                              <th className=\"width80\">\n                                 <strong>#</strong>\n                              </th>\n                              <th>{getSortingIcon({ label: 'Employee' })}</th>\n                              <th>{getSortingIcon({ label: 'Salary', key: 'amount', onSort: handleSort, sort })}</th>\n                              <th>{getSortingIcon({ label: 'Date', key: 'createdAt', onSort: handleSort, sort })}</th>\n                           </tr>\n                        </thead>\n                        <tbody>\n                           {query.data?.docs.map((e, index) => (\n                              <tr key={`${e._id}`}>\n                                 <td>\n                                    <strong>{query.data.pagingCounter + index}</strong>\n                                 </td>\n                                 <td>{e.employee.name}</td>\n                                 <td>\n                                    {new Intl.NumberFormat('en-IN', {\n                                       maximumSignificantDigits: 3,\n                                    }).format(e.amount)}{' '}\n                                    PKR\n                                 </td>\n                                 <td>{dayjs(e.createdAt).format('dddd[,] DD MMMM YYYY')}</td>\n                                 <td>\n                                    <div className=\"tw-flex tw-items-center tw-gap-4\">\n                                       <OverlayTrigger\n                                          trigger={['hover', 'hover']}\n                                          placement=\"top\"\n                                          overlay={\n                                             <Popover className=\"tw-border-gray-500\">\n                                                <Popover.Content>\n                                                   {dayjs(e.createdAt).format('dddd[,] DD MMMM YYYY')}\n                                                </Popover.Content>\n                                             </Popover>\n                                          }\n                                       >\n                                          <AiOutlineQuestionCircle className=\"tw-cursor-pointer\" />\n                                       </OverlayTrigger>\n                                       <Button\n                                          variant=\"danger\"\n                                          size=\"sm\"\n                                          icon={AiFillDelete}\n                                          onClick={() => handleOnClickDelete(e._id)}\n                                       >\n                                          Delete\n                                       </Button>\n                                    </div>\n                                 </td>\n                              </tr>\n                           ))}\n                        </tbody>\n                     </Table>\n                  </Then>\n                  <Else>\n                     <When condition={!query.isLoading}>\n                        <p className=\"tw-m-0\">No salaries found</p>\n                     </When>\n                  </Else>\n               </If>\n            </Card.Body>\n         </Card>\n         <When condition={limit > 5 ? true : query.data?.totalPages > 1}>\n            <Pagination\n               page={page}\n               onPageChange={setPage}\n               onLimitChange={setLimit}\n               {..._.omit(query.data, ['docs'])}\n               isLimitDisabled={query.isLoading}\n            />\n         </When>\n      </>\n   );\n};\n\nexport default React.memo(Salaries);\n","/home/muneeb/dev/diamond-tiles-frontend/src/jsx/pages/units/index.js",["689","690","691","692","693","694","695","696","697","698","699","700","701","702","703","704","705","706","707","708","709"],"import useUrlState from '@ahooksjs/use-url-state';\nimport dayjs from 'dayjs';\nimport relativeTime from 'dayjs/plugin/relativeTime';\nimport Button from 'jsx/components/Button';\nimport ModalWrapper from 'jsx/components/ModalWrapper';\nimport SpinnerOverlay from 'jsx/components/SpinnerOverlay';\nimport { del, get, post, useAlert, useMutation, useQuery } from 'jsx/helpers';\nimport PageTItle from 'jsx/layouts/PageTitle';\nimport React, { useEffect, useMemo, useState } from 'react';\nimport { ButtonGroup, Card, Col, OverlayTrigger, Popover, Row, Table } from 'react-bootstrap';\nimport { AiFillDelete, AiFillPlusCircle, AiOutlineQuestionCircle, AiFillEye } from 'react-icons/ai';\nimport { Else, If, Then, When } from 'react-if';\nimport { useQueryClient } from 'react-query';\nimport swal from 'sweetalert';\nimport { useHistory } from 'react-router-dom';\nimport { useFormik } from 'formik';\nimport { connect, useDispatch } from 'react-redux';\nimport { userRoles } from 'jsx/helpers/enums';\nimport { setUnitsData, setUnitsVisibility } from 'store/actions';\nimport CreatableSelect from '../../components/CreatableSelect';\n\nconst Units = (props) => {\n   const history = useHistory();\n   dayjs.extend(relativeTime);\n   const [page, setPage] = useState(1);\n   const [limit, setLimit] = useState(5);\n   const [urlState, setUrlState] = useUrlState({});\n   const [search, setSearch] = useState('');\n\n   const [showModal, setShowModal] = useState(false);\n   const [selectedRow, setSelectedRow] = useState(null);\n\n   const alert = useAlert();\n\n   const queryClient = useQueryClient();\n\n   const dispatch = useDispatch();\n\n   const query = useQuery(['units', page, limit, search], () => get('/units', page, limit, '', '', search));\n   const getTypes = useQuery('types', () => get('/types'));\n   const deleteMutation = useMutation((id) => del(`/units/id/${id}`), {\n      onSuccess: async () => {\n         await queryClient.invalidateQueries('units');\n         alert.setAlert({\n            message: 'Unit deleted successfully',\n            variant: 'success',\n         });\n      },\n      onError: (err) => {\n         alert.setErrorAlert({ message: 'Unable to delete Unit', err });\n      },\n   });\n\n   const postMutation = useMutation((payload) => post('/units', payload), {\n      onSuccess: () => {\n         setShowModal(false);\n         setUrlState({});\n         query.refetch();\n      },\n      onError: (err) => {\n         alert.setErrorAlert({ message: 'Unable to add unit', err });\n      },\n   });\n   const postTypeMutation = useMutation((payload) => post('/types', payload), {\n      onSuccess: async () => {\n         await queryClient.invalidateQueries('types');\n      },\n   });\n\n   const isAdd = useMemo(() => urlState?.action === 'add', [urlState.action]);\n   const mutation = useMemo(() => postMutation, [postMutation]);\n\n   const handleOnClickAdd = () => {\n      dispatch(setUnitsVisibility(true));\n      dispatch(setUnitsData({}));\n      // setUrlState({ action: 'add' });\n   };\n\n   const handleOnClickDelete = (id) => {\n      swal({\n         title: 'Are you sure?',\n         text: 'Once deleted, you will not be able to recover it!',\n         icon: 'warning',\n         buttons: true,\n         dangerMode: true,\n      }).then((willDelete) => {\n         if (willDelete) {\n            deleteMutation.mutate(id);\n         }\n      });\n   };\n\n   const alertMarkup = alert.getAlert();\n\n   return (\n      <>\n         {alertMarkup ? (\n            <Row>\n               <Col lg={12}>{alertMarkup}</Col>\n            </Row>\n         ) : null}\n         <Card className=\"h-100\">\n            <When condition={query.isLoading || deleteMutation.isLoading}>\n               <SpinnerOverlay />\n            </When>\n            <Card.Header>\n               <Card.Title>Manage units</Card.Title>\n               <Button size=\"sm\" variant=\"primary\" icon={AiFillPlusCircle} onClick={handleOnClickAdd}>\n                  Add New Unit\n               </Button>\n            </Card.Header>\n            <Card.Body>\n               <If condition={query.data?.length > 0}>\n                  <Then>\n                     <Table className=\"tw-relative\" responsive>\n                        <thead>\n                           <tr>\n                              <th className=\"width80\">\n                                 <strong>#</strong>\n                              </th>\n                              <th>\n                                 <strong className=\"tw-cursor-pointer\">Title</strong>\n                              </th>\n                              <th>\n                                 <strong className=\"tw-cursor-pointer\">Value</strong>\n                              </th>\n                              <th>\n                                 <strong className=\"tw-cursor-pointer\">Type</strong>\n                              </th>\n                           </tr>\n                        </thead>\n                        <tbody>\n                           {query.data?.map((e, index) => (\n                              <tr key={`${e._id}`}>\n                                 <td>\n                                    <strong>{index + 1}</strong>\n                                 </td>\n                                 <td>{e.title}</td>\n                                 <td>{e.value}</td>\n                                 <td>{e.type.title}</td>\n\n                                 <When condition={props.user?.role !== userRoles.CASHIER}>\n                                    <td>\n                                       <Button\n                                          variant=\"danger\"\n                                          size=\"sm\"\n                                          icon={AiFillDelete}\n                                          onClick={() => handleOnClickDelete(e._id)}\n                                       >\n                                          Delete\n                                       </Button>\n                                    </td>\n                                 </When>\n                              </tr>\n                           ))}\n                        </tbody>\n                     </Table>\n                  </Then>\n                  <Else>\n                     <When condition={!query.isLoading}>\n                        <p className=\"tw-m-0\">No units created</p>\n                     </When>\n                  </Else>\n               </If>\n            </Card.Body>\n         </Card>\n      </>\n   );\n};\nconst mapStateToProps = ({ auth }) => ({\n   user: auth.user,\n});\n\nconst mapDispatchToProps = {};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(React.memo(Units));\n","/home/muneeb/dev/diamond-tiles-frontend/src/jsx/pages/types/index.js",["710","711","712","713","714","715","716","717","718","719","720","721","722","723"],"import useUrlState from '@ahooksjs/use-url-state';\nimport dayjs from 'dayjs';\nimport relativeTime from 'dayjs/plugin/relativeTime';\nimport Button from 'jsx/components/Button';\nimport ModalWrapper from 'jsx/components/ModalWrapper';\nimport SpinnerOverlay from 'jsx/components/SpinnerOverlay';\nimport { del, get, post, useAlert, useMutation, useQuery } from 'jsx/helpers';\nimport React, { useMemo, useState } from 'react';\nimport { ButtonGroup, Card, Col, OverlayTrigger, Popover, Row, Table } from 'react-bootstrap';\nimport { AiFillDelete, AiFillEye, AiFillPlusCircle, AiOutlineQuestionCircle } from 'react-icons/ai';\nimport { Else, If, Then, When } from 'react-if';\nimport { useQueryClient } from 'react-query';\nimport { useHistory } from 'react-router-dom';\nimport swal from 'sweetalert';\nimport { connect, useDispatch } from 'react-redux';\nimport { userRoles } from 'jsx/helpers/enums';\nimport { setTypesData, setTypesVisibility } from 'store/actions';\n\nconst Types = (props) => {\n   const history = useHistory();\n   dayjs.extend(relativeTime);\n   const [urlState, setUrlState] = useUrlState({});\n\n   const [page, setPage] = useState(1);\n   const [limit, setLimit] = useState(5);\n   const [search, setSearch] = useState('');\n   const [showModal, setShowModal] = useState(false);\n   const [title, setTitle] = useState('');\n\n   const alert = useAlert();\n   const queryClient = useQueryClient();\n\n   const dispatch = useDispatch();\n\n   const query = useQuery('types', () => get('/types', page, limit, '', '', search));\n   const postMutation = useMutation((payload) => post('/types', payload), {\n      onSuccess: async () => {\n         await queryClient.invalidateQueries('units');\n         if (urlState.redirect) {\n            history.replace(urlState.redirect);\n         }\n         setShowModal(false);\n         query.refetch();\n      },\n      onError: (err) => {\n         alert.setErrorAlert({ message: 'Unable to add unit', err });\n      },\n   });\n   const deleteMutation = useMutation((id) => del(`/types/id/${id}`), {\n      onSuccess: async () => {\n         await queryClient.invalidateQueries('types');\n         alert.setAlert({\n            message: 'Type deleted successfully',\n            variant: 'success',\n         });\n      },\n      onError: (err) => {\n         alert.setErrorAlert({ message: 'Unable to delete Type', err });\n      },\n   });\n\n   const mutation = useMemo(() => postMutation, [postMutation]);\n\n   const handleOnClickAdd = () => {\n      // setUrlState({ action: 'add' });\n      dispatch(setTypesVisibility(true));\n      dispatch(setTypesData({}));\n   };\n\n   const handleOnClickDelete = (id) => {\n      swal({\n         title: 'Are you sure?',\n         text: 'Once deleted, you will not be able to recover it!',\n         icon: 'warning',\n         buttons: true,\n         dangerMode: true,\n      }).then((willDelete) => {\n         if (willDelete) {\n            deleteMutation.mutate(id);\n         }\n      });\n   };\n   const handleOnClickView = (id) => {\n      history.push(`/products/types/${id}`);\n   };\n\n   const handleSubmit = (e) => {\n      e.preventDefault();\n      mutation.mutate({ title });\n   };\n   const alertMarkup = alert.getAlert();\n\n   return (\n      <>\n         {alertMarkup ? (\n            <Row>\n               <Col lg={12}>{alertMarkup}</Col>\n            </Row>\n         ) : null}\n         <Card className=\"h-100\">\n            <When condition={query.isLoading || deleteMutation.isLoading}>\n               <SpinnerOverlay />\n            </When>\n            <Card.Header>\n               <Card.Title>Manage types</Card.Title>\n               <Button size=\"sm\" variant=\"primary\" icon={AiFillPlusCircle} onClick={handleOnClickAdd}>\n                  Add New Type\n               </Button>\n            </Card.Header>\n            <Card.Body>\n               <If condition={query.data?.length > 0}>\n                  <Then>\n                     <Table className=\"tw-relative\" responsive>\n                        <thead>\n                           <tr>\n                              <th className=\"width80\">\n                                 <strong>#</strong>\n                              </th>\n                              <th>\n                                 <strong>TITLE</strong>\n                              </th>\n                           </tr>\n                        </thead>\n                        <tbody>\n                           {query.data?.map((e, index) => (\n                              <tr key={`${e._id}`}>\n                                 <td>\n                                    <strong>{index + 1}</strong>\n                                 </td>\n                                 <td>{e.title}</td>\n                                 <When condition={props.user?.role !== userRoles.CASHIER}>\n                                    <td>\n                                       <Button\n                                          variant=\"danger\"\n                                          size=\"sm\"\n                                          icon={AiFillDelete}\n                                          onClick={() => handleOnClickDelete(e._id)}\n                                       >\n                                          Delete\n                                       </Button>\n                                    </td>\n                                 </When>\n                              </tr>\n                           ))}\n                        </tbody>\n                     </Table>\n                  </Then>\n                  <Else>\n                     <When condition={!query.isLoading}>\n                        <p className=\"tw-m-0\">No types created</p>\n                     </When>\n                  </Else>\n               </If>\n            </Card.Body>\n         </Card>\n      </>\n   );\n};\n\nconst mapStateToProps = ({ auth }) => ({\n   user: auth.user,\n});\n\nconst mapDispatchToProps = {};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(React.memo(Types));\n","/home/muneeb/dev/diamond-tiles-frontend/src/jsx/layouts/nav/index.js",["724"],"import React, { Fragment, useState } from 'react';\nimport SideBar from './SideBar';\nimport NavHader from './NavHader';\nimport Header from './Header';\nimport ChatBox from '../ChatBox';\n\nconst JobieNav = ({ title }) => {\n   const [toggle, setToggle] = useState('');\n   const onClick = (name) => setToggle(toggle === name ? '' : name);\n   return (\n      <>\n         <NavHader />\n         <SideBar />\n         <Header\n            onNote={() => onClick('chatbox')}\n            onNotification={() => onClick('notification')}\n            onProfile={() => onClick('profile')}\n            toggle={toggle}\n            title={title}\n            onBox={() => onClick('box')}\n         />\n         {/* <ChatBox onClick={() => onClick('chatbox')} toggle={toggle} /> */}\n      </>\n   );\n};\n\nexport default JobieNav;\n","/home/muneeb/dev/diamond-tiles-frontend/src/jsx/pages/expenseTypes/index.js",["725","726"],"import dayjs from 'dayjs';\nimport relativeTime from 'dayjs/plugin/relativeTime';\nimport { useFormik } from 'formik';\nimport Button from 'jsx/components/Button';\nimport ModalWrapper from 'jsx/components/ModalWrapper';\nimport SpinnerOverlay from 'jsx/components/SpinnerOverlay';\nimport { del, get, post, useAlert, useMutation, useQuery } from 'jsx/helpers';\nimport { userRoles } from 'jsx/helpers/enums';\nimport React, { useState } from 'react';\nimport { ButtonGroup, Card, Col, OverlayTrigger, Popover, Row, Table } from 'react-bootstrap';\nimport { AiFillDelete, AiFillPlusCircle, AiOutlineQuestionCircle } from 'react-icons/ai';\nimport { FaSort, FaSortDown, FaSortUp } from 'react-icons/fa';\nimport { Else, If, Then, When } from 'react-if';\nimport { useQueryClient } from 'react-query';\nimport { connect } from 'react-redux';\nimport swal from 'sweetalert';\n\nconst ExpenseTypes = (props) => {\n   dayjs.extend(relativeTime);\n   const [page, setPage] = useState(1);\n   const [limit, setLimit] = useState(5);\n   const [sort, setSort] = useState({ field: null, order: -1 });\n\n   const [showModal, setShowModal] = useState(false);\n\n   const alert = useAlert();\n\n   const queryClient = useQueryClient();\n\n   const query = useQuery(['expenses/types', page, limit, sort.field, sort.order], () =>\n      get('/expenses/types', page, limit, sort.field, sort.order)\n   );\n   const deleteMutation = useMutation((id) => del(`/expenses/types/id/${id}`), {\n      onSuccess: async () => {\n         await queryClient.invalidateQueries('expenses/types');\n         alert.setAlert({\n            message: 'Expense type deleted successfully.',\n            variant: 'success',\n         });\n      },\n      onError: (err) => {\n         alert.setErrorAlert({ message: 'Unable to delete Expense type.', err });\n      },\n   });\n\n   const postMutation = useMutation((payload) => post('/expenses/types', payload), {\n      onSuccess: () => {\n         setShowModal(false);\n         query.refetch();\n      },\n      onError: (err) => {\n         alert.setErrorAlert({ message: 'Unable to add Expense type.', err });\n      },\n   });\n\n   const formik = useFormik({\n      initialValues: {\n         title: '',\n      },\n      validateOnChange: false,\n      validateOnBlur: false,\n      onSubmit: (values) => {\n         postMutation.mutate(values);\n      },\n   });\n\n   const handleOnClickAdd = () => {\n      setShowModal(true);\n      formik.setFieldValue('title', '');\n   };\n\n   const handleOnClickDelete = (id) => {\n      swal({\n         title: 'Are you sure?',\n         text: 'Once deleted, you will not be able to recover it!',\n         icon: 'warning',\n         buttons: true,\n         dangerMode: true,\n      }).then((willDelete) => {\n         if (willDelete) {\n            deleteMutation.mutate(id);\n         }\n      });\n   };\n\n   const handleSort = (key) => {\n      setSort((prev) => ({ field: key, order: prev.order * -1 }));\n   };\n   const alertMarkup = alert.getAlert();\n\n   return (\n      <>\n         {alertMarkup ? (\n            <Row>\n               <Col lg={12}>{alertMarkup}</Col>\n            </Row>\n         ) : null}\n         <Card className=\"h-100\">\n            <When condition={query.isLoading || deleteMutation.isLoading}>\n               <SpinnerOverlay />\n            </When>\n            <Card.Header>\n               <Card.Title>Manage Types</Card.Title>\n               <Button size=\"sm\" variant=\"primary\" icon={AiFillPlusCircle} onClick={handleOnClickAdd}>\n                  Add New Expense Type\n               </Button>\n            </Card.Header>\n            <Card.Body>\n               <If condition={query.data?.length > 0}>\n                  <Then>\n                     <Table className=\"tw-relative\" responsive>\n                        <thead>\n                           <tr>\n                              <th className=\"width80\">\n                                 <strong>#</strong>\n                              </th>\n                              <th className=\"tw-cursor-pointer\" onClick={() => handleSort('title')}>\n                                 <strong className=\"tw-cursor-pointer\">\n                                    TITLE\n                                    <span>\n                                       <When condition={sort.field !== 'title'}>\n                                          <FaSort className=\"d-inline mx-1\" />\n                                       </When>\n                                       <When condition={sort.field === 'title' && sort.order === -1}>\n                                          <FaSortDown className=\"d-inline mx-1\" />\n                                       </When>\n                                       <When condition={sort.field === 'title' && sort.order === 1}>\n                                          <FaSortUp className=\"d-inline mx-1\" />\n                                       </When>\n                                    </span>\n                                 </strong>\n                              </th>\n                           </tr>\n                        </thead>\n                        <tbody>\n                           {query.data?.map((e, index) => (\n                              <tr key={`${e._id}`}>\n                                 <td>\n                                    <strong>{index + 1}</strong>\n                                 </td>\n                                 <td>{e.title}</td>\n                                 <td>\n                                    <OverlayTrigger\n                                       trigger={['hover', 'hover']}\n                                       placement=\"top\"\n                                       overlay={\n                                          <Popover className=\"tw-border-gray-500\">\n                                             <Popover.Content>{`Created by ${e.createdBy ?? 'N/A'} ${\n                                                dayjs(e.createdAt).diff(dayjs(), 'day', true) > 7\n                                                   ? `at ${dayjs(e.createdAt).format('DD-MMM-YYYY')}`\n                                                   : dayjs(e.createdAt).fromNow()\n                                             }.`}</Popover.Content>\n                                          </Popover>\n                                       }\n                                    >\n                                       <AiOutlineQuestionCircle className=\"tw-cursor-pointer\" />\n                                    </OverlayTrigger>\n                                 </td>\n                                 <When condition={props.user?.role !== userRoles.CASHIER}>\n                                    <td>\n                                       <ButtonGroup>\n                                          <Button\n                                             variant=\"danger\"\n                                             size=\"sm\"\n                                             icon={AiFillDelete}\n                                             onClick={() => handleOnClickDelete(e._id)}\n                                          />\n                                       </ButtonGroup>\n                                    </td>\n                                 </When>\n                              </tr>\n                           ))}\n                        </tbody>\n                     </Table>\n                  </Then>\n                  <Else>\n                     <When condition={!query.isLoading}>\n                        <p className=\"tw-m-0\">No types found</p>\n                     </When>\n                  </Else>\n               </If>\n            </Card.Body>\n         </Card>\n\n         {/* ADD Modal */}\n         <ModalWrapper\n            show={showModal}\n            onHide={() => {\n               setShowModal(false);\n            }}\n            title=\"Add New Expense Type\"\n            isLoading={query.isLoading || postMutation.isLoading}\n            size=\"md\"\n            onSubmit={formik.handleSubmit}\n            submitButtonText=\"Confirm\"\n         >\n            <form onSubmit={formik.handleSubmit}>\n               <div className=\"row\">\n                  <div className=\"form-group col-xl-6\">\n                     <label className=\"col-form-label\">Title</label>\n                     <input\n                        className=\"form-control\"\n                        onChange={formik.handleChange}\n                        type=\"text\"\n                        name=\"title\"\n                        value={formik.values.title}\n                     />\n                  </div>\n               </div>\n            </form>\n         </ModalWrapper>\n      </>\n   );\n};\n\nconst mapStateToProps = ({ auth }) => ({\n   user: auth.user,\n});\n\nconst mapDispatchToProps = {};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(React.memo(ExpenseTypes));\n","/home/muneeb/dev/diamond-tiles-frontend/src/jsx/helpers/useAlert.js",["727"],"import React, { useCallback, useEffect, useMemo, useRef, useState } from 'react';\nimport { Alert } from 'react-bootstrap';\nimport { When } from 'react-if';\nimport cls from 'classnames';\nimport { getError } from './server';\n\nexport const useAlert = () => {\n   const [isShowing, setIsShowing] = useState(false);\n   const [message, setMessage] = useState('');\n   const [variant, setVariant] = useState('success');\n\n   const callback = useRef(null);\n   const timeout = useRef(null);\n\n   // eslint-disable-next-line arrow-body-style\n   useEffect(() => {\n      return () => {\n         if (timeout.current) clearTimeout(timeout.current);\n      };\n   }, []);\n\n   const resetTimeout = useCallback((duration) => {\n      if (timeout.current) clearTimeout(timeout.current);\n      timeout.current = setTimeout(() => {\n         setIsShowing(false);\n         timeout.current = null;\n         if (callback.current) callback.current();\n      }, duration);\n   }, []);\n\n   const getAlert = useCallback(\n      () =>\n         isShowing ? (\n            <Alert\n               className=\"alert-dismissible fade show\"\n               variant={variant}\n               dismissible\n               onClose={() => setIsShowing(false)}\n            >\n               <p className={cls(`tw-m-0 tw-opacity-60`, { 'tw-text-black': variant === 'success' })}>{message}</p>\n            </Alert>\n         ) : null,\n      [isShowing, message, variant]\n   );\n\n   const setAlert = useCallback(\n      ({ message: msg = '', variant: v = 'success', callback: cb = null, duration: d = 3000 }) => {\n         callback.current = cb;\n         resetTimeout(d);\n         setIsShowing(true);\n         setMessage(msg);\n         setVariant(v);\n      },\n      [resetTimeout]\n   );\n\n   const setErrorAlert = useCallback(\n      ({ message: msg = 'Unable to dispatch action', err, callback: cb = null, duration: d = 6000 }) => {\n         resetTimeout(d);\n         const m = (\n            <>\n               <strong>{msg}</strong>\n               <br />\n               {getError(err).map((e, i, a) => (\n                  <React.Fragment key={`error-${i}`}>\n                     <p className=\"tw-m-0\">{e}</p>\n                     {i < a.length - 2 ? <br /> : null}\n                  </React.Fragment>\n               ))}\n            </>\n         );\n\n         callback.current = cb;\n         setIsShowing(true);\n         setMessage(m);\n         setVariant('danger');\n      },\n      [resetTimeout]\n   );\n\n   const alert = useMemo(() => ({ getAlert, setAlert, setErrorAlert }), [getAlert, setAlert, setErrorAlert]);\n\n   return alert;\n};\n","/home/muneeb/dev/diamond-tiles-frontend/src/jsx/helpers/server.js",["728"],"import axios from 'axios';\nimport { isArray } from 'lodash';\n\nconst baseURL = process.env.REACT_APP_BASE_URL;\n\nif (!baseURL) console.error('Base URL not found in ENV');\n\nexport const api = axios.create({ baseURL });\n\napi.interceptors.request.use(\n   async (config) => {\n      const token = await localStorage.getItem('auth_token');\n      if (token) config.headers.Authorization = `Bearer ${token}`;\n      return config;\n   },\n   (err) => Promise.reject(err)\n);\n\nexport const getError = (err) => {\n   const response = err.response?.data?.data;\n\n   if (!isArray(response)) return [response];\n\n   if (!response) return [err.message];\n\n   return response;\n};\n\nexport const getV2 = (path, params = {}) => api.get(path, { params }).then((res) => res.data);\n\nexport const get = (path, page, limit, field, order, search = '') =>\n   api.get(path, { params: { page, limit, [`sort[${field}]`]: order, search } }).then((res) => res.data);\n\n/**\n * Send a POST request\n * @param {string} path\n * @param {object} payload\n * @returns\n */\nexport const post = (path, payload) =>\n   api.post(path, payload).then((res) =>\n      // eslint-disable-next-line no-nested-ternary\n      res.status === 200 || res.status === 201\n         ? typeof res.data === 'string'\n            ? { msg: res.data, status: 'ok' }\n            : { ...res.data, status: 'ok' }\n         : res.data\n   );\n\n/**\n * Send a PATCH request\n * @param {string} path\n * @param {object} payload\n * @returns\n */\nexport const patch = (path, payload) =>\n   api.patch(path, payload).then((res) => (res.status === 200 ? { ...res.data, status: 'ok' } : res.data));\n\nexport const put = (path, payload = {}) => api.put(path, payload).then((res) => res.data);\n\n/**\n * Send a DELETE request\n * @param {string} path\n * @returns\n */\nexport const del = (path) =>\n   api.delete(path).then((res) => (res.status === 200 ? { ...res.data, status: 'ok' } : res.data));\n","/home/muneeb/dev/diamond-tiles-frontend/src/jsx/helpers/useQuery.js",[],"/home/muneeb/dev/diamond-tiles-frontend/src/jsx/layouts/ChatBox.js",["729"],"import React, { useState } from 'react';\n\n/// Scroll\nimport PerfectScrollbar from 'react-perfect-scrollbar';\n\nconst ChatBox = ({ onClick, toggle }) => {\n   const [toggleTab, settoggleTab] = useState(window.location.hash.slice(1) ? window.location.hash.slice(1) : 'chat');\n\n   const dataToggle = [\n      { href: '#notes', name: 'Notes' },\n      { href: '#alerts', name: 'Alerts' },\n      { href: '#chat', name: 'Chat' },\n   ];\n\n   return (\n      <div className={`chatbox ${toggle === 'chatbox' ? 'active' : ''}`}>\n         <div className=\"chatbox-close\" label=\"chatbox-close\" role=\"button\" tabIndex=\"0\" onClick={() => onClick()} />\n         <div className=\"custom-tab-1\">\n            <ul className=\"nav nav-tabs\">\n               {dataToggle.map((data, i) => (\n                  <li className=\"nav-item\" key={i}>\n                     <a\n                        className={`nav-link ${toggleTab === data.name.toLocaleLowerCase() ? 'active' : ''}`}\n                        data-toggle=\"tab\"\n                        href={data.href}\n                        onClick={() => settoggleTab(data.name.toLocaleLowerCase())}\n                     >\n                        {data.name}\n                     </a>\n                  </li>\n               ))}\n            </ul>\n            <div className=\"tab-content\">\n               {/* <Chat PerfectScrollbar={PerfectScrollbar} toggle={toggle} toggleTab={toggleTab} />\n               <Notes PerfectScrollbar={PerfectScrollbar} toggle={toggle} toggleTab={toggleTab} />\n               <Alerts PerfectScrollbar={PerfectScrollbar} toggle={toggle} toggleTab={toggleTab} /> */}\n            </div>\n         </div>\n      </div>\n   );\n};\n\nexport default ChatBox;\n","/home/muneeb/dev/diamond-tiles-frontend/src/jsx/layouts/nav/NavHader.js",["730","731"],"import React, { useState } from 'react';\n\n/// React router dom\nimport { Link } from 'react-router-dom';\n\n/// images\nimport logo from '../../../images/logo.png';\nimport logoText from '../../../images/logo-text.png';\n\nconst NavHader = () => {\n   const [toggle, setToggle] = useState(false);\n   return (\n      <div className=\"nav-header\">\n         <Link to=\"/\" className=\"brand-logo\">\n            {/* <img className=\"logo-abbr\" src={logo} alt=\"\" />\n            <img className=\"logo-compact\" src={logoText} alt=\"\" /> */}\n            {/* <img className=\"brand-title\" src={logoText} alt=\"\" /> */}\n            <h1 className=\"brand-title tw-text-2xl tw-text-black tw-font-bold\">Diamond Tiles</h1>\n         </Link>\n\n         <div className=\"nav-control\" role=\"button\" tabIndex=\"0\" onClick={() => setToggle(!toggle)}>\n            <div className={`hamburger ${toggle ? 'is-active' : ''}`}>\n               <span className=\"line\" />\n               <span className=\"line\" />\n               <span className=\"line\" />\n            </div>\n         </div>\n      </div>\n   );\n};\n\nexport default NavHader;\n","/home/muneeb/dev/diamond-tiles-frontend/src/jsx/layouts/nav/Header.js",["732","733","734","735","736","737"],"import React from 'react';\n/// Image\nimport Avatar from 'react-avatar';\nimport { connect, useDispatch } from 'react-redux';\nimport { Link, useHistory } from 'react-router-dom';\nimport { setLogin, setLogout } from 'store/auth/actions';\n\nconst pages = [\n   { path: '/dashboard', label: 'Dashboard' },\n   { path: '/inventory', label: 'Inventory' },\n\n   { path: '/products', label: 'Products' },\n   { path: '/suppliers', label: 'Suppliers' },\n   { path: '/customers', label: 'Customers' },\n   { path: '/users', label: 'Users' },\n   { path: '/employees', label: 'Employees' },\n   { path: '/purchase', label: 'Purchase' },\n   { path: '/sale', label: 'Sale' },\n   { path: '/expenses', label: 'Expenses' },\n];\n\nconst Header = ({ onNote, toggle, onProfile, setUser, onNotification, onBox, logout }) => {\n   const history = useHistory();\n   const path = window.location.pathname;\n   const finalName = pages.find((p) => path.includes(p.path))?.label;\n   const dispatch = useDispatch();\n\n   const handleLogout = () => {\n      localStorage.clear();\n      logout();\n      setUser({});\n   };\n\n   React.useEffect(() => {\n      const token = localStorage.getItem('auth_token');\n      if (!token) {\n         logout();\n         localStorage.clear();\n         history.push('/page-login');\n      }\n   }, []);\n\n   return (\n      <div className=\"header\">\n         <div className=\"header-content\">\n            <nav className=\"navbar navbar-expand\">\n               <div className=\"collapse navbar-collapse justify-content-between\">\n                  <div className=\"header-left\">\n                     <div className=\"dashboard_bar\" style={{ textTransform: 'capitalize' }}>\n                        {finalName || 'Dashboard'}\n                     </div>\n                  </div>\n                  <ul className=\"navbar-nav header-right\">\n                     <li className=\"nav-item dropdown header-profile\">\n                        <Link\n                           to=\"#\"\n                           role=\"button\"\n                           data-toggle=\"dropdown\"\n                           className={`nav-item dropdown header-profile ${toggle === 'profile' ? 'show' : ''}`}\n                           onClick={() => onProfile()}\n                        >\n                           {/* <img alt=\"Profile\" src={profile} width={20} /> */}\n                           <Avatar name=\"Foo Bar\" size=\"38\" textSizeRatio={2.9} round />\n                        </Link>\n                        <div className={`dropdown-menu dropdown-menu-right ${toggle === 'profile' ? 'show' : ''}`}>\n                           <Link to=\"/\" className=\"dropdown-item ai-icon\" onClick={handleLogout}>\n                              <svg\n                                 id=\"icon-logout\"\n                                 xmlns=\"http://www.w3.org/2000/svg\"\n                                 className=\"text-danger\"\n                                 width={18}\n                                 height={18}\n                                 viewBox=\"0 0 24 24\"\n                                 fill=\"none\"\n                                 stroke=\"currentColor\"\n                                 strokeWidth={2}\n                                 strokeLinecap=\"round\"\n                                 strokeLinejoin=\"round\"\n                              >\n                                 <path d=\"M9 21H5a2 2 0 0 1-2-2V5a2 2 0 0 1 2-2h4\" />\n                                 <polyline points=\"16 17 21 12 16 7\" />\n                                 <line x1={21} y1={12} x2={9} y2={12} />\n                              </svg>\n                              <span className=\"ml-2\">Logout </span>\n                           </Link>\n                        </div>\n                     </li>\n                  </ul>\n               </div>\n            </nav>\n         </div>\n      </div>\n   );\n};\n\nconst mapStateToProps = (state) => ({});\n\nconst mapDispatchToProps = (dispatch) => ({\n   setUser: (payload) => dispatch(setLogin(payload)),\n   logout: () => dispatch(setLogout()),\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Header);\n","/home/muneeb/dev/diamond-tiles-frontend/src/jsx/layouts/nav/SideBar.js",["738","739","740"],"/// Menu\nimport MetisMenu from 'metismenujs';\nimport React, { Component, useEffect } from 'react';\n/// Scroll\nimport PerfectScrollbar from 'react-perfect-scrollbar';\n/// Link\nimport { Link, useLocation } from 'react-router-dom';\nimport { When } from 'react-if';\n\nimport { connect } from 'react-redux';\nimport { setLogin } from 'store/auth/actions';\nimport { userRoles } from 'jsx/helpers/enums';\n/// Active menu\nconst manage = ['/employees', '/customers', '/products', '/users', '/types', '/units'];\n\nclass MM extends Component {\n   componentDidMount() {\n      this.$el = this.el;\n      this.mm = new MetisMenu(this.$el);\n   }\n\n   componentWillUnmount() {\n      this.mm.dispose();\n   }\n\n   render() {\n      return (\n         <div className=\"mm-wrapper\">\n            <ul className=\"metismenu\" ref={(el) => (this.el = el)}>\n               {this.props.children}\n            </ul>\n         </div>\n      );\n   }\n}\n\nconst SideBar = (props) => {\n   const { pathname: path } = useLocation();\n\n   useEffect(() => {\n      const btn = document.querySelector('.nav-control');\n      const aaa = document.querySelector('#main-wrapper');\n\n      function toggleFunc() {\n         return aaa.classList.toggle('menu-toggle');\n      }\n\n      btn.addEventListener('click', toggleFunc);\n   }, []);\n\n   return (\n      <div className=\"deznav\">\n         <PerfectScrollbar className=\"deznav-scroll\">\n            <MM className=\"metismenu\" id=\"menu\">\n               <When condition={props.user?.role !== userRoles.CASHIER}>\n                  <li className={path === '/dashboard' ? 'mm-active' : ''}>\n                     <Link className=\"\" to=\"/dashboard\" aria-expanded=\"false\">\n                        <i className=\"flaticon-381-networking\" />\n                        <span className=\"nav-text\">Dashboard</span>\n                     </Link>\n                  </li>\n               </When>\n               <li className={path === '/inventory' ? 'mm-active' : ''}>\n                  <Link className=\"\" to=\"/inventory\" aria-expanded=\"false\">\n                     <i className=\"flaticon-381-notepad\" />\n                     <span className=\"nav-text\">Inventory</span>\n                  </Link>\n               </li>\n               <li className={`${manage.includes(path.slice(1)) ? 'mm-active' : ''}`}>\n                  <Link className=\"has-arrow ai-icon color\" aria-expanded=\"false\">\n                     <i className=\"flaticon-381-notepad\" />\n                     <span className=\"nav-text\">Manage</span>\n                  </Link>\n                  <ul aria-expanded=\"false\">\n                     <li>\n                        <Link to=\"/products\">Products</Link>\n                     </li>\n                     <li>\n                        <Link to=\"/suppliers\">Suppliers</Link>\n                     </li>\n                     <li>\n                        <Link to=\"/customers\">Customers</Link>\n                     </li>\n                     {/* <li>\n                        <Link to=\"/app-calender\">Users</Link>\n                     </li> */}\n                     <When condition={props.user?.role !== userRoles.CASHIER}>\n                        <li>\n                           <Link to=\"/users\">Users</Link>\n                        </li>\n                        <li>\n                           <Link to=\"/employees\">Employees</Link>\n                        </li>\n                     </When>\n                  </ul>\n               </li>\n               <li className={path === '/purchase' ? 'mm-active' : ''}>\n                  <Link className=\"\" to=\"/purchase\" aria-expanded=\"false\">\n                     <i className=\"flaticon-381-more\" />\n                     <span className=\"nav-text\">Purchase</span>\n                  </Link>\n               </li>\n               <li className={path === '/sale' ? 'mm-active' : ''}>\n                  <Link className=\"\" to=\"/sale\" aria-expanded=\"false\">\n                     <i className=\"flaticon-381-calendar\" />\n                     <span className=\"nav-text\">Sale</span>\n                  </Link>\n               </li>\n               <li className={path === '/expenses' ? 'mm-active' : ''}>\n                  <Link className=\"\" to=\"/expenses\" aria-expanded=\"false\">\n                     <i className=\"flaticon-381-briefcase\" />\n                     <span className=\"nav-text\">Expenses</span>\n                  </Link>\n               </li>\n            </MM>\n         </PerfectScrollbar>\n      </div>\n   );\n};\n\nconst mapStateToProps = ({ auth }) => ({\n   user: auth.user,\n});\n\nconst mapDispatchToProps = (dispatch) => ({\n   setLogin: (payload) => dispatch(setLogin(payload)),\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(SideBar);\n","/home/muneeb/dev/diamond-tiles-frontend/src/jsx/pages/purchase/PurchaseInvoice.js",["741","742","743","744","745","746","747","748","749","750","751"],"import React from 'react';\nimport ReactToPrint from 'react-to-print';\nimport { connect } from 'react-redux';\nimport dayjs from 'dayjs';\nimport logo from '../../../images/diamond-tiles-logo.png';\n\nclass PurchaseInvoice extends React.Component {\n   render() {\n      console.log(this.props.invoiceNum);\n      return (\n         <div className=\"m-5\">\n            <div className=\"row mb-2\">\n               <h1 className=\"col-10 text-center flex-2\">INVOICE</h1>\n               <img className=\"col-2 flex-1 text-end\" src={logo} style={{ maxWidth: '100px', maxHeight: '100px' }} />\n            </div>\n            <div className=\"d-flex flex-row justify-content-between mt-5\">\n               <div className=\"\">\n                  <h4 className=\"p-0 m-0\">Diamond Tiles</h4>\n                  <p className=\"p-0 m-0\">Main G. T Road, Bahtr Mor, Wah Cantt</p>\n                  <p className=\"p-0 m-0\">0305-2200111</p>\n                  <p className=\"p-0 m-0\">diamondtiles.pk</p>\n               </div>\n               {/* <div className=\"\">\n                  <h4 className=\"p-0 m-0\">INVOICE TO</h4>\n                  <p className=\"p-0 m-0\">John Doe</p>\n                  <p className=\"p-0 m-0\">0305-2200111</p>\n               </div> */}\n               <div className=\"\">\n                  <h4 className=\"p-0 m-0 text-right\">Invoice Number</h4>\n                  <p className=\"p-0 m-0 text-right\">{`#${this.props.invoiceNum}`}</p>\n                  <h4 className=\"p-0 m-0 text-right\">Date of Invoice</h4>\n                  <p className=\"p-0 m-0 text-right\">{dayjs().format('DD-MMM-YYYY')}</p>\n               </div>\n            </div>\n            <table className=\"table table-striped my-4\">\n               <thead>\n                  <tr>\n                     <th className=\"center\">#</th>\n                     <th className=\"center\">Model Number</th>\n                     <th className=\"center\">Quantity</th>\n                     <th className=\"center\">Unit</th>\n                     <th className=\"center\">Subtotal</th>\n                  </tr>\n               </thead>\n               <tbody>\n                  {this.props?.data().data &&\n                     this.props?.data().data.map((e) => (\n                        <tr key={e?._id}>\n                           <td>{e?.serialNumber ?? ''}</td>\n                           <td>{e?.modelNumber ?? ''}</td>\n                           <td>{e?.quantity ?? ''}</td>\n                           <td>{e?.unit ?? ''}</td>\n                           <td>{e?.price ?? ''}</td>\n                        </tr>\n                     ))}\n               </tbody>\n            </table>\n            <div className=\"row mt-5\">\n               <div className=\"col-lg-4 col-sm-5\"> </div>\n               <div className=\"col-lg-4 col-sm-5 ml-auto\">\n                  <table className=\"table table-clear\">\n                     <tbody>\n                        <tr>\n                           <td className=\"left\">\n                              <strong>Total</strong>\n                           </td>\n                           <td className=\"right\">\n                              <strong>{this.props?.data().total}</strong>\n                           </td>\n                        </tr>\n                        <tr>\n                           <td className=\"left\">\n                              <strong>Paid</strong>\n                           </td>\n                           <td className=\"right\">\n                              <strong>{this.props?.data().paid}</strong>\n                           </td>\n                        </tr>\n                        <tr>\n                           <td className=\"left\">\n                              <strong>Remaining</strong>\n                           </td>\n                           <td className=\"right\">\n                              <strong>{this.props?.data().remaining}</strong>\n                           </td>\n                        </tr>\n                     </tbody>\n                  </table>\n               </div>\n            </div>\n            <div className=\"d-flex flex-row justify-content-center mt-5\">\n               <p>POS Developed by Hassan Naveed - 03415615279</p>\n            </div>\n         </div>\n      );\n   }\n}\n\nclass Print extends React.Component {\n   render() {\n      return (\n         <div>\n            <ReactToPrint\n               // eslint-disable-next-line react/button-has-type\n               trigger={() => <button ref={this.props.printRef} className=\"tw-invisible\" />}\n               content={() => this.componentRef}\n            />\n            <PurchaseInvoice\n               ref={(el) => (this.componentRef = el)}\n               data={this.props.data}\n               invoiceNum={this.props.invoiceNum}\n            />\n         </div>\n      );\n   }\n}\n\nconst mapStateToProps = ({ auth }) => ({\n   user: auth.user,\n});\n\nconst mapDispatchToProps = {};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Print);\n",["752","753","754","755","756"],"/home/muneeb/dev/diamond-tiles-frontend/src/jsx/pages/sale/SaleInvoice.js",["757","758","759","760","761","762","763","764","765"],"import React from 'react';\nimport ReactToPrint from 'react-to-print';\nimport { connect } from 'react-redux';\nimport dayjs from 'dayjs';\nimport logo from '../../../images/diamond-tiles-logo.png';\n\nclass SaleInvoice extends React.Component {\n   render() {\n      return (\n         <div className=\"m-5\">\n            <div className=\"row mb-2\">\n               <h1 className=\"col-10 text-center flex-2\">INVOICE</h1>\n               <img className=\"col-2 flex-1 text-end\" src={logo} style={{ maxWidth: '100px', maxHeight: '100px' }} />\n            </div>\n            <div className=\"d-flex flex-row justify-content-between mt-5\">\n               <div className=\"\">\n                  <h4 className=\"p-0 m-0\">Diamond Tiles</h4>\n                  <p className=\"p-0 m-0\">Main G. T Road, Bahtr Mor, Wah Cantt</p>\n                  <p className=\"p-0 m-0\">0305-2200111</p>\n                  <p className=\"p-0 m-0\">diamondtiles.pk</p>\n               </div>\n               {/* <div className=\"\">\n                  <h4 className=\"p-0 m-0\">INVOICE TO</h4>\n                  <p className=\"p-0 m-0\">John Doe</p>\n                  <p className=\"p-0 m-0\">0305-2200111</p>\n               </div> */}\n               <div className=\"\">\n                  <h4 className=\"p-0 m-0 text-right\">Invoice Number</h4>\n                  <p className=\"p-0 m-0 text-right\">{`#${this.props.invoiceNum}`}</p>\n                  <h4 className=\"p-0 m-0 text-right\">Date of Invoice</h4>\n                  <p className=\"p-0 m-0 text-right\">{dayjs().format('DD-MMM-YYYY')}</p>\n               </div>\n            </div>\n            <table className=\"table table-striped my-4\">\n               <thead>\n                  <tr>\n                     <th className=\"center\">Serial Number</th>\n                     <th className=\"center\">Model Number</th>\n                     <th className=\"center\">Price</th>\n                     <th className=\"center\">Quantity</th>\n                     <th className=\"center\">Unit</th>\n                     <th className=\"center\">Subtotal</th>\n                  </tr>\n               </thead>\n               <tbody>\n                  {this.props?.data().data &&\n                     this.props?.data().data.map((e) => (\n                        <tr key={e?._id}>\n                           <td>{e?.serialNumber ?? ''}</td>\n                           <td>{e?.modelNumber ?? ''}</td>\n                           <td>{e?.price ?? ''}</td>\n                           <td>{e?.quantity ?? ''}</td>\n                           <td>{e?.unit ?? ''}</td>\n                           <td>{e?.subTotal ?? ''}</td>\n                        </tr>\n                     ))}\n               </tbody>\n            </table>\n            <div className=\"row mt-5\">\n               <div className=\"col-lg-4 col-sm-5\"> </div>\n               <div className=\"col-lg-4 col-sm-5 ml-auto\">\n                  <table className=\"table table-clear\">\n                     <tbody>\n                        <tr>\n                           <td className=\"left\">\n                              <strong>Total</strong>\n                           </td>\n                           <td className=\"right\">\n                              <strong>{this.props?.data().total}</strong>\n                           </td>\n                        </tr>\n                        <tr>\n                           <td className=\"left\">\n                              <strong>Paid</strong>\n                           </td>\n                           <td className=\"right\">\n                              <strong>{this.props?.data().paid}</strong>\n                           </td>\n                        </tr>\n                        <tr>\n                           <td className=\"left\">\n                              <strong>Remaining</strong>\n                           </td>\n                           <td className=\"right\">\n                              <strong>{this.props?.data().remaining}</strong>\n                           </td>\n                        </tr>\n                     </tbody>\n                  </table>\n               </div>\n            </div>\n            <div className=\"d-flex flex-row justify-content-center mt-5\">\n               <p>POS Developed by Hassan Naveed - 03415615279</p>\n            </div>\n         </div>\n      );\n   }\n}\n\nclass Print extends React.Component {\n   render() {\n      return (\n         <div>\n            <ReactToPrint\n               // eslint-disable-next-line react/button-has-type\n               trigger={() => <button ref={this.props.printRef} className=\"tw-invisible\" />}\n               content={() => this.componentRef}\n            />\n            <SaleInvoice\n               ref={(el) => (this.componentRef = el)}\n               data={this.props.data}\n               invoiceNum={this.props.invoiceNum}\n            />\n         </div>\n      );\n   }\n}\n\nconst mapStateToProps = ({ auth }) => ({\n   user: auth.user,\n});\n\nconst mapDispatchToProps = {};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Print);\n","/home/muneeb/dev/diamond-tiles-frontend/src/jsx/pages/purchase/RefundPurchase.js",["766","767","768","769","770","771","772","773","774"],"import produce from 'immer';\nimport ModalWrapper from 'jsx/components/ModalWrapper';\nimport Select from 'jsx/components/Select';\nimport SpinnerOverlay from 'jsx/components/SpinnerOverlay';\nimport { get, getV2, put, useAlert, useQuery } from 'jsx/helpers';\nimport _, { isArray } from 'lodash';\nimport React, { useEffect, useState } from 'react';\nimport { Col, Form, Row } from 'react-bootstrap';\nimport { When } from 'react-if';\nimport { useMutation, useQueryClient } from 'react-query';\nimport { useHistory } from 'react-router-dom';\n\nconst RefundPurchase = ({ refundPurchase, toggle, onClose, onOpen, ...props }) => {\n   const queryClient = useQueryClient();\n\n   const alert = useAlert();\n\n   const [refund, setRefund] = useState([]);\n\n   const purchase = useQuery(\n      ['refund-purchase', refundPurchase],\n      () => getV2(`/purchases/id/${refundPurchase}`, { page: 1, limit: 1000 }),\n      {\n         enabled: false,\n         onSuccess: (data) => {\n            const refunds = data.products.map(({ product }) => {\n               const returned = {};\n               returned.product = product._id;\n\n               if (product.type.title.toLowerCase() === 'tile') returned.variants = { a: '', b: '', c: '', d: '' };\n               else returned.quantity = '';\n\n               return returned;\n            });\n            if (!refund.length) setRefund(refunds);\n         },\n      }\n   );\n\n   const mutation = useMutation((payload) => put(`/purchases/${refundPurchase}/refund`, payload), {\n      onSuccess: async () => {\n         await queryClient.invalidateQueries('purchases');\n         onClose();\n         setRefund([]);\n      },\n      onError: (err) => {\n         alert.setErrorAlert({ message: 'Unable to refund purchase', err });\n      },\n   });\n\n   const alertMarkup = alert.getAlert();\n\n   const handleChangeQuantity = (index, q) => {\n      const updatedRefund = produce(refund, (draft) => {\n         draft[index].quantity = q;\n      });\n      setRefund(updatedRefund);\n   };\n\n   const handleChangeVariantQuantity = (index, variant, q) => {\n      const updatedRefund = produce(refund, (draft) => {\n         draft[index].variants[variant] = q;\n      });\n      setRefund(updatedRefund);\n   };\n\n   const handleSubmit = (e) => {\n      e.preventDefault();\n\n      const referenceRefund = _.cloneDeep(refund);\n\n      const payload = [];\n\n      referenceRefund.forEach((r) => {\n         if (r.quantity) payload.push(r);\n         if (r.variants) {\n            const variants = _.cloneDeep(r.variants);\n            Object.entries(variants).forEach(([key, value]) => {\n               if (!value) delete variants[key];\n            });\n\n            if (Object.keys(variants).length) {\n               r.variants = variants;\n               payload.push(r);\n            }\n         }\n      });\n\n      mutation.mutate(payload);\n   };\n\n   useEffect(() => {\n      if (refundPurchase) {\n         console.log('hitting get one purchase');\n         purchase.refetch();\n      }\n   }, [refundPurchase]);\n\n   return (\n      <>\n         <ModalWrapper\n            show={refundPurchase}\n            onHide={() => {\n               if (!mutation.isLoading || !purchase.isLoading) {\n                  onClose();\n                  setRefund([]);\n               }\n            }}\n            isLoading={mutation.isLoading || purchase.isLoading}\n            isDisabled={mutation.isLoading || purchase.isLoading}\n            title=\"Refund Purchase\"\n            onSubmit={handleSubmit}\n            submitButtonText=\"Refund\"\n            size=\"xl\"\n            {...props}\n         >\n            {alertMarkup ? (\n               <Row>\n                  <Col lg={12}>{alertMarkup}</Col>\n               </Row>\n            ) : null}\n            <form onSubmit={handleSubmit}>\n               {purchase.data?.products.map((product, index) => {\n                  const isVarianted = product.variants;\n                  return (\n                     <div className=\"form-group\" key={`product-${index}`}>\n                        <label className=\"col-form-label\">Product</label>\n                        <div className=\"tw-flex\">\n                           <input\n                              className=\"form-control\"\n                              type=\"text\"\n                              value={product.product.modelNumber}\n                              style={{ flex: isVarianted ? 1 : 2 }}\n                              disabled\n                           />\n                           {isVarianted ? (\n                              <div className=\"tw-flex\" style={{ flex: 3 }}>\n                                 <input\n                                    className=\"form-control\"\n                                    type=\"text\"\n                                    placeholder=\"A\"\n                                    value={refund[index]?.variants.a}\n                                    onChange={(e) => handleChangeVariantQuantity(index, 'a', e.target.value)}\n                                 />\n                                 <input\n                                    className=\"form-control\"\n                                    type=\"text\"\n                                    placeholder=\"B\"\n                                    value={refund[index]?.variants.b}\n                                    onChange={(e) => handleChangeVariantQuantity(index, 'b', e.target.value)}\n                                 />\n                                 <input\n                                    className=\"form-control\"\n                                    type=\"text\"\n                                    placeholder=\"C\"\n                                    value={refund[index]?.variants.c}\n                                    onChange={(e) => handleChangeVariantQuantity(index, 'c', e.target.value)}\n                                 />\n                                 <input\n                                    className=\"form-control\"\n                                    type=\"text\"\n                                    placeholder=\"D\"\n                                    value={refund[index]?.variants.d}\n                                    onChange={(e) => handleChangeVariantQuantity(index, 'd', e.target.value)}\n                                 />\n                              </div>\n                           ) : (\n                              <input\n                                 className=\"form-control\"\n                                 style={{ flex: 1 }}\n                                 type=\"text\"\n                                 name=\"modelNumber\"\n                                 placeholder=\"Quantity\"\n                                 value={refund[index]?.quantity}\n                                 onChange={(e) => handleChangeQuantity(index, e.target.value)}\n                              />\n                           )}\n                        </div>\n                     </div>\n                  );\n               })}\n            </form>\n         </ModalWrapper>\n      </>\n   );\n};\n\nexport default RefundPurchase;\n","/home/muneeb/dev/diamond-tiles-frontend/src/jsx/helpers/getQuantity.js",["775"],"import { Fragment } from 'react';\n\n/* eslint-disable prefer-destructuring */\nexport default (array) => {\n   if (!array) return null;\n   if (array[0] > 0) return `${array[0]} Units`;\n   return `${array[1]} ${array[1] > 0 ? 'Singles' : ''}`;\n};\n","/home/muneeb/dev/diamond-tiles-frontend/src/jsx/pages/purchase/ClearPurchase.js",["776","777","778","779","780"],"import ModalWrapper from 'jsx/components/ModalWrapper';\nimport Select from 'jsx/components/Select';\nimport SpinnerOverlay from 'jsx/components/SpinnerOverlay';\nimport { get, post, put, useAlert, useQuery } from 'jsx/helpers';\nimport { isArray } from 'lodash';\nimport React, { useEffect, useState } from 'react';\nimport { Col, Form, Row } from 'react-bootstrap';\nimport { When } from 'react-if';\nimport { useMutation, useQueryClient } from 'react-query';\n\nconst ClearPurchase = ({ initialAmount, clearPurchase, toggle, onClose, onOpen, ...props }) => {\n   const [amount, setAmount] = useState(0);\n\n   useEffect(() => setAmount(initialAmount), [initialAmount]);\n\n   const queryClient = useQueryClient();\n\n   const alert = useAlert();\n\n   const clearMutation = useMutation((payload) => post(`/purchases/pay/id/${clearPurchase}/amount/${payload}`), {\n      onSuccess: async () => {\n         await queryClient.invalidateQueries('purchases');\n         onClose();\n         setAmount(0);\n      },\n      onError: (err) => {\n         alert.setErrorAlert({ message: 'Unable to clear purchase', err });\n      },\n   });\n\n   const alertMarkup = alert.getAlert();\n\n   return (\n      <>\n         <ModalWrapper\n            show={clearPurchase}\n            onHide={() => {\n               onClose();\n               setAmount(0);\n            }}\n            isLoading={clearMutation.isLoading}\n            title=\"Clear Purchase\"\n            onSubmit={() => {\n               clearMutation.mutate(amount);\n            }}\n            submitButtonText=\"Clear\"\n            size=\"xl\"\n            {...props}\n         >\n            <When condition={clearMutation.isLoading}>\n               <SpinnerOverlay />\n            </When>\n            {alertMarkup ? (\n               <Row>\n                  <Col lg={12}>{alertMarkup}</Col>\n               </Row>\n            ) : null}\n            <Form onSubmit={() => clearMutation.mutate(amount)}>\n               <Form.Group>\n                  <Form.Label>Amount</Form.Label>\n                  <Form.Control type=\"number\" value={amount} onChange={(e) => setAmount(e.target.value)} />\n               </Form.Group>\n            </Form>\n            {/* <PurchaseInvoice printRef={printRef} data={getPrintData} invoiceNum={invoiceNum} /> */}\n         </ModalWrapper>\n      </>\n   );\n};\n\nexport default ClearPurchase;\n","/home/muneeb/dev/diamond-tiles-frontend/src/jsx/pages/sale/RefundSale.js",["781","782","783","784","785","786","787","788"],"import ModalWrapper from 'jsx/components/ModalWrapper';\nimport Select from 'jsx/components/Select';\nimport SpinnerOverlay from 'jsx/components/SpinnerOverlay';\nimport { get, put, useAlert, useQuery } from 'jsx/helpers';\nimport { isArray } from 'lodash';\nimport React, { useEffect, useState } from 'react';\nimport { Col, Form, Row } from 'react-bootstrap';\nimport { When } from 'react-if';\nimport { useMutation, useQueryClient } from 'react-query';\nimport { useHistory } from 'react-router-dom';\n\nconst initialValues = {\n   quantity: '',\n   total: '',\n   unit: '',\n};\n\nconst RefundSale = ({ refundSale, toggle, onClose, onOpen, ...props }) => {\n   const [isError, setIsError] = useState(false);\n\n   const [quantity, setQuantity] = useState('');\n   const [total, setTotal] = useState('');\n\n   const queryClient = useQueryClient();\n\n   const alert = useAlert();\n\n   const handleChangeTotal = (t) => {\n      setTotal(t);\n   };\n\n   const handleChangeQuantity = (q, i = null) => {\n      setQuantity(q);\n      console.log('handle', i);\n      console.log('q:%s,retailPrice:%s,quantity:%s', q, i?.retailPrice, i?.quantity);\n      handleChangeTotal(q * (i?.retailPrice ?? 0 / i?.quantity ?? 0));\n   };\n\n   const inventory = useQuery(['sale', refundSale], () => get(`/sales/id/${refundSale}`), {\n      enabled: false,\n      onSuccess: (data) => {\n         handleChangeQuantity(1, data);\n      },\n   });\n\n   const refundMutation = useMutation((payload) => put(`/sales/${refundSale}/refund/${payload}`), {\n      onSuccess: () => {\n         onClose();\n         handleChangeQuantity(0, inventory.data);\n         queryClient.invalidateQueries('sales');\n      },\n      onError: (err) => {\n         alert.setErrorAlert({ message: 'Unable to refund sale', err });\n      },\n   });\n\n   useEffect(() => {\n      if (refundSale) inventory.refetch();\n   }, [refundSale]);\n\n   const alertMarkup = alert.getAlert();\n\n   return (\n      <>\n         <ModalWrapper\n            show={refundSale}\n            onHide={() => {\n               onClose();\n               handleChangeQuantity(0);\n            }}\n            isLoading={refundMutation.isLoading}\n            title=\"Refund Sale\"\n            onSubmit={() => {\n               refundMutation.mutate(quantity);\n            }}\n            submitButtonText=\"Refund\"\n            size=\"xl\"\n            isDisabled={isError}\n            {...props}\n         >\n            <When condition={inventory.isLoading}>\n               <SpinnerOverlay />\n            </When>\n            {alertMarkup ? (\n               <Row>\n                  <Col lg={12}>{alertMarkup}</Col>\n               </Row>\n            ) : null}\n            <Form>\n               <Form.Group>\n                  <Form.Label>Quantity</Form.Label>\n                  <Form.Control\n                     type=\"number\"\n                     value={quantity}\n                     onChange={(e) => handleChangeQuantity(e.target.value, inventory.data)}\n                  />\n               </Form.Group>\n\n               <Form.Group>\n                  <Form.Label>Total</Form.Label>\n                  <Form.Control type=\"number\" value={total} onChange={(e) => handleChangeTotal(e.target.value)} />\n               </Form.Group>\n            </Form>\n            {/* <PurchaseInvoice printRef={printRef} data={getPrintData} invoiceNum={invoiceNum} /> */}\n         </ModalWrapper>\n      </>\n   );\n};\n\nexport default RefundSale;\n","/home/muneeb/dev/diamond-tiles-frontend/src/store/products/reducer.js",[],"/home/muneeb/dev/diamond-tiles-frontend/src/store/products/actionTypes.js",[],"/home/muneeb/dev/diamond-tiles-frontend/src/jsx/pages/products/AddNewProduct.js",["789","790","791","792"],"import ModalWrapper from 'jsx/components/ModalWrapper';\nimport React, { useEffect, useRef } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport CreatableSelect from 'jsx/components/CreatableSelect';\nimport { get, getV2, post, useAlert, useQuery } from 'jsx/helpers';\nimport Select from 'jsx/components/Select';\nimport {\n   setProductsData,\n   setProductsVisibility,\n   setTypesData,\n   setTypesVisibility,\n   setUnitsData,\n   setUnitsVisibility,\n} from 'store/actions';\nimport { useFormik } from 'formik';\nimport { QueryClient, useMutation, useQueryClient } from 'react-query';\nimport SpinnerOverlay from 'jsx/components/SpinnerOverlay';\nimport { When } from 'react-if';\n\nconst AddNewProduct = () => {\n   const state = useSelector((s) => s.products);\n   const dispatch = useDispatch();\n   const alert = useAlert();\n\n   const modelNumberRef = useRef();\n\n   const queryClient = useQueryClient();\n\n   const types = useQuery('types', () => getV2('/types'));\n   const units = useQuery('units', () => getV2('/units'));\n\n   const mutation = useMutation((payload) => post('/products', payload), {\n      onSuccess: async () => {\n         await queryClient.invalidateQueries('all-products');\n         dispatch(setProductsVisibility(false));\n      },\n      onError: (err) => {\n         alert.setErrorAlert({ message: 'Unable to add product', err });\n      },\n   });\n\n   const formik = useFormik({\n      initialValues: {\n         modelNumber: state.data.modelNumber ?? '',\n         type: state.data.type,\n         unit: state.data.unit,\n      },\n      onSubmit: (values, form) => {\n         const payload = { modelNumber: values.modelNumber, type: values.type._id, unit: values.unit._id };\n         mutation.mutate(payload);\n         form.resetForm();\n         dispatch(setProductsData({}));\n      },\n   });\n\n   useEffect(() => {\n      if (state.visible) modelNumberRef.current.focus();\n      if (state.data.modelNumber) formik.setFieldValue('modelNumber', state.data.modelNumber);\n   }, [state.visible]);\n\n   return (\n      <>\n         <ModalWrapper\n            show={state.visible}\n            onHide={() => {\n               dispatch(setProductsVisibility(false));\n            }}\n            title=\"Add New Product\"\n            isLoading={types.isLoading || units.isLoading || mutation.isLoading}\n            size=\"md\"\n            onSubmit={formik.handleSubmit}\n            submitButtonText=\"Save\"\n         >\n            <When condition={types.isLoading || units.isLoading || mutation.isLoading}>\n               <SpinnerOverlay />\n            </When>\n            {alert.getAlert()}\n            <form onSubmit={formik.handleSubmit}>\n               <div className=\"row\">\n                  <div className=\"form-group col-xl-12\">\n                     <label className=\"col-form-label\">Model Number</label>\n                     <input\n                        ref={modelNumberRef}\n                        className=\"form-control\"\n                        onChange={formik.handleChange}\n                        type=\"text\"\n                        name=\"modelNumber\"\n                        value={formik.values.modelNumber}\n                     />\n                  </div>\n                  <div className=\"form-group col-xl-12\">\n                     <label className=\"col-form-label\">Type</label>\n                     {!types.isLoading && !types.isError && (\n                        <CreatableSelect\n                           onChange={(type) => formik.setFieldValue('type', type.value)}\n                           options={types.data?.map((type) => ({ label: type.title, value: type }))}\n                           onCreateOption={(title) => {\n                              dispatch(setTypesData({ title }));\n                              dispatch(setTypesVisibility(true));\n                           }}\n                        />\n                     )}\n                  </div>\n                  <div className=\"form-group col-xl-12\">\n                     <label className=\"col-form-label\">Unit</label>\n                     <CreatableSelect\n                        width=\"tw-w-full\"\n                        onChange={(unit) => formik.setFieldValue('unit', unit.value)}\n                        options={units.data?.map((unit) => ({ label: unit.title, value: unit }))}\n                        onCreateOption={(title) => {\n                           dispatch(setUnitsData({ title }));\n                           dispatch(setUnitsVisibility(true));\n                        }}\n                        //    options={units.data?.map((e) => ({ label: e.title, value: e }))}\n                     />\n                  </div>\n               </div>\n            </form>\n         </ModalWrapper>\n      </>\n   );\n};\n\nexport default AddNewProduct;\n","/home/muneeb/dev/diamond-tiles-frontend/src/store/actions.js",[],"/home/muneeb/dev/diamond-tiles-frontend/src/store/products/actions.js",[],"/home/muneeb/dev/diamond-tiles-frontend/src/store/types/actions.js",[],"/home/muneeb/dev/diamond-tiles-frontend/src/store/types/actionTypes.js",[],"/home/muneeb/dev/diamond-tiles-frontend/src/store/types/reducer.js",[],"/home/muneeb/dev/diamond-tiles-frontend/src/jsx/pages/types/AddNewType.js",["793","794","795","796","797","798"],"import ModalWrapper from 'jsx/components/ModalWrapper';\nimport React, { useEffect, useRef } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport CreatableSelect from 'jsx/components/CreatableSelect';\nimport { get, getV2, post, useAlert, useQuery } from 'jsx/helpers';\nimport Select from 'jsx/components/Select';\nimport { setTypesData, setTypesVisibility } from 'store/actions';\nimport { useFormik } from 'formik';\nimport { useMutation, useQueryClient } from 'react-query';\nimport { When } from 'react-if';\nimport SpinnerOverlay from 'jsx/components/SpinnerOverlay';\n\nconst AddNewType = () => {\n   const state = useSelector((s) => s.types);\n   const dispatch = useDispatch();\n   const alert = useAlert();\n   const queryClient = useQueryClient();\n   const titleRef = useRef();\n\n   const mutation = useMutation((payload) => post('/types', payload), {\n      onSuccess: async () => {\n         await queryClient.invalidateQueries('types');\n         dispatch(setTypesVisibility(false));\n      },\n      onError: (err) => {\n         alert.setErrorAlert({ message: 'Unable to add type', err });\n      },\n   });\n\n   const formik = useFormik({\n      initialValues: {\n         title: state.data.title ?? '',\n      },\n      onSubmit: (values, form) => {\n         mutation.mutate(values);\n         form.resetForm();\n         dispatch(setTypesData({}));\n      },\n   });\n\n   useEffect(() => {\n      if (state.visible) titleRef.current.focus();\n      if (state.data.title) formik.setFieldValue('title', state.data.title);\n   }, [state.visible]);\n\n   return (\n      <>\n         <ModalWrapper\n            show={state.visible}\n            onHide={() => {\n               dispatch(setTypesVisibility(false));\n            }}\n            title=\"Add New Type\"\n            isLoading={mutation.isLoading}\n            size=\"md\"\n            onSubmit={formik.handleSubmit}\n            submitButtonText=\"Save\"\n         >\n            <When condition={mutation.isLoading}>\n               <SpinnerOverlay />\n            </When>\n            {alert.getAlert()}\n\n            <form onSubmit={formik.handleSubmit}>\n               <div className=\"row\">\n                  <div className=\"form-group col-xl-12\">\n                     <label className=\"col-form-label\">Title</label>\n                     <input\n                        ref={titleRef}\n                        className=\"form-control\"\n                        onChange={formik.handleChange}\n                        type=\"text\"\n                        name=\"title\"\n                        value={formik.values.title}\n                     />\n                  </div>\n               </div>\n            </form>\n         </ModalWrapper>\n      </>\n   );\n};\n\nexport default AddNewType;\n","/home/muneeb/dev/diamond-tiles-frontend/src/store/units/actions.js",[],"/home/muneeb/dev/diamond-tiles-frontend/src/store/units/actionTypes.js",[],"/home/muneeb/dev/diamond-tiles-frontend/src/jsx/pages/units/AddNewUnit.js",["799","800","801"],"import ModalWrapper from 'jsx/components/ModalWrapper';\nimport React, { useEffect, useRef } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport CreatableSelect from 'jsx/components/CreatableSelect';\nimport { get, getV2, post, useAlert, useQuery } from 'jsx/helpers';\nimport Select from 'jsx/components/Select';\nimport { setUnitsData, setUnitsVisibility } from 'store/actions';\nimport { useFormik } from 'formik';\nimport { useMutation, useQueryClient } from 'react-query';\nimport { When } from 'react-if';\nimport SpinnerOverlay from 'jsx/components/SpinnerOverlay';\n\nconst AddNewUnit = () => {\n   const state = useSelector((s) => s.units);\n   const dispatch = useDispatch();\n   const alert = useAlert();\n   const queryClient = useQueryClient();\n   const titleRef = useRef();\n\n   const types = useQuery('types', () => getV2('/types'));\n\n   const mutation = useMutation((payload) => post('/units', payload), {\n      onSuccess: async () => {\n         await queryClient.invalidateQueries('units');\n         dispatch(setUnitsVisibility(false));\n      },\n      onError: (err) => {\n         alert.setErrorAlert({ message: 'Unable to add unit', err });\n      },\n   });\n\n   const formik = useFormik({\n      initialValues: {\n         title: state.data.title ?? '',\n         value: state.data.value ?? '',\n         type: state.data.type,\n      },\n      onSubmit: (values, form) => {\n         mutation.mutate(values);\n         form.resetForm();\n         dispatch(setUnitsData({}));\n      },\n   });\n\n   useEffect(() => {\n      if (state.visible) titleRef.current.focus();\n      if (state.data.title) formik.setFieldValue('title', state.data.title);\n      if (state.data.value) formik.setFieldValue('value', state.data.value);\n      if (state.data.type) formik.setFieldValue('type', state.data.type);\n   }, [state.visible]);\n\n   return (\n      <>\n         <ModalWrapper\n            show={state.visible}\n            onHide={() => {\n               dispatch(setUnitsVisibility(false));\n            }}\n            title=\"Add New Unit\"\n            isLoading={mutation.isLoading}\n            size=\"md\"\n            onSubmit={formik.handleSubmit}\n            submitButtonText=\"Save\"\n         >\n            <When condition={mutation.isLoading}>\n               <SpinnerOverlay />\n            </When>\n            {alert.getAlert()}\n\n            <form onSubmit={formik.handleSubmit}>\n               <div className=\"row\">\n                  <div className=\"form-group col-xl-12\">\n                     <label className=\"col-form-label\">Title</label>\n                     <input\n                        ref={titleRef}\n                        className=\"form-control\"\n                        onChange={formik.handleChange}\n                        type=\"text\"\n                        name=\"title\"\n                        value={formik.values.title}\n                     />\n                  </div>\n               </div>\n               <div className=\"row\">\n                  <div className=\"form-group col-xl-12\">\n                     <label className=\"col-form-label\">Value</label>\n                     <input\n                        className=\"form-control\"\n                        onChange={formik.handleChange}\n                        type=\"number\"\n                        name=\"value\"\n                        value={formik.values.value}\n                     />\n                  </div>\n               </div>\n               <div className=\"row\">\n                  <div className=\"form-group col-xl-12\">\n                     <label className=\"col-form-label\">Type</label>\n                     {!types.isLoading && !types.isError && (\n                        <CreatableSelect\n                           onChange={(type) => formik.setFieldValue('type', type.value)}\n                           options={types.data?.map((type) => ({ label: type.title, value: type }))}\n                           onCreateOption={(title) => {\n                              dispatch(setUnitsData({ title }));\n                              dispatch(setUnitsVisibility(true));\n                           }}\n                        />\n                     )}\n                  </div>\n               </div>\n            </form>\n         </ModalWrapper>\n      </>\n   );\n};\n\nexport default AddNewUnit;\n","/home/muneeb/dev/diamond-tiles-frontend/src/store/units/reducer.js",[],"/home/muneeb/dev/diamond-tiles-frontend/src/store/suppliers/actions.js",[],"/home/muneeb/dev/diamond-tiles-frontend/src/store/suppliers/actionTypes.js",[],"/home/muneeb/dev/diamond-tiles-frontend/src/jsx/pages/suppliers/AddNewSupplier.js",["802","803","804","805","806","807","808","809","810"],"import ModalWrapper from 'jsx/components/ModalWrapper';\nimport React, { useEffect, useMemo, useRef } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport CreatableSelect from 'jsx/components/CreatableSelect';\nimport { get, getV2, patch, post, useAlert, useQuery } from 'jsx/helpers';\nimport Select from 'jsx/components/Select';\nimport {\n   setTypesData,\n   setSu,\n   setSuppliersVisibilityppliersVisibility,\n   setSuppliersVisibility,\n   setSuppliersData,\n} from 'store/actions';\nimport { useFormik } from 'formik';\nimport { useMutation, useQueryClient } from 'react-query';\nimport { When } from 'react-if';\nimport SpinnerOverlay from 'jsx/components/SpinnerOverlay';\n\nconst AddNewSupplier = () => {\n   const state = useSelector((s) => s.suppliers);\n   const dispatch = useDispatch();\n   const alert = useAlert();\n   const queryClient = useQueryClient();\n   const nameRef = useRef();\n\n   const postMutation = useMutation((payload) => post('/suppliers', payload), {\n      onSuccess: async () => {\n         await queryClient.invalidateQueries('suppliers');\n         dispatch(setSuppliersData({}));\n         dispatch(setSuppliersVisibility(false));\n      },\n      onError: (err) => {\n         alert.setErrorAlert({ message: 'Unable to add supplier', err });\n      },\n   });\n\n   const patchMutation = useMutation((payload) => patch(`/suppliers/id/${state.data._id}`, payload), {\n      onSuccess: async () => {\n         await queryClient.invalidateQueries('suppliers');\n         dispatch(setSuppliersVisibility(false));\n      },\n      onError: (err) => {\n         alert.setErrorAlert({ message: 'Unable to edit supplier', err });\n      },\n   });\n\n   const mutation = useMemo(\n      () => (state.data.name ? patchMutation : postMutation),\n      [patchMutation, postMutation, state.data.name]\n   );\n\n   const formik = useFormik({\n      initialValues: {\n         name: state.data.name ?? '',\n         phone: state.data.phone ?? '',\n         company: state.data.company ?? '',\n      },\n      onSubmit: (values, form) => {\n         mutation.mutate(values);\n         form.resetForm();\n      },\n   });\n\n   useEffect(() => {\n      if (state.visible) nameRef.current.focus();\n      if (state.data.name) formik.setFieldValue('name', state.data.name);\n      if (state.data.phone) formik.setFieldValue('phone', state.data.phone);\n      if (state.data.company) formik.setFieldValue('company', state.data.company);\n   }, [state.visible]);\n\n   return (\n      <>\n         <ModalWrapper\n            show={state.visible}\n            onHide={() => {\n               dispatch(setSuppliersVisibility(false));\n            }}\n            title={`${state.data._id ? 'Edit' : 'Add New'} Supplier`}\n            isLoading={postMutation.isLoading || patchMutation.isLoading}\n            size=\"md\"\n            onSubmit={formik.handleSubmit}\n            submitButtonText=\"Save\"\n         >\n            <When condition={postMutation.isLoading || patchMutation.isLoading}>\n               <SpinnerOverlay />\n            </When>\n            {alert.getAlert()}\n\n            <form onSubmit={formik.handleSubmit}>\n               <div className=\"row\">\n                  <div className=\"form-group col-xl-12\">\n                     <label className=\"col-form-label\">Name</label>\n                     <input\n                        ref={nameRef}\n                        className=\"form-control\"\n                        onChange={formik.handleChange}\n                        type=\"text\"\n                        name=\"name\"\n                        value={formik.values.name}\n                     />\n                  </div>\n               </div>\n               <div className=\"row\">\n                  <div className=\"form-group col-xl-12\">\n                     <label className=\"col-form-label\">Phone</label>\n                     <input\n                        className=\"form-control\"\n                        onChange={formik.handleChange}\n                        type=\"text\"\n                        name=\"phone\"\n                        value={formik.values.phone}\n                     />\n                  </div>\n               </div>\n               <div className=\"row\">\n                  <div className=\"form-group col-xl-12\">\n                     <label className=\"col-form-label\">Company</label>\n                     <input\n                        className=\"form-control\"\n                        onChange={formik.handleChange}\n                        type=\"text\"\n                        name=\"company\"\n                        value={formik.values.company}\n                     />\n                  </div>\n               </div>\n            </form>\n         </ModalWrapper>\n      </>\n   );\n};\n\nexport default AddNewSupplier;\n","/home/muneeb/dev/diamond-tiles-frontend/src/store/suppliers/reducer.js",[],"/home/muneeb/dev/diamond-tiles-frontend/src/jsx/pages/sale/ClearSale.js",["811","812","813","814","815"],"import ModalWrapper from 'jsx/components/ModalWrapper';\nimport Select from 'jsx/components/Select';\nimport SpinnerOverlay from 'jsx/components/SpinnerOverlay';\nimport { get, post, put, useAlert, useQuery } from 'jsx/helpers';\nimport { isArray } from 'lodash';\nimport React, { useEffect, useState } from 'react';\nimport { Col, Form, Row } from 'react-bootstrap';\nimport { When } from 'react-if';\nimport { useMutation, useQueryClient } from 'react-query';\n\nconst ClearSale = ({ initialAmount, clearSale, toggle, onClose, onOpen, ...props }) => {\n   const [amount, setAmount] = useState(0);\n\n   useEffect(() => setAmount(initialAmount), [initialAmount]);\n\n   const queryClient = useQueryClient();\n\n   const alert = useAlert();\n\n   const clearMutation = useMutation((payload) => post(`/sales/pay/id/${clearSale}/amount/${payload}`), {\n      onSuccess: async () => {\n         await queryClient.invalidateQueries('sales');\n         onClose();\n         setAmount(0);\n      },\n      onError: (err) => {\n         alert.setErrorAlert({ message: 'Unable to clear sale', err });\n      },\n   });\n\n   const alertMarkup = alert.getAlert();\n\n   return (\n      <>\n         <ModalWrapper\n            show={clearSale}\n            onHide={() => {\n               onClose();\n               setAmount(0);\n            }}\n            isLoading={clearMutation.isLoading}\n            title=\"Clear Sale\"\n            onSubmit={() => {\n               clearMutation.mutate(amount);\n            }}\n            submitButtonText=\"Clear\"\n            size=\"xl\"\n            {...props}\n         >\n            <When condition={clearMutation.isLoading}>\n               <SpinnerOverlay />\n            </When>\n            {alertMarkup ? (\n               <Row>\n                  <Col lg={12}>{alertMarkup}</Col>\n               </Row>\n            ) : null}\n            <Form onSubmit={() => clearMutation.mutate(amount)}>\n               <Form.Group>\n                  <Form.Label>Amount</Form.Label>\n                  <Form.Control type=\"number\" value={amount} onChange={(e) => setAmount(e.target.value)} />\n               </Form.Group>\n            </Form>\n            {/* <PurchaseInvoice printRef={printRef} data={getPrintData} invoiceNum={invoiceNum} /> */}\n         </ModalWrapper>\n      </>\n   );\n};\n\nexport default ClearSale;\n","/home/muneeb/dev/diamond-tiles-frontend/src/store/customers/actions.js",[],"/home/muneeb/dev/diamond-tiles-frontend/src/store/customers/actionTypes.js",[],"/home/muneeb/dev/diamond-tiles-frontend/src/store/customers/reducer.js",[],"/home/muneeb/dev/diamond-tiles-frontend/src/jsx/pages/customers/AddNewCustomer.js",["816","817","818","819","820","821"],"import ModalWrapper from 'jsx/components/ModalWrapper';\nimport React, { useEffect, useMemo, useRef } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport CreatableSelect from 'jsx/components/CreatableSelect';\nimport { get, getV2, patch, post, useAlert, useQuery } from 'jsx/helpers';\nimport Select from 'jsx/components/Select';\nimport { setCustomersVisibility, setCustomersData } from 'store/actions';\nimport { useFormik } from 'formik';\nimport { useMutation, useQueryClient } from 'react-query';\nimport { When } from 'react-if';\nimport SpinnerOverlay from 'jsx/components/SpinnerOverlay';\n\nconst AddNewCustomer = () => {\n   const state = useSelector((s) => s.customers);\n   const dispatch = useDispatch();\n   const alert = useAlert();\n   const queryClient = useQueryClient();\n   const nameRef = useRef();\n\n   const postMutation = useMutation((payload) => post('/customers', payload), {\n      onSuccess: async () => {\n         await queryClient.invalidateQueries('customers');\n         dispatch(setCustomersVisibility(false));\n      },\n      onError: (err) => {\n         alert.setErrorAlert({ message: 'Unable to add customer', err });\n      },\n   });\n\n   const patchMutation = useMutation((payload) => patch(`/customers/id/${state.data._id}`, payload), {\n      onSuccess: async () => {\n         await queryClient.invalidateQueries('customers');\n         dispatch(setCustomersVisibility(false));\n      },\n      onError: (err) => {\n         alert.setErrorAlert({ message: 'Unable to edit customer', err });\n      },\n   });\n\n   const mutation = useMemo(\n      () => (state.data.name ? patchMutation : postMutation),\n      [patchMutation, postMutation, state.data.name]\n   );\n\n   const formik = useFormik({\n      initialValues: {\n         name: state.data.name ?? '',\n         phone: state.data.phone ?? '',\n      },\n      onSubmit: (values, form) => {\n         mutation.mutate(values);\n         form.resetForm();\n         dispatch(setCustomersData({}));\n      },\n   });\n\n   useEffect(() => {\n      if (state.visible) nameRef.current.focus();\n      if (state.data.name) formik.setFieldValue('name', state.data.name);\n      if (state.data.phone) formik.setFieldValue('phone', state.data.phone);\n   }, [state.visible]);\n\n   return (\n      <>\n         <ModalWrapper\n            show={state.visible}\n            onHide={() => {\n               dispatch(setCustomersVisibility(false));\n            }}\n            title={`${state.data.name ? 'Edit' : 'Add New'} Customer`}\n            isLoading={postMutation.isLoading || patchMutation.isLoading}\n            size=\"md\"\n            onSubmit={formik.handleSubmit}\n            submitButtonText=\"Save\"\n         >\n            <When condition={postMutation.isLoading || patchMutation.isLoading}>\n               <SpinnerOverlay />\n            </When>\n            {alert.getAlert()}\n\n            <form onSubmit={formik.handleSubmit}>\n               <div className=\"row\">\n                  <div className=\"form-group col-xl-12\">\n                     <label className=\"col-form-label\">Name</label>\n                     <input\n                        ref={nameRef}\n                        className=\"form-control\"\n                        onChange={formik.handleChange}\n                        type=\"text\"\n                        name=\"name\"\n                        value={formik.values.name}\n                     />\n                  </div>\n               </div>\n               <div className=\"row\">\n                  <div className=\"form-group col-xl-12\">\n                     <label className=\"col-form-label\">Phone</label>\n                     <input\n                        className=\"form-control\"\n                        onChange={formik.handleChange}\n                        type=\"text\"\n                        name=\"phone\"\n                        value={formik.values.phone}\n                     />\n                  </div>\n               </div>\n            </form>\n         </ModalWrapper>\n      </>\n   );\n};\n\nexport default AddNewCustomer;\n","/home/muneeb/dev/diamond-tiles-frontend/src/jsx/pages/users/index.js",["822","823","824","825","826","827","828","829","830","831","832","833","834","835","836","837"],"import Button from 'jsx/components/Button';\nimport Pagination from 'jsx/components/Pagination';\nimport SpinnerOverlay from 'jsx/components/SpinnerOverlay';\nimport { del, get, getV2, put, useAlert, useMutation, useQuery } from 'jsx/helpers';\nimport PageTItle from 'jsx/layouts/PageTitle';\nimport _ from 'lodash';\nimport React, { useEffect, useState } from 'react';\nimport { ButtonGroup, Card, Col, Row, Table, Popover, OverlayTrigger } from 'react-bootstrap';\nimport { AiFillDelete, AiFillEdit, AiFillEye, AiFillPlusCircle, AiOutlineQuestionCircle } from 'react-icons/ai';\nimport { Else, If, Then, When } from 'react-if';\nimport { useQueryClient } from 'react-query';\nimport { useHistory } from 'react-router-dom';\nimport dayjs from 'dayjs';\nimport relativeTime from 'dayjs/plugin/relativeTime';\nimport swal from 'sweetalert';\nimport { FaSort, FaSortDown, FaSortUp } from 'react-icons/fa';\nimport { useDebounce } from 'ahooks';\nimport { connect } from 'react-redux';\nimport { userRoles } from 'jsx/helpers/enums';\nimport cls from 'classnames';\nimport Select from 'jsx/components/Select';\nimport ClearSale from '../sale/ClearSale';\n\ndayjs.extend(relativeTime);\nconst Users = (props) => {\n   const history = useHistory();\n   const [page, setPage] = useState(1);\n   const [limit, setLimit] = useState(5);\n   const [sort, setSort] = useState({ field: null, order: 1 });\n   const [search, setSearch] = useState('');\n   const debouncedSearchValue = useDebounce(search, { wait: 500 });\n   const [roles, setRoles] = useState({});\n\n   const alert = useAlert();\n   const queryClient = useQueryClient();\n\n   const query = useQuery(['auth', page, limit, sort.field, sort.order, debouncedSearchValue], () =>\n      getV2('/auth', { page, limit, search: debouncedSearchValue })\n   );\n   const rejectMutation = useMutation((id) => del(`/auth/id/${id}`), {\n      onSuccess: async () => {\n         await queryClient.invalidateQueries('auth');\n         alert.setAlert({\n            message: 'User rejected successfully',\n            variant: 'success',\n         });\n      },\n      onError: (err) => {\n         alert.setErrorAlert({ message: 'Unable to reject user', err });\n      },\n   });\n\n   const acceptMutation = useMutation(({ id, role }) => put(`/auth/confirm/${id}/${role}`), {\n      onSuccess: async () => {\n         await queryClient.invalidateQueries('auth');\n         alert.setAlert({\n            message: 'User accepted successfully',\n            variant: 'success',\n         });\n      },\n      onError: (err) => {\n         alert.setErrorAlert({ message: 'Unable to accepted user', err });\n      },\n   });\n\n   const handleOnClickDelete = (id) => {\n      swal({\n         title: 'Are you sure?',\n         text: 'Once deleted, you will not be able to recover it!',\n         icon: 'warning',\n         buttons: true,\n         dangerMode: true,\n      }).then((willDelete) => {\n         if (willDelete) {\n            rejectMutation.mutate(id);\n         }\n      });\n   };\n\n   const alertMarkup = alert.getAlert();\n\n   const handleAcceptUser = (id) => {\n      console.log(id, roles, roles[id]);\n      acceptMutation.mutate({ id, role: roles[id] });\n   };\n\n   useEffect(() => {\n      if (page > query.data?.totalPages) {\n         setPage((prev) => prev - 1);\n      }\n   }, [page, query.data?.totalPages]);\n\n   return (\n      <>\n         <PageTItle activeMenu=\"Users\" motherMenu=\"Manage\" />\n         <div className=\"row tw-mb-8\">\n            <div className=\"col-xl-6\" />\n\n            <div className=\"col-xl-6\">\n               <ButtonGroup className=\"tw-float-right\">\n                  <input\n                     type=\"text\"\n                     className=\"input-rounded tw-rounded-r-none tw-pl-6\"\n                     placeholder=\"Search Users...\"\n                     disabled={rejectMutation.isLoading}\n                     onChange={(e) => setSearch(e.target.value)}\n                  />\n                  <Button variant=\"secondary\" className=\"btn btn-secondary tw-pl-6\" loading={query.isLoading}>\n                     Search\n                  </Button>\n               </ButtonGroup>\n            </div>\n         </div>\n         {alertMarkup ? (\n            <Row>\n               <Col lg={12}>{alertMarkup}</Col>\n            </Row>\n         ) : null}\n         <div className=\"row\">\n            <Col lg={12}>\n               <Card>\n                  <When condition={query.isLoading || rejectMutation.isLoading || acceptMutation.isLoading}>\n                     <SpinnerOverlay />\n                  </When>\n                  <Card.Header>\n                     <Card.Title>Manage Users</Card.Title>\n                  </Card.Header>\n                  <Card.Body>\n                     <If condition={query.data?.totalDocs > 0}>\n                        <Then>\n                           <Table className=\"tw-relative\" responsive>\n                              <thead>\n                                 <tr>\n                                    <th className=\"width80\">\n                                       <strong>#</strong>\n                                    </th>\n                                    <th>\n                                       <strong className=\"tw-cursor-pointer\">Name</strong>\n                                    </th>\n                                    <th>\n                                       <strong className=\"tw-cursor-pointer\">Role</strong>\n                                    </th>\n                                    <th />\n                                 </tr>\n                              </thead>\n\n                              <tbody>\n                                 {query.data?.docs.map((e, index) => {\n                                    if (e.name === 'dev') return null;\n\n                                    const DeleteButton = (p) => (\n                                       <Button\n                                          variant=\"danger\"\n                                          size=\"sm\"\n                                          icon={AiFillDelete}\n                                          onClick={() => handleOnClickDelete(e._id)}\n                                       >\n                                          {p.children}\n                                       </Button>\n                                    );\n                                    return (\n                                       <tr key={`${e._id}`}>\n                                          <td>\n                                             <b>{query.data.pagingCounter + index}</b>\n                                          </td>\n                                          <td className=\"tw-capitalize\">{e.name}</td>\n                                          <td className=\"tw-capitalize\">{e.role?.toLowerCase()}</td>\n                                          <td className=\"tw-flex tw-items-center tw-gap-4\">\n                                             <If condition={!e.isConfirmed}>\n                                                <Then>\n                                                   <Select\n                                                      width=\"tw-w-[200px]\"\n                                                      placeholder=\"Assign Role\"\n                                                      options={[\n                                                         { label: 'Administrator', value: 'Administrator' },\n                                                         { label: 'Cashier', value: 'Cashier' },\n                                                      ]}\n                                                      onChange={(role) =>\n                                                         setRoles((prev) => ({ ...prev, [e._id]: role.value }))\n                                                      }\n                                                   />\n                                                   <ButtonGroup>\n                                                      <DeleteButton>Reject</DeleteButton>\n                                                      <Button\n                                                         variant=\"secondary\"\n                                                         size=\"sm\"\n                                                         icon={AiFillEdit}\n                                                         disabled={!roles[e._id]}\n                                                         onClick={() => handleAcceptUser(e._id)}\n                                                      >\n                                                         Accept\n                                                      </Button>\n                                                   </ButtonGroup>\n                                                </Then>\n                                                <Else>\n                                                   <When condition={props.user._id !== e._id}>\n                                                      <DeleteButton>Delete</DeleteButton>\n                                                   </When>\n                                                </Else>\n                                             </If>\n                                          </td>\n                                       </tr>\n                                    );\n                                 })}\n                              </tbody>\n                           </Table>\n                        </Then>\n                        <Else>\n                           <When condition={!query.isLoading && !debouncedSearchValue}>\n                              <p className=\"tw-m-0\">No customers created</p>\n                           </When>\n                           <When condition={!query.isLoading && debouncedSearchValue}>\n                              <p className=\"tw-m-0\">No result found!</p>\n                           </When>\n                        </Else>\n                     </If>\n                  </Card.Body>\n               </Card>\n            </Col>\n         </div>\n         <When condition={limit > 5 ? true : query.data?.totalPages > 1}>\n            <Pagination\n               page={page}\n               onPageChange={setPage}\n               onLimitChange={setLimit}\n               {..._.omit(query.data, ['docs'])}\n               isLimitDisabled={query.isLoading || rejectMutation.isLoading}\n            />\n         </When>\n      </>\n   );\n};\nconst mapStateToProps = ({ auth }) => ({\n   user: auth.user,\n});\n\nconst mapDispatchToProps = {};\nexport default connect(mapStateToProps, mapDispatchToProps)(Users);\n","/home/muneeb/dev/diamond-tiles-frontend/src/jsx/helpers/getSortingIcon.js",[],"/home/muneeb/dev/diamond-tiles-frontend/src/jsx/pages/purchase/ManagePurchase.js",["838","839","840","841","842","843","844","845","846","847"],"/home/muneeb/dev/diamond-tiles-frontend/src/store/salaries/actions.js",[],"/home/muneeb/dev/diamond-tiles-frontend/src/store/salaries/actionTypes.js",[],"/home/muneeb/dev/diamond-tiles-frontend/src/store/salaries/reducer.js",[],"/home/muneeb/dev/diamond-tiles-frontend/src/jsx/pages/salaries/AddNewSalary.js",["848","849","850","851","852"],"import ModalWrapper from 'jsx/components/ModalWrapper';\nimport React, { useEffect, useRef } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport CreatableSelect from 'jsx/components/CreatableSelect';\nimport { get, getV2, post, useAlert, useQuery } from 'jsx/helpers';\nimport Select from 'jsx/components/Select';\nimport { setEmployeesData, setEmployeesVisibility, setSalariesData, setSalariesVisibility } from 'store/actions';\nimport { useFormik } from 'formik';\nimport { QueryClient, useMutation, useQueryClient } from 'react-query';\nimport SpinnerOverlay from 'jsx/components/SpinnerOverlay';\nimport { When } from 'react-if';\n\nconst AddNewSalary = () => {\n   const state = useSelector((s) => s.salaries);\n   const dispatch = useDispatch();\n   const alert = useAlert();\n\n   const queryClient = useQueryClient();\n\n   const employees = useQuery('all-employees', () =>\n      getV2('/employees', { page: 1, limit: 1000, search: '', sort: { name: 1 } })\n   );\n\n   const mutation = useMutation((payload) => post('/salaries', payload), {\n      onSuccess: async () => {\n         await queryClient.invalidateQueries('salaries');\n         dispatch(setSalariesVisibility(false));\n      },\n      onError: (err) => {\n         alert.setErrorAlert({ message: 'Unable to add salary', err });\n      },\n   });\n\n   const formik = useFormik({\n      initialValues: {\n         employee: state.data.employee,\n         amount: state.data.amount ?? '',\n      },\n      onSubmit: (values, form) => {\n         const payload = { amount: values.amount, employee: values.employee?._id };\n         mutation.mutate(payload);\n         form.resetForm();\n         dispatch(setSalariesData({}));\n      },\n   });\n\n   useEffect(() => {\n      if (state.data.amount) formik.setFieldValue('amount', state.data.amount);\n   }, [state.visible]);\n\n   return (\n      <>\n         <ModalWrapper\n            show={state.visible}\n            onHide={() => {\n               dispatch(setSalariesVisibility(false));\n            }}\n            title=\"Add New Salary\"\n            isLoading={employees.isLoading || mutation.isLoading}\n            size=\"md\"\n            onSubmit={formik.handleSubmit}\n            submitButtonText=\"Save\"\n         >\n            <When condition={employees.isLoading || mutation.isLoading}>\n               <SpinnerOverlay />\n            </When>\n            {alert.getAlert()}\n            <form onSubmit={formik.handleSubmit}>\n               <div className=\"row\">\n                  <div className=\"form-group col-xl-12\">\n                     <label className=\"col-form-label\">Employee</label>\n                     <CreatableSelect\n                        width=\"tw-w-full\"\n                        onChange={(employee) => {\n                           formik.setFieldValue('employee', employee.value);\n                           formik.setFieldValue('amount', employee.value.salary);\n                        }}\n                        options={employees.data?.docs.map((employee) => ({ label: employee.name, value: employee }))}\n                        onCreateOption={(name) => {\n                           dispatch(setEmployeesData({ name }));\n                           dispatch(setEmployeesVisibility(true));\n                        }}\n                     />\n                  </div>\n                  <div className=\"form-group col-xl-12\">\n                     <label className=\"col-form-label\">Salary</label>\n                     <input\n                        className=\"form-control\"\n                        onChange={formik.handleChange}\n                        type=\"text\"\n                        name=\"amount\"\n                        value={formik.values.amount}\n                     />\n                  </div>\n               </div>\n            </form>\n         </ModalWrapper>\n      </>\n   );\n};\n\nexport default AddNewSalary;\n","/home/muneeb/dev/diamond-tiles-frontend/src/store/employees/reducer.js",[],"/home/muneeb/dev/diamond-tiles-frontend/src/store/employees/actionTypes.js",[],"/home/muneeb/dev/diamond-tiles-frontend/src/store/employees/actions.js",[],"/home/muneeb/dev/diamond-tiles-frontend/src/jsx/pages/employees/AddNewEmployee.js",["853","854","855","856","857","858"],"import ModalWrapper from 'jsx/components/ModalWrapper';\nimport React, { useEffect, useMemo, useRef } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport CreatableSelect from 'jsx/components/CreatableSelect';\nimport { get, getV2, patch, post, useAlert, useQuery } from 'jsx/helpers';\nimport Select from 'jsx/components/Select';\nimport { setEmployeesData, setEmployeesVisibility } from 'store/actions';\nimport { useFormik } from 'formik';\nimport { useMutation, useQueryClient } from 'react-query';\nimport { When } from 'react-if';\nimport SpinnerOverlay from 'jsx/components/SpinnerOverlay';\n\nconst AddNewEmployee = () => {\n   const state = useSelector((s) => s.employees);\n   const dispatch = useDispatch();\n   const alert = useAlert();\n   const queryClient = useQueryClient();\n   const nameRef = useRef();\n\n   const postMutation = useMutation((payload) => post('/employees', payload), {\n      onSuccess: async () => {\n         await queryClient.invalidateQueries('employees');\n         dispatch(setEmployeesVisibility(false));\n      },\n      onError: (err) => {\n         alert.setErrorAlert({ message: 'Unable to add employee', err });\n      },\n   });\n\n   const patchMutation = useMutation((payload) => patch(`/employees/id/${state.data._id}`, payload), {\n      onSuccess: async () => {\n         await queryClient.invalidateQueries('employees');\n         dispatch(setEmployeesVisibility(false));\n      },\n      onError: (err) => {\n         alert.setErrorAlert({ message: 'Unable to add employee', err });\n      },\n   });\n\n   const mutation = useMemo(\n      () => (state.data.name ? patchMutation : postMutation),\n      [patchMutation, postMutation, state.data.name]\n   );\n\n   const formik = useFormik({\n      initialValues: {\n         name: state.data.name ?? '',\n         phone: state.data.phone ?? '',\n         cnic: state.data.cnic ?? '',\n         address: state.data.address ?? '',\n         salary: state.data.salary ?? '',\n      },\n      onSubmit: (values, form) => {\n         mutation.mutate(values);\n         form.resetForm();\n         dispatch(setEmployeesData({}));\n      },\n   });\n\n   useEffect(() => {\n      if (state.visible) nameRef.current.focus();\n      if (state.data.name) formik.setFieldValue('name', state.data.name);\n      if (state.data.phone) formik.setFieldValue('phone', state.data.phone);\n      if (state.data.cnic) formik.setFieldValue('cnic', state.data.cnic);\n      if (state.data.address) formik.setFieldValue('address', state.data.address);\n      if (state.data.salary) formik.setFieldValue('salary', state.data.salary);\n   }, [state.visible]);\n\n   return (\n      <>\n         <ModalWrapper\n            show={state.visible}\n            onHide={() => {\n               dispatch(setEmployeesVisibility(false));\n               dispatch(setEmployeesData({}));\n            }}\n            title={`${state.data.name ? 'Edit' : 'Add New'} Employee`}\n            isLoading={postMutation.isLoading || patchMutation.isLoading}\n            size=\"md\"\n            onSubmit={formik.handleSubmit}\n            submitButtonText=\"Save\"\n         >\n            <When condition={postMutation.isLoading || patchMutation.isLoading}>\n               <SpinnerOverlay />\n            </When>\n            {alert.getAlert()}\n\n            <form onSubmit={formik.handleSubmit}>\n               <div className=\"row\">\n                  <div className=\"form-group col-xl-12\">\n                     <label className=\"col-form-label\">Name</label>\n                     <input\n                        ref={nameRef}\n                        className=\"form-control\"\n                        onChange={formik.handleChange}\n                        type=\"text\"\n                        name=\"name\"\n                        value={formik.values.name}\n                     />\n                  </div>\n               </div>\n               <div className=\"row\">\n                  <div className=\"form-group col-xl-12\">\n                     <label className=\"col-form-label\">Salary</label>\n                     <input\n                        className=\"form-control\"\n                        onChange={formik.handleChange}\n                        type=\"text\"\n                        name=\"salary\"\n                        value={formik.values.salary}\n                     />\n                  </div>\n               </div>\n               <div className=\"row\">\n                  <div className=\"form-group col-xl-12\">\n                     <label className=\"col-form-label\">Phone</label>\n                     <input\n                        className=\"form-control\"\n                        onChange={formik.handleChange}\n                        type=\"text\"\n                        name=\"phone\"\n                        value={formik.values.phone}\n                     />\n                  </div>\n               </div>\n               <div className=\"row\">\n                  <div className=\"form-group col-xl-12\">\n                     <label className=\"col-form-label\">CNIC</label>\n                     <input\n                        className=\"form-control\"\n                        onChange={formik.handleChange}\n                        type=\"text\"\n                        name=\"cnic\"\n                        value={formik.values.cnic}\n                     />\n                  </div>\n               </div>\n               <div className=\"row\">\n                  <div className=\"form-group col-xl-12\">\n                     <label className=\"col-form-label\">Address</label>\n                     <input\n                        className=\"form-control\"\n                        onChange={formik.handleChange}\n                        type=\"text\"\n                        name=\"address\"\n                        value={formik.values.address}\n                     />\n                  </div>\n               </div>\n            </form>\n         </ModalWrapper>\n      </>\n   );\n};\n\nexport default AddNewEmployee;\n","/home/muneeb/dev/diamond-tiles-frontend/src/jsx/pages/sale/MangeSales.js",["859","860","861","862","863","864","865","866","867","868","869","870","871","872"],"import dayjs from 'dayjs';\nimport relativeTime from 'dayjs/plugin/relativeTime';\nimport produce from 'immer';\nimport Button from 'jsx/components/Button';\nimport Pagination from 'jsx/components/Pagination';\nimport SpinnerOverlay from 'jsx/components/SpinnerOverlay';\nimport { del, get, getV2, useAlert, useMutation, useQuery } from 'jsx/helpers';\nimport { userRoles } from 'jsx/helpers/enums';\nimport getSortingIcon from 'jsx/helpers/getSortingIcon';\nimport PageTItle from 'jsx/layouts/PageTitle';\nimport _, { isArray } from 'lodash';\nimport React, { useEffect, useState } from 'react';\nimport { ButtonGroup, Card, Col, OverlayTrigger, Popover, Row, Table } from 'react-bootstrap';\nimport ReactDatePicker from 'react-datepicker';\nimport { AiFillDelete, AiFillEdit, AiFillEye, AiFillPlusCircle, AiOutlineQuestionCircle } from 'react-icons/ai';\nimport { FaSort, FaSortDown, FaSortUp } from 'react-icons/fa';\nimport { Else, If, Then, When } from 'react-if';\nimport { useQueryClient } from 'react-query';\nimport { connect } from 'react-redux';\nimport { useHistory } from 'react-router-dom';\nimport swal from 'sweetalert';\nimport ClearSale from './ClearSale';\nimport RefundSale from './RefundSale';\n\ndayjs.extend(relativeTime);\n\nconst getQuantity = (array) => {\n   if (array[0] > 0) return `${array[0]} Units`;\n   return `${array[1]} ${array[1] > 0 ? 'Singles' : ''}`;\n};\n\nconst MangeSales = ({ startDate, endDate, ...props }) => {\n   const [page, setPage] = useState(1);\n   const [limit, setLimit] = useState(5);\n   const [sort, setSort] = useState({ field: null, order: -1 });\n\n   const [refundPurchase, setRefundPurchase] = useState(null);\n\n   const [clearSale, setClearSale] = useState({ id: null, amount: null });\n\n   const queryClient = useQueryClient();\n\n   const history = useHistory();\n\n   const alert = useAlert();\n\n   const query = useQuery(['sales', page, limit, sort.field, sort.order, startDate, endDate], () =>\n      getV2('/sales', { page, limit, sort: { [sort.field]: sort.order }, startDate, endDate })\n   );\n\n   const deleteMutation = useMutation((id) => del(`/sales/id/${id}`), {\n      onSuccess: async () => {\n         await queryClient.invalidateQueries('sales');\n         alert.setAlert({\n            message: 'Sale deleted successfully',\n            variant: 'success',\n         });\n      },\n      onError: (err) => {\n         alert.setErrorAlert({ message: 'Unable to delete sale', err });\n      },\n   });\n\n   const handleSort = (key) => {\n      setSort((prev) => ({ field: key, order: prev.order * -1 }));\n   };\n   const handleOnClickDelete = (id) => {\n      swal({\n         title: 'Are you sure?',\n         text: 'Once deleted, you will not be able to recover it!',\n         icon: 'warning',\n         buttons: true,\n         dangerMode: true,\n      }).then((willDelete) => {\n         if (willDelete) {\n            deleteMutation.mutate(id);\n         }\n      });\n   };\n\n   const handleEdit = (id) => {\n      history.push({ pathname: `/sale/add`, state: { saleId: id } });\n   };\n\n   useEffect(() => {\n      if (page > query.data?.totalPages) {\n         setPage((prev) => prev - 1);\n      }\n   }, [page, query.data?.totalPages]);\n\n   return (\n      <>\n         <Card>\n            <When condition={query.isLoading || deleteMutation.isLoading}>\n               <SpinnerOverlay />\n            </When>\n            <Card.Header>\n               <Card.Title>Manage Sale</Card.Title>\n            </Card.Header>\n            <Card.Body>\n               <If condition={query.data?.totalDocs > 0}>\n                  <Then>\n                     <Table className=\"tw-relative\" responsive>\n                        <thead>\n                           <tr>\n                              <th className=\"width80\">\n                                 <strong>#</strong>\n                              </th>\n                              <th>\n                                 <strong>Supplier</strong>\n                              </th>\n                              <th>\n                                 <strong>Products</strong>\n                              </th>\n                              <th>\n                                 {getSortingIcon({\n                                    label: 'Price',\n                                    key: 'totalRetailPrice',\n                                    onSort: handleSort,\n                                    sort,\n                                 })}\n                              </th>\n                              <th>\n                                 {getSortingIcon({\n                                    label: 'Paid',\n                                    key: 'paid',\n                                    onSort: handleSort,\n                                    sort,\n                                 })}\n                              </th>\n                           </tr>\n                        </thead>\n                        <tbody>\n                           {query.data?.docs.map((e, index) => {\n                              const getId = () => {\n                                 const id = e._id;\n                                 return id.slice(id.length - 4);\n                              };\n\n                              const getProducts = () => {\n                                 const products = [];\n\n                                 e.products.forEach((d, i) => {\n                                    products.push(\n                                       <>\n                                          <b>{`${d.product.modelNumber}`}</b>\n                                          <br />\n                                          <span className=\"tw-mr-4\">{`BUY: ${d.sourcePrice} PKR`}</span>\n                                          <span>{`SELL: ${d.retailPrice} PKR`}</span>\n\n                                          {d.variants ? (\n                                             <>\n                                                <br />\n                                                {Object.entries(d.variants).map(([key, value]) => (\n                                                   <span className=\"tw-mr-4\">{`${key.toUpperCase()}: ${getQuantity(\n                                                      value\n                                                   )}`}</span>\n                                                ))}\n                                             </>\n                                          ) : (\n                                             <>\n                                                <br />\n                                                {getQuantity(d.quantity)}\n                                             </>\n                                          )}\n                                       </>\n                                    );\n                                    if (i < e.products.length - 1) products.push(<br />);\n                                 });\n\n                                 return products;\n                              };\n\n                              // getProducts();\n\n                              return (\n                                 <tr key={`${e._id}`} className={e.isRemaining && 'tw-bg-red-400 tw-text-gray-50'}>\n                                    <td>\n                                       <strong className={e.isRemaining && 'tw-text-gray-50'}>{getId()}</strong>\n                                    </td>\n                                    <td>{e.customer?.name}</td>\n                                    <td>{getProducts()}</td>\n                                    <td>{`${new Intl.NumberFormat('en-IN', {\n                                       maximumSignificantDigits: 3,\n                                    }).format(e.totalRetailPrice)} PKR`}</td>\n                                    <td>{`${new Intl.NumberFormat('en-IN', {\n                                       maximumSignificantDigits: 3,\n                                    }).format(e.paid)} PKR`}</td>\n\n                                    <td>\n                                       <div className=\"tw-flex tw-items-center tw-gap-4\">\n                                          <OverlayTrigger\n                                             trigger={['hover', 'hover']}\n                                             placement=\"top\"\n                                             overlay={\n                                                <Popover className=\"tw-border-gray-500\">\n                                                   <Popover.Content>\n                                                      {dayjs(e.createdAt).format('dddd[,] DD MMMM YYYY')}\n                                                   </Popover.Content>\n                                                </Popover>\n                                             }\n                                          >\n                                             <AiOutlineQuestionCircle className=\"tw-cursor-pointer\" />\n                                          </OverlayTrigger>\n                                          <ButtonGroup>\n                                             <When condition={props.user?.role !== userRoles.CASHIER}>\n                                                <Button\n                                                   variant=\"light\"\n                                                   size=\"sm\"\n                                                   icon={AiFillEdit}\n                                                   onClick={() => handleEdit(e._id)}\n                                                >\n                                                   Edit\n                                                </Button>\n                                                <Button\n                                                   variant=\"danger\"\n                                                   size=\"sm\"\n                                                   icon={AiFillDelete}\n                                                   onClick={() => handleOnClickDelete(e._id)}\n                                                >\n                                                   Delete\n                                                </Button>\n                                             </When>\n                                          </ButtonGroup>\n                                       </div>\n                                    </td>\n                                 </tr>\n                              );\n                           })}\n                        </tbody>\n                     </Table>\n                  </Then>\n                  <Else>\n                     <When condition={!query.isLoading}>\n                        <p className=\"tw-m-0\">No sales created</p>\n                     </When>\n                  </Else>\n               </If>\n            </Card.Body>\n         </Card>\n         <When condition={limit > 5 ? true : query.data?.totalPages > 1}>\n            <Pagination\n               page={page}\n               onPageChange={setPage}\n               onLimitChange={setLimit}\n               {..._.omit(query.data, ['docs'])}\n               isLimitDisabled={query.isLoading || deleteMutation.isLoading}\n            />\n         </When>\n         <RefundSale refundPurchase={refundPurchase} onClose={() => setRefundPurchase(null)} size=\"md\" />\n         <ClearSale\n            clearSale={clearSale.id}\n            initialAmount={clearSale.amount}\n            onClose={() => setClearSale((prev) => ({ ...prev, id: null }))}\n            size=\"md\"\n         />\n      </>\n   );\n};\n\nexport default MangeSales;\n","/home/muneeb/dev/diamond-tiles-frontend/src/store/inventories/actions.js",[],"/home/muneeb/dev/diamond-tiles-frontend/src/store/inventories/actionTypes.js",[],"/home/muneeb/dev/diamond-tiles-frontend/src/store/inventories/reducer.js",[],"/home/muneeb/dev/diamond-tiles-frontend/src/jsx/pages/inventory/AddNewInventory.js",["873","874","875","876","877"],"import ModalWrapper from 'jsx/components/ModalWrapper';\nimport React, { useEffect, useMemo, useRef } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport CreatableSelect from 'jsx/components/CreatableSelect';\nimport { get, getV2, patch, post, useAlert, useQuery } from 'jsx/helpers';\nimport Select from 'jsx/components/Select';\nimport { setInventoriesData, setInventoriesVisibility, setProductsData, setProductsVisibility } from 'store/actions';\nimport { useFormik } from 'formik';\nimport { QueryClient, useMutation, useQueryClient } from 'react-query';\nimport SpinnerOverlay from 'jsx/components/SpinnerOverlay';\nimport { Else, If, Then, When } from 'react-if';\nimport produce from 'immer';\n\nconst AddNewInventory = () => {\n   const state = useSelector((s) => s.inventories);\n   const dispatch = useDispatch();\n   const alert = useAlert();\n\n   const queryClient = useQueryClient();\n\n   const products = useQuery('all-products', () =>\n      getV2('/products', { page: 1, limit: 1000, sort: { modelNumber: 1 }, search: '' })\n   );\n\n   const postMutation = useMutation((payload) => post('/inventories', payload), {\n      onSuccess: async () => {\n         await queryClient.invalidateQueries('inventories');\n         dispatch(setInventoriesVisibility(false));\n         dispatch(setInventoriesData({}));\n      },\n      onError: (err) => {\n         alert.setErrorAlert({ message: 'Unable to add inventory', err });\n      },\n   });\n\n   const patchMutation = useMutation((payload) => patch('/inventories', payload), {\n      onSuccess: async () => {\n         await queryClient.invalidateQueries('inventories');\n         dispatch(setInventoriesVisibility(false));\n         dispatch(setInventoriesData({}));\n      },\n      onError: (err) => {\n         alert.setErrorAlert({ message: 'Unable to edit inventory', err });\n      },\n   });\n\n   const mutation = useMemo(\n      () => (state.data.product ? patchMutation : postMutation),\n      [patchMutation, postMutation, state.data.product]\n   );\n\n   const formik = useFormik({\n      initialValues: {\n         product: state.data.product,\n         quantity: state.data.quantity ?? '',\n         variants: {\n            a: state.data.variants?.a ?? '',\n            b: state.data.variants?.b ?? '',\n            c: state.data.variants?.c ?? '',\n            d: state.data.variants?.d ?? '',\n         },\n      },\n      onSubmit: (values, form) => {\n         const payload = { product: values.product._id };\n\n         const { variants, quantity } = values;\n\n         if (quantity) payload.quantity = quantity;\n         else {\n            const filteredVariants = {};\n            Object.entries(variants).forEach(([key, value]) => {\n               if (value) filteredVariants[key] = value;\n            });\n\n            if (Object.values(filteredVariants).length) payload.variants = filteredVariants;\n         }\n\n         mutation.mutate([payload]);\n         form.resetForm();\n      },\n   });\n\n   useEffect(() => {\n      if (state.data.product) formik.setFieldValue('product', state.data.product);\n      if (state.data.quantity) formik.setFieldValue('quantity', state.data.quantity);\n      if (state.data.variants) formik.setFieldValue('variants', state.data.variants);\n   }, [state.visible]);\n\n   const handleChangeVariantQuantity = (key, value) => {\n      const updatedValues = produce(formik.values, (draft) => {\n         draft.variants[key] = value;\n      });\n      formik.setValues(updatedValues);\n   };\n\n   return (\n      <>\n         <ModalWrapper\n            show={state.visible}\n            onHide={() => {\n               dispatch(setInventoriesVisibility(false));\n               dispatch(setInventoriesData({}));\n            }}\n            title={`${state.data.product ? 'Edit' : 'Add New'} Inventory`}\n            isLoading={products.isLoading || mutation.isLoading}\n            size=\"md\"\n            onSubmit={formik.handleSubmit}\n            submitButtonText=\"Save\"\n         >\n            <When condition={products.isLoading || mutation.isLoading}>\n               <SpinnerOverlay />\n            </When>\n            {alert.getAlert()}\n            <form onSubmit={formik.handleSubmit}>\n               <div className=\"row\">\n                  <div className=\"form-group col-xl-12\">\n                     <label className=\"col-form-label\">Product</label>\n                     <CreatableSelect\n                        defaultValue={\n                           state.data.product\n                              ? { label: state.data.product.modelNumber, value: state.data.product }\n                              : {}\n                        }\n                        onChange={(product) => formik.setFieldValue('product', product.value)}\n                        options={products.data?.docs.map((product) => ({ label: product.modelNumber, value: product }))}\n                        onCreateOption={(modelNumber) => {\n                           dispatch(setProductsData({ modelNumber }));\n                           dispatch(setProductsVisibility(true));\n                        }}\n                     />\n                  </div>\n                  <When condition={formik.values.product}>\n                     <If condition={formik.values.product?.type.title.toLowerCase() !== 'tile'}>\n                        <Then>\n                           <div className=\"form-group col-12\">\n                              <label className=\"col-form-label\">Quantity</label>\n                              <input\n                                 className=\"form-control\"\n                                 onChange={formik.handleChange}\n                                 type=\"text\"\n                                 name=\"quantity\"\n                                 value={formik.values.quantity}\n                              />\n                           </div>\n                        </Then>\n                        <Else>\n                           <div className=\"form-group col-xl-12\">\n                              <label className=\"col-form-label\">Quantity</label>\n                              <div className=\"row tw-mx-0\">\n                                 <div className=\"col-xl-3 tw-p-0\">\n                                    <input\n                                       className=\"form-control\"\n                                       onChange={(e) => handleChangeVariantQuantity('a', e.target.value)}\n                                       type=\"text\"\n                                       placeholder=\"A\"\n                                       value={formik.values.variants.a}\n                                    />\n                                 </div>\n                                 <div className=\"col-xl-3 tw-p-0\">\n                                    <input\n                                       className=\"form-control\"\n                                       onChange={(e) => handleChangeVariantQuantity('b', e.target.value)}\n                                       type=\"text\"\n                                       placeholder=\"B\"\n                                       value={formik.values.variants.b}\n                                    />\n                                 </div>\n                                 <div className=\"col-xl-3 tw-p-0\">\n                                    <input\n                                       className=\"form-control\"\n                                       onChange={(e) => handleChangeVariantQuantity('c', e.target.value)}\n                                       type=\"text\"\n                                       placeholder=\"C\"\n                                       value={formik.values.variants.c}\n                                    />\n                                 </div>\n                                 <div className=\"col-xl-3 tw-p-0\">\n                                    <input\n                                       className=\"form-control\"\n                                       onChange={(e) => handleChangeVariantQuantity('d', e.target.value)}\n                                       type=\"text\"\n                                       placeholder=\"D\"\n                                       value={formik.values.variants.d}\n                                    />\n                                 </div>\n                              </div>\n                           </div>\n                        </Else>\n                     </If>\n                  </When>\n               </div>\n            </form>\n         </ModalWrapper>\n      </>\n   );\n};\n\nexport default AddNewInventory;\n","/home/muneeb/dev/diamond-tiles-frontend/src/store/expenses/actions.js",[],"/home/muneeb/dev/diamond-tiles-frontend/src/store/expenses/actionTypes.js",[],"/home/muneeb/dev/diamond-tiles-frontend/src/store/expenses/reducer.js",[],"/home/muneeb/dev/diamond-tiles-frontend/src/jsx/pages/expenses/AddNewExpense.js",["878","879","880","881","882","883"],"import ModalWrapper from 'jsx/components/ModalWrapper';\nimport React, { useEffect, useRef } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport CreatableSelect from 'jsx/components/CreatableSelect';\nimport { get, getV2, post, useAlert, useQuery } from 'jsx/helpers';\nimport Select from 'jsx/components/Select';\nimport { setExpensesData, setExpensesVisibility } from 'store/actions';\nimport { useFormik } from 'formik';\nimport { useMutation, useQueryClient } from 'react-query';\nimport { When } from 'react-if';\nimport SpinnerOverlay from 'jsx/components/SpinnerOverlay';\n\nconst AddNewExpense = () => {\n   const state = useSelector((s) => s.expenses);\n   const dispatch = useDispatch();\n   const alert = useAlert();\n   const queryClient = useQueryClient();\n   const titleRef = useRef();\n\n   const mutation = useMutation((payload) => post('/expenses', payload), {\n      onSuccess: async () => {\n         await queryClient.invalidateQueries('expenses');\n         dispatch(setExpensesVisibility(false));\n      },\n      onError: (err) => {\n         alert.setErrorAlert({ message: 'Unable to add expense', err });\n      },\n   });\n\n   const formik = useFormik({\n      initialValues: {\n         title: state.data.title ?? '',\n         amount: state.data.amount ?? '',\n      },\n      onSubmit: (values, form) => {\n         mutation.mutate(values);\n         form.resetForm();\n         dispatch(setExpensesData({}));\n      },\n   });\n\n   useEffect(() => {\n      if (state.visible) titleRef.current.focus();\n      if (state.data.title) formik.setFieldValue('title', state.data.title);\n      if (state.data.amount) formik.setFieldValue('amount', state.data.amount);\n   }, [state.visible]);\n\n   return (\n      <>\n         <ModalWrapper\n            show={state.visible}\n            onHide={() => {\n               dispatch(setExpensesVisibility(false));\n            }}\n            title=\"Add New Expense\"\n            isLoading={mutation.isLoading}\n            size=\"md\"\n            onSubmit={formik.handleSubmit}\n            submitButtonText=\"Save\"\n         >\n            <When condition={mutation.isLoading}>\n               <SpinnerOverlay />\n            </When>\n            {alert.getAlert()}\n\n            <form onSubmit={formik.handleSubmit}>\n               <div className=\"row\">\n                  <div className=\"form-group col-xl-12\">\n                     <label className=\"col-form-label\">Title</label>\n                     <input\n                        ref={titleRef}\n                        className=\"form-control\"\n                        onChange={formik.handleChange}\n                        type=\"text\"\n                        name=\"title\"\n                        value={formik.values.title}\n                     />\n                  </div>\n                  <div className=\"form-group col-xl-12\">\n                     <label className=\"col-form-label\">Amount</label>\n                     <input\n                        className=\"form-control\"\n                        onChange={formik.handleChange}\n                        type=\"text\"\n                        name=\"amount\"\n                        value={formik.values.amount}\n                     />\n                  </div>\n               </div>\n            </form>\n         </ModalWrapper>\n      </>\n   );\n};\n\nexport default AddNewExpense;\n",{"ruleId":"884","replacedBy":"885"},{"ruleId":"886","replacedBy":"887"},{"ruleId":"888","replacedBy":"889"},{"ruleId":"890","replacedBy":"891"},{"ruleId":"892","replacedBy":"893"},{"ruleId":"894","severity":1,"message":"895","line":24,"column":8,"nodeType":"896","messageId":"897","endLine":24,"endColumn":14},{"ruleId":"898","severity":1,"message":"899","line":52,"column":26,"nodeType":"900","messageId":"901","endLine":52,"endColumn":61},{"ruleId":"902","severity":1,"message":"903","line":87,"column":28,"nodeType":"904","messageId":"905","endLine":87,"endColumn":38},{"ruleId":"894","severity":1,"message":"906","line":90,"column":28,"nodeType":"896","messageId":"897","endLine":90,"endColumn":40},{"ruleId":"894","severity":1,"message":"906","line":102,"column":28,"nodeType":"896","messageId":"897","endLine":102,"endColumn":40},{"ruleId":"894","severity":1,"message":"907","line":10,"column":29,"nodeType":"896","messageId":"897","endLine":10,"endColumn":34},{"ruleId":"894","severity":1,"message":"908","line":10,"column":36,"nodeType":"896","messageId":"897","endLine":10,"endColumn":50},{"ruleId":"894","severity":1,"message":"909","line":10,"column":52,"nodeType":"896","messageId":"897","endLine":10,"endColumn":59},{"ruleId":"894","severity":1,"message":"910","line":11,"column":39,"nodeType":"896","messageId":"897","endLine":11,"endColumn":62},{"ruleId":"894","severity":1,"message":"911","line":12,"column":10,"nodeType":"896","messageId":"897","endLine":12,"endColumn":16},{"ruleId":"894","severity":1,"message":"912","line":12,"column":18,"nodeType":"896","messageId":"897","endLine":12,"endColumn":28},{"ruleId":"894","severity":1,"message":"913","line":12,"column":30,"nodeType":"896","messageId":"897","endLine":12,"endColumn":38},{"ruleId":"894","severity":1,"message":"914","line":20,"column":21,"nodeType":"896","messageId":"897","endLine":20,"endColumn":32},{"ruleId":"894","severity":1,"message":"915","line":24,"column":11,"nodeType":"896","messageId":"897","endLine":24,"endColumn":15},{"ruleId":"894","severity":1,"message":"916","line":25,"column":19,"nodeType":"896","messageId":"897","endLine":25,"endColumn":28},{"ruleId":"894","severity":1,"message":"917","line":26,"column":10,"nodeType":"896","messageId":"897","endLine":26,"endColumn":30},{"ruleId":"894","severity":1,"message":"918","line":28,"column":21,"nodeType":"896","messageId":"897","endLine":28,"endColumn":32},{"ruleId":"894","severity":1,"message":"919","line":88,"column":10,"nodeType":"896","messageId":"897","endLine":88,"endColumn":20},{"ruleId":"920","severity":1,"message":"921","line":99,"column":7,"nodeType":"922","endLine":99,"endColumn":30,"suggestions":"923"},{"ruleId":"894","severity":1,"message":"924","line":21,"column":16,"nodeType":"896","messageId":"897","endLine":21,"endColumn":19},{"ruleId":"894","severity":1,"message":"925","line":24,"column":17,"nodeType":"896","messageId":"897","endLine":24,"endColumn":24},{"ruleId":"894","severity":1,"message":"926","line":25,"column":18,"nodeType":"896","messageId":"897","endLine":25,"endColumn":26},{"ruleId":"894","severity":1,"message":"927","line":26,"column":17,"nodeType":"896","messageId":"897","endLine":26,"endColumn":24},{"ruleId":"894","severity":1,"message":"916","line":27,"column":19,"nodeType":"896","messageId":"897","endLine":27,"endColumn":28},{"ruleId":"894","severity":1,"message":"918","line":30,"column":21,"nodeType":"896","messageId":"897","endLine":30,"endColumn":32},{"ruleId":"894","severity":1,"message":"928","line":3,"column":8,"nodeType":"896","messageId":"897","endLine":3,"endColumn":20},{"ruleId":"894","severity":1,"message":"929","line":7,"column":37,"nodeType":"896","messageId":"897","endLine":7,"endColumn":43},{"ruleId":"894","severity":1,"message":"907","line":8,"column":29,"nodeType":"896","messageId":"897","endLine":8,"endColumn":34},{"ruleId":"894","severity":1,"message":"930","line":10,"column":10,"nodeType":"896","messageId":"897","endLine":10,"endColumn":23},{"ruleId":"894","severity":1,"message":"931","line":10,"column":25,"nodeType":"896","messageId":"897","endLine":10,"endColumn":37},{"ruleId":"894","severity":1,"message":"932","line":18,"column":8,"nodeType":"896","messageId":"897","endLine":18,"endColumn":19},{"ruleId":"933","severity":1,"message":"934","line":38,"column":10,"nodeType":"904","messageId":"935","endLine":38,"endColumn":21},{"ruleId":"933","severity":1,"message":"934","line":61,"column":16,"nodeType":"904","messageId":"935","endLine":61,"endColumn":27},{"ruleId":"920","severity":1,"message":"936","line":78,"column":7,"nodeType":"922","endLine":78,"endColumn":9,"suggestions":"937"},{"ruleId":"933","severity":1,"message":"934","line":81,"column":7,"nodeType":"904","messageId":"935","endLine":81,"endColumn":18},{"ruleId":"920","severity":1,"message":"938","line":83,"column":7,"nodeType":"922","endLine":83,"endColumn":19,"suggestions":"939"},{"ruleId":"894","severity":1,"message":"940","line":163,"column":55,"nodeType":"896","messageId":"897","endLine":163,"endColumn":60},{"ruleId":"894","severity":1,"message":"928","line":3,"column":8,"nodeType":"896","messageId":"897","endLine":3,"endColumn":20},{"ruleId":"894","severity":1,"message":"941","line":5,"column":10,"nodeType":"896","messageId":"897","endLine":5,"endColumn":13},{"ruleId":"894","severity":1,"message":"929","line":7,"column":37,"nodeType":"896","messageId":"897","endLine":7,"endColumn":43},{"ruleId":"894","severity":1,"message":"907","line":8,"column":29,"nodeType":"896","messageId":"897","endLine":8,"endColumn":34},{"ruleId":"894","severity":1,"message":"930","line":10,"column":10,"nodeType":"896","messageId":"897","endLine":10,"endColumn":23},{"ruleId":"894","severity":1,"message":"931","line":10,"column":25,"nodeType":"896","messageId":"897","endLine":10,"endColumn":37},{"ruleId":"894","severity":1,"message":"942","line":18,"column":4,"nodeType":"896","messageId":"897","endLine":18,"endColumn":20},{"ruleId":"894","severity":1,"message":"943","line":19,"column":4,"nodeType":"896","messageId":"897","endLine":19,"endColumn":26},{"ruleId":"933","severity":1,"message":"934","line":46,"column":10,"nodeType":"904","messageId":"935","endLine":46,"endColumn":21},{"ruleId":"933","severity":1,"message":"934","line":69,"column":16,"nodeType":"904","messageId":"935","endLine":69,"endColumn":27},{"ruleId":"920","severity":1,"message":"944","line":86,"column":7,"nodeType":"922","endLine":86,"endColumn":9,"suggestions":"945"},{"ruleId":"920","severity":1,"message":"946","line":90,"column":7,"nodeType":"922","endLine":90,"endColumn":15,"suggestions":"947"},{"ruleId":"894","severity":1,"message":"948","line":14,"column":4,"nodeType":"896","messageId":"897","endLine":14,"endColumn":16},{"ruleId":"894","severity":1,"message":"949","line":15,"column":4,"nodeType":"896","messageId":"897","endLine":15,"endColumn":14},{"ruleId":"894","severity":1,"message":"950","line":16,"column":4,"nodeType":"896","messageId":"897","endLine":16,"endColumn":13},{"ruleId":"894","severity":1,"message":"951","line":17,"column":4,"nodeType":"896","messageId":"897","endLine":17,"endColumn":20},{"ruleId":"894","severity":1,"message":"926","line":29,"column":18,"nodeType":"896","messageId":"897","endLine":29,"endColumn":26},{"ruleId":"894","severity":1,"message":"952","line":50,"column":10,"nodeType":"896","messageId":"897","endLine":50,"endColumn":27},{"ruleId":"894","severity":1,"message":"953","line":54,"column":10,"nodeType":"896","messageId":"897","endLine":54,"endColumn":27},{"ruleId":"894","severity":1,"message":"954","line":57,"column":10,"nodeType":"896","messageId":"897","endLine":57,"endColumn":26},{"ruleId":"894","severity":1,"message":"955","line":1,"column":20,"nodeType":"896","messageId":"897","endLine":1,"endColumn":24},{"ruleId":"894","severity":1,"message":"956","line":7,"column":10,"nodeType":"896","messageId":"897","endLine":7,"endColumn":19},{"ruleId":"920","severity":1,"message":"957","line":49,"column":7,"nodeType":"922","endLine":49,"endColumn":9,"suggestions":"958"},{"ruleId":"894","severity":1,"message":"959","line":151,"column":28,"nodeType":"896","messageId":"897","endLine":151,"endColumn":32},{"ruleId":"894","severity":1,"message":"960","line":26,"column":21,"nodeType":"896","messageId":"897","endLine":26,"endColumn":32},{"ruleId":"894","severity":1,"message":"918","line":29,"column":21,"nodeType":"896","messageId":"897","endLine":29,"endColumn":32},{"ruleId":"894","severity":1,"message":"916","line":33,"column":19,"nodeType":"896","messageId":"897","endLine":33,"endColumn":28},{"ruleId":"920","severity":1,"message":"961","line":39,"column":7,"nodeType":"922","endLine":39,"endColumn":22,"suggestions":"962"},{"ruleId":"920","severity":1,"message":"921","line":103,"column":7,"nodeType":"922","endLine":103,"endColumn":30,"suggestions":"963"},{"ruleId":"894","severity":1,"message":"940","line":319,"column":66,"nodeType":"896","messageId":"897","endLine":319,"endColumn":71},{"ruleId":"894","severity":1,"message":"950","line":16,"column":27,"nodeType":"896","messageId":"897","endLine":16,"endColumn":36},{"ruleId":"894","severity":1,"message":"964","line":30,"column":21,"nodeType":"896","messageId":"897","endLine":30,"endColumn":32},{"ruleId":"894","severity":1,"message":"965","line":31,"column":22,"nodeType":"896","messageId":"897","endLine":31,"endColumn":34},{"ruleId":"894","severity":1,"message":"966","line":32,"column":21,"nodeType":"896","messageId":"897","endLine":32,"endColumn":32},{"ruleId":"894","severity":1,"message":"918","line":37,"column":21,"nodeType":"896","messageId":"897","endLine":37,"endColumn":32},{"ruleId":"920","severity":1,"message":"961","line":45,"column":7,"nodeType":"922","endLine":45,"endColumn":22,"suggestions":"967"},{"ruleId":"933","severity":1,"message":"934","line":122,"column":10,"nodeType":"904","messageId":"935","endLine":122,"endColumn":21},{"ruleId":"933","severity":1,"message":"934","line":132,"column":4,"nodeType":"904","messageId":"935","endLine":132,"endColumn":15},{"ruleId":"920","severity":1,"message":"921","line":152,"column":7,"nodeType":"922","endLine":152,"endColumn":39,"suggestions":"968"},{"ruleId":"894","severity":1,"message":"969","line":3,"column":8,"nodeType":"896","messageId":"897","endLine":3,"endColumn":20},{"ruleId":"894","severity":1,"message":"918","line":25,"column":21,"nodeType":"896","messageId":"897","endLine":25,"endColumn":32},{"ruleId":"920","severity":1,"message":"961","line":30,"column":7,"nodeType":"922","endLine":30,"endColumn":22,"suggestions":"970"},{"ruleId":"894","severity":1,"message":"971","line":36,"column":11,"nodeType":"896","messageId":"897","endLine":36,"endColumn":16},{"ruleId":"920","severity":1,"message":"921","line":97,"column":7,"nodeType":"922","endLine":97,"endColumn":30,"suggestions":"972"},{"ruleId":"894","severity":1,"message":"940","line":304,"column":77,"nodeType":"896","messageId":"897","endLine":304,"endColumn":82},{"ruleId":"894","severity":1,"message":"950","line":12,"column":36,"nodeType":"896","messageId":"897","endLine":12,"endColumn":45},{"ruleId":"894","severity":1,"message":"973","line":23,"column":10,"nodeType":"896","messageId":"897","endLine":23,"endColumn":17},{"ruleId":"894","severity":1,"message":"974","line":3,"column":8,"nodeType":"896","messageId":"897","endLine":3,"endColumn":13},{"ruleId":"894","severity":1,"message":"969","line":4,"column":8,"nodeType":"896","messageId":"897","endLine":4,"endColumn":20},{"ruleId":"894","severity":1,"message":"941","line":9,"column":15,"nodeType":"896","messageId":"897","endLine":9,"endColumn":18},{"ruleId":"894","severity":1,"message":"975","line":13,"column":13,"nodeType":"896","messageId":"897","endLine":13,"endColumn":20},{"ruleId":"894","severity":1,"message":"908","line":16,"column":34,"nodeType":"896","messageId":"897","endLine":16,"endColumn":48},{"ruleId":"894","severity":1,"message":"909","line":16,"column":50,"nodeType":"896","messageId":"897","endLine":16,"endColumn":57},{"ruleId":"894","severity":1,"message":"976","line":17,"column":8,"nodeType":"896","messageId":"897","endLine":17,"endColumn":23},{"ruleId":"894","severity":1,"message":"910","line":18,"column":54,"nodeType":"896","messageId":"897","endLine":18,"endColumn":77},{"ruleId":"894","severity":1,"message":"973","line":28,"column":10,"nodeType":"896","messageId":"897","endLine":28,"endColumn":17},{"ruleId":"894","severity":1,"message":"977","line":2,"column":10,"nodeType":"896","messageId":"897","endLine":2,"endColumn":18},{"ruleId":"894","severity":1,"message":"907","line":2,"column":20,"nodeType":"896","messageId":"897","endLine":2,"endColumn":25},{"ruleId":"894","severity":1,"message":"978","line":2,"column":27,"nodeType":"896","messageId":"897","endLine":2,"endColumn":38},{"ruleId":"894","severity":1,"message":"950","line":5,"column":10,"nodeType":"896","messageId":"897","endLine":5,"endColumn":19},{"ruleId":"894","severity":1,"message":"979","line":6,"column":10,"nodeType":"896","messageId":"897","endLine":6,"endColumn":17},{"ruleId":"894","severity":1,"message":"980","line":4,"column":10,"nodeType":"896","messageId":"897","endLine":4,"endColumn":26},{"ruleId":"894","severity":1,"message":"981","line":5,"column":8,"nodeType":"896","messageId":"897","endLine":5,"endColumn":14},{"ruleId":"894","severity":1,"message":"956","line":9,"column":10,"nodeType":"896","messageId":"897","endLine":9,"endColumn":19},{"ruleId":"894","severity":1,"message":"978","line":13,"column":10,"nodeType":"896","messageId":"897","endLine":13,"endColumn":21},{"ruleId":"894","severity":1,"message":"948","line":15,"column":4,"nodeType":"896","messageId":"897","endLine":15,"endColumn":16},{"ruleId":"894","severity":1,"message":"949","line":16,"column":4,"nodeType":"896","messageId":"897","endLine":16,"endColumn":14},{"ruleId":"894","severity":1,"message":"950","line":17,"column":4,"nodeType":"896","messageId":"897","endLine":17,"endColumn":13},{"ruleId":"894","severity":1,"message":"951","line":18,"column":4,"nodeType":"896","messageId":"897","endLine":18,"endColumn":20},{"ruleId":"894","severity":1,"message":"982","line":19,"column":4,"nodeType":"896","messageId":"897","endLine":19,"endColumn":18},{"ruleId":"894","severity":1,"message":"983","line":28,"column":17,"nodeType":"896","messageId":"897","endLine":28,"endColumn":22},{"ruleId":"894","severity":1,"message":"973","line":30,"column":10,"nodeType":"896","messageId":"897","endLine":30,"endColumn":17},{"ruleId":"894","severity":1,"message":"916","line":34,"column":19,"nodeType":"896","messageId":"897","endLine":34,"endColumn":28},{"ruleId":"894","severity":1,"message":"984","line":38,"column":10,"nodeType":"896","messageId":"897","endLine":38,"endColumn":21},{"ruleId":"894","severity":1,"message":"940","line":170,"column":62,"nodeType":"896","messageId":"897","endLine":170,"endColumn":67},{"ruleId":"920","severity":1,"message":"985","line":32,"column":7,"nodeType":"922","endLine":32,"endColumn":14,"suggestions":"986"},{"ruleId":"894","severity":1,"message":"987","line":62,"column":26,"nodeType":"896","messageId":"897","endLine":62,"endColumn":31},{"ruleId":"894","severity":1,"message":"949","line":14,"column":24,"nodeType":"896","messageId":"897","endLine":14,"endColumn":34},{"ruleId":"894","severity":1,"message":"950","line":14,"column":36,"nodeType":"896","messageId":"897","endLine":14,"endColumn":45},{"ruleId":"894","severity":1,"message":"911","line":15,"column":10,"nodeType":"896","messageId":"897","endLine":15,"endColumn":16},{"ruleId":"894","severity":1,"message":"912","line":15,"column":18,"nodeType":"896","messageId":"897","endLine":15,"endColumn":28},{"ruleId":"894","severity":1,"message":"913","line":15,"column":30,"nodeType":"896","messageId":"897","endLine":15,"endColumn":38},{"ruleId":"894","severity":1,"message":"988","line":22,"column":8,"nodeType":"896","messageId":"897","endLine":22,"endColumn":20},{"ruleId":"894","severity":1,"message":"954","line":57,"column":10,"nodeType":"896","messageId":"897","endLine":57,"endColumn":26},{"ruleId":"894","severity":1,"message":"950","line":9,"column":36,"nodeType":"896","messageId":"897","endLine":9,"endColumn":45},{"ruleId":"894","severity":1,"message":"953","line":58,"column":10,"nodeType":"896","messageId":"897","endLine":58,"endColumn":27},{"ruleId":"894","severity":1,"message":"908","line":11,"column":34,"nodeType":"896","messageId":"897","endLine":11,"endColumn":48},{"ruleId":"894","severity":1,"message":"909","line":11,"column":50,"nodeType":"896","messageId":"897","endLine":11,"endColumn":57},{"ruleId":"894","severity":1,"message":"949","line":12,"column":24,"nodeType":"896","messageId":"897","endLine":12,"endColumn":34},{"ruleId":"894","severity":1,"message":"950","line":12,"column":36,"nodeType":"896","messageId":"897","endLine":12,"endColumn":45},{"ruleId":"894","severity":1,"message":"910","line":12,"column":65,"nodeType":"896","messageId":"897","endLine":12,"endColumn":88},{"ruleId":"894","severity":1,"message":"989","line":18,"column":32,"nodeType":"896","messageId":"897","endLine":18,"endColumn":43},{"ruleId":"894","severity":1,"message":"928","line":20,"column":8,"nodeType":"896","messageId":"897","endLine":20,"endColumn":20},{"ruleId":"894","severity":1,"message":"973","line":28,"column":10,"nodeType":"896","messageId":"897","endLine":28,"endColumn":17},{"ruleId":"894","severity":1,"message":"974","line":1,"column":8,"nodeType":"896","messageId":"897","endLine":1,"endColumn":13},{"ruleId":"894","severity":1,"message":"969","line":2,"column":8,"nodeType":"896","messageId":"897","endLine":2,"endColumn":20},{"ruleId":"894","severity":1,"message":"990","line":3,"column":8,"nodeType":"896","messageId":"897","endLine":3,"endColumn":15},{"ruleId":"894","severity":1,"message":"991","line":5,"column":8,"nodeType":"896","messageId":"897","endLine":5,"endColumn":18},{"ruleId":"894","severity":1,"message":"992","line":6,"column":8,"nodeType":"896","messageId":"897","endLine":6,"endColumn":22},{"ruleId":"894","severity":1,"message":"993","line":7,"column":10,"nodeType":"896","messageId":"897","endLine":7,"endColumn":13},{"ruleId":"894","severity":1,"message":"941","line":7,"column":15,"nodeType":"896","messageId":"897","endLine":7,"endColumn":18},{"ruleId":"894","severity":1,"message":"994","line":7,"column":20,"nodeType":"896","messageId":"897","endLine":7,"endColumn":25},{"ruleId":"894","severity":1,"message":"995","line":7,"column":37,"nodeType":"896","messageId":"897","endLine":7,"endColumn":48},{"ruleId":"894","severity":1,"message":"996","line":7,"column":50,"nodeType":"896","messageId":"897","endLine":7,"endColumn":58},{"ruleId":"894","severity":1,"message":"956","line":8,"column":10,"nodeType":"896","messageId":"897","endLine":8,"endColumn":19},{"ruleId":"894","severity":1,"message":"997","line":9,"column":8,"nodeType":"896","messageId":"897","endLine":9,"endColumn":22},{"ruleId":"894","severity":1,"message":"998","line":11,"column":8,"nodeType":"896","messageId":"897","endLine":11,"endColumn":9},{"ruleId":"894","severity":1,"message":"975","line":11,"column":13,"nodeType":"896","messageId":"897","endLine":11,"endColumn":20},{"ruleId":"894","severity":1,"message":"999","line":12,"column":17,"nodeType":"896","messageId":"897","endLine":12,"endColumn":26},{"ruleId":"894","severity":1,"message":"978","line":13,"column":10,"nodeType":"896","messageId":"897","endLine":13,"endColumn":21},{"ruleId":"894","severity":1,"message":"1000","line":13,"column":23,"nodeType":"896","messageId":"897","endLine":13,"endColumn":27},{"ruleId":"894","severity":1,"message":"908","line":13,"column":34,"nodeType":"896","messageId":"897","endLine":13,"endColumn":48},{"ruleId":"894","severity":1,"message":"909","line":13,"column":50,"nodeType":"896","messageId":"897","endLine":13,"endColumn":57},{"ruleId":"894","severity":1,"message":"907","line":13,"column":64,"nodeType":"896","messageId":"897","endLine":13,"endColumn":69},{"ruleId":"894","severity":1,"message":"948","line":15,"column":10,"nodeType":"896","messageId":"897","endLine":15,"endColumn":22},{"ruleId":"894","severity":1,"message":"949","line":15,"column":24,"nodeType":"896","messageId":"897","endLine":15,"endColumn":34},{"ruleId":"894","severity":1,"message":"950","line":15,"column":36,"nodeType":"896","messageId":"897","endLine":15,"endColumn":45},{"ruleId":"894","severity":1,"message":"910","line":15,"column":65,"nodeType":"896","messageId":"897","endLine":15,"endColumn":88},{"ruleId":"894","severity":1,"message":"911","line":16,"column":10,"nodeType":"896","messageId":"897","endLine":16,"endColumn":16},{"ruleId":"894","severity":1,"message":"912","line":16,"column":18,"nodeType":"896","messageId":"897","endLine":16,"endColumn":28},{"ruleId":"894","severity":1,"message":"913","line":16,"column":30,"nodeType":"896","messageId":"897","endLine":16,"endColumn":38},{"ruleId":"894","severity":1,"message":"1001","line":17,"column":10,"nodeType":"896","messageId":"897","endLine":17,"endColumn":14},{"ruleId":"894","severity":1,"message":"1002","line":17,"column":16,"nodeType":"896","messageId":"897","endLine":17,"endColumn":18},{"ruleId":"894","severity":1,"message":"1003","line":17,"column":20,"nodeType":"896","messageId":"897","endLine":17,"endColumn":24},{"ruleId":"894","severity":1,"message":"1004","line":17,"column":26,"nodeType":"896","messageId":"897","endLine":17,"endColumn":30},{"ruleId":"894","severity":1,"message":"1005","line":18,"column":10,"nodeType":"896","messageId":"897","endLine":18,"endColumn":24},{"ruleId":"894","severity":1,"message":"1006","line":21,"column":8,"nodeType":"896","messageId":"897","endLine":21,"endColumn":12},{"ruleId":"894","severity":1,"message":"1007","line":22,"column":8,"nodeType":"896","messageId":"897","endLine":22,"endColumn":17},{"ruleId":"894","severity":1,"message":"1008","line":23,"column":8,"nodeType":"896","messageId":"897","endLine":23,"endColumn":18},{"ruleId":"894","severity":1,"message":"983","line":26,"column":15,"nodeType":"896","messageId":"897","endLine":26,"endColumn":20},{"ruleId":"894","severity":1,"message":"990","line":3,"column":8,"nodeType":"896","messageId":"897","endLine":3,"endColumn":15},{"ruleId":"894","severity":1,"message":"991","line":5,"column":8,"nodeType":"896","messageId":"897","endLine":5,"endColumn":18},{"ruleId":"894","severity":1,"message":"992","line":6,"column":8,"nodeType":"896","messageId":"897","endLine":6,"endColumn":22},{"ruleId":"894","severity":1,"message":"993","line":7,"column":10,"nodeType":"896","messageId":"897","endLine":7,"endColumn":13},{"ruleId":"894","severity":1,"message":"941","line":7,"column":15,"nodeType":"896","messageId":"897","endLine":7,"endColumn":18},{"ruleId":"894","severity":1,"message":"1009","line":7,"column":20,"nodeType":"896","messageId":"897","endLine":7,"endColumn":28},{"ruleId":"894","severity":1,"message":"995","line":7,"column":30,"nodeType":"896","messageId":"897","endLine":7,"endColumn":41},{"ruleId":"894","severity":1,"message":"996","line":7,"column":43,"nodeType":"896","messageId":"897","endLine":7,"endColumn":51},{"ruleId":"894","severity":1,"message":"956","line":8,"column":10,"nodeType":"896","messageId":"897","endLine":8,"endColumn":19},{"ruleId":"894","severity":1,"message":"1010","line":9,"column":8,"nodeType":"896","messageId":"897","endLine":9,"endColumn":19},{"ruleId":"894","severity":1,"message":"998","line":11,"column":8,"nodeType":"896","messageId":"897","endLine":11,"endColumn":9},{"ruleId":"894","severity":1,"message":"975","line":11,"column":13,"nodeType":"896","messageId":"897","endLine":11,"endColumn":20},{"ruleId":"894","severity":1,"message":"999","line":12,"column":17,"nodeType":"896","messageId":"897","endLine":12,"endColumn":26},{"ruleId":"894","severity":1,"message":"978","line":13,"column":10,"nodeType":"896","messageId":"897","endLine":13,"endColumn":21},{"ruleId":"894","severity":1,"message":"1000","line":13,"column":23,"nodeType":"896","messageId":"897","endLine":13,"endColumn":27},{"ruleId":"894","severity":1,"message":"1011","line":13,"column":29,"nodeType":"896","messageId":"897","endLine":13,"endColumn":32},{"ruleId":"894","severity":1,"message":"908","line":13,"column":34,"nodeType":"896","messageId":"897","endLine":13,"endColumn":48},{"ruleId":"894","severity":1,"message":"909","line":13,"column":50,"nodeType":"896","messageId":"897","endLine":13,"endColumn":57},{"ruleId":"894","severity":1,"message":"1012","line":13,"column":59,"nodeType":"896","messageId":"897","endLine":13,"endColumn":62},{"ruleId":"894","severity":1,"message":"907","line":13,"column":64,"nodeType":"896","messageId":"897","endLine":13,"endColumn":69},{"ruleId":"894","severity":1,"message":"948","line":14,"column":10,"nodeType":"896","messageId":"897","endLine":14,"endColumn":22},{"ruleId":"894","severity":1,"message":"949","line":14,"column":24,"nodeType":"896","messageId":"897","endLine":14,"endColumn":34},{"ruleId":"894","severity":1,"message":"950","line":14,"column":36,"nodeType":"896","messageId":"897","endLine":14,"endColumn":45},{"ruleId":"894","severity":1,"message":"910","line":14,"column":65,"nodeType":"896","messageId":"897","endLine":14,"endColumn":88},{"ruleId":"894","severity":1,"message":"911","line":15,"column":10,"nodeType":"896","messageId":"897","endLine":15,"endColumn":16},{"ruleId":"894","severity":1,"message":"912","line":15,"column":18,"nodeType":"896","messageId":"897","endLine":15,"endColumn":28},{"ruleId":"894","severity":1,"message":"913","line":15,"column":30,"nodeType":"896","messageId":"897","endLine":15,"endColumn":38},{"ruleId":"894","severity":1,"message":"1001","line":16,"column":10,"nodeType":"896","messageId":"897","endLine":16,"endColumn":14},{"ruleId":"894","severity":1,"message":"1002","line":16,"column":16,"nodeType":"896","messageId":"897","endLine":16,"endColumn":18},{"ruleId":"894","severity":1,"message":"1003","line":16,"column":20,"nodeType":"896","messageId":"897","endLine":16,"endColumn":24},{"ruleId":"894","severity":1,"message":"1004","line":16,"column":26,"nodeType":"896","messageId":"897","endLine":16,"endColumn":30},{"ruleId":"894","severity":1,"message":"1005","line":17,"column":10,"nodeType":"896","messageId":"897","endLine":17,"endColumn":24},{"ruleId":"894","severity":1,"message":"1006","line":20,"column":8,"nodeType":"896","messageId":"897","endLine":20,"endColumn":12},{"ruleId":"894","severity":1,"message":"997","line":21,"column":8,"nodeType":"896","messageId":"897","endLine":21,"endColumn":22},{"ruleId":"894","severity":1,"message":"1013","line":23,"column":8,"nodeType":"896","messageId":"897","endLine":23,"endColumn":21},{"ruleId":"894","severity":1,"message":"1014","line":24,"column":8,"nodeType":"896","messageId":"897","endLine":24,"endColumn":22},{"ruleId":"894","severity":1,"message":"950","line":13,"column":36,"nodeType":"896","messageId":"897","endLine":13,"endColumn":45},{"ruleId":"894","severity":1,"message":"953","line":59,"column":10,"nodeType":"896","messageId":"897","endLine":59,"endColumn":27},{"ruleId":"894","severity":1,"message":"987","line":14,"column":31,"nodeType":"896","messageId":"897","endLine":14,"endColumn":36},{"ruleId":"894","severity":1,"message":"987","line":18,"column":21,"nodeType":"896","messageId":"897","endLine":18,"endColumn":26},{"ruleId":"933","severity":1,"message":"934","line":13,"column":7,"nodeType":"904","messageId":"935","endLine":13,"endColumn":18},{"ruleId":"894","severity":1,"message":"987","line":17,"column":31,"nodeType":"896","messageId":"897","endLine":17,"endColumn":36},{"ruleId":"894","severity":1,"message":"987","line":22,"column":21,"nodeType":"896","messageId":"897","endLine":22,"endColumn":26},{"ruleId":"894","severity":1,"message":"1015","line":46,"column":7,"nodeType":"896","messageId":"897","endLine":46,"endColumn":19},{"ruleId":"894","severity":1,"message":"1016","line":73,"column":4,"nodeType":"896","messageId":"897","endLine":73,"endColumn":15},{"ruleId":"884","replacedBy":"1017"},{"ruleId":"886","replacedBy":"1018"},{"ruleId":"888","replacedBy":"1019"},{"ruleId":"890","replacedBy":"1020"},{"ruleId":"892","replacedBy":"1021"},{"ruleId":"894","severity":1,"message":"911","line":11,"column":10,"nodeType":"896","messageId":"897","endLine":11,"endColumn":16},{"ruleId":"894","severity":1,"message":"912","line":11,"column":18,"nodeType":"896","messageId":"897","endLine":11,"endColumn":28},{"ruleId":"894","severity":1,"message":"913","line":11,"column":30,"nodeType":"896","messageId":"897","endLine":11,"endColumn":38},{"ruleId":"933","severity":1,"message":"934","line":44,"column":10,"nodeType":"904","messageId":"935","endLine":44,"endColumn":21},{"ruleId":"933","severity":1,"message":"934","line":46,"column":10,"nodeType":"904","messageId":"935","endLine":46,"endColumn":21},{"ruleId":"894","severity":1,"message":"928","line":5,"column":8,"nodeType":"896","messageId":"897","endLine":5,"endColumn":20},{"ruleId":"894","severity":1,"message":"1022","line":8,"column":8,"nodeType":"896","messageId":"897","endLine":8,"endColumn":17},{"ruleId":"894","severity":1,"message":"999","line":9,"column":17,"nodeType":"896","messageId":"897","endLine":9,"endColumn":26},{"ruleId":"894","severity":1,"message":"978","line":10,"column":10,"nodeType":"896","messageId":"897","endLine":10,"endColumn":21},{"ruleId":"894","severity":1,"message":"908","line":10,"column":34,"nodeType":"896","messageId":"897","endLine":10,"endColumn":48},{"ruleId":"894","severity":1,"message":"909","line":10,"column":50,"nodeType":"896","messageId":"897","endLine":10,"endColumn":57},{"ruleId":"894","severity":1,"message":"910","line":11,"column":42,"nodeType":"896","messageId":"897","endLine":11,"endColumn":65},{"ruleId":"894","severity":1,"message":"950","line":11,"column":67,"nodeType":"896","messageId":"897","endLine":11,"endColumn":76},{"ruleId":"894","severity":1,"message":"1023","line":16,"column":10,"nodeType":"896","messageId":"897","endLine":16,"endColumn":19},{"ruleId":"894","severity":1,"message":"1024","line":20,"column":8,"nodeType":"896","messageId":"897","endLine":20,"endColumn":23},{"ruleId":"894","severity":1,"message":"973","line":23,"column":10,"nodeType":"896","messageId":"897","endLine":23,"endColumn":17},{"ruleId":"894","severity":1,"message":"925","line":25,"column":17,"nodeType":"896","messageId":"897","endLine":25,"endColumn":24},{"ruleId":"894","severity":1,"message":"926","line":26,"column":18,"nodeType":"896","messageId":"897","endLine":26,"endColumn":26},{"ruleId":"894","severity":1,"message":"916","line":28,"column":19,"nodeType":"896","messageId":"897","endLine":28,"endColumn":28},{"ruleId":"894","severity":1,"message":"1025","line":30,"column":11,"nodeType":"896","messageId":"897","endLine":30,"endColumn":20},{"ruleId":"894","severity":1,"message":"1026","line":31,"column":11,"nodeType":"896","messageId":"897","endLine":31,"endColumn":22},{"ruleId":"894","severity":1,"message":"1027","line":31,"column":24,"nodeType":"896","messageId":"897","endLine":31,"endColumn":38},{"ruleId":"894","severity":1,"message":"1028","line":40,"column":10,"nodeType":"896","messageId":"897","endLine":40,"endColumn":18},{"ruleId":"894","severity":1,"message":"1029","line":64,"column":10,"nodeType":"896","messageId":"897","endLine":64,"endColumn":26},{"ruleId":"894","severity":1,"message":"1030","line":70,"column":10,"nodeType":"896","messageId":"897","endLine":70,"endColumn":15},{"ruleId":"894","severity":1,"message":"1031","line":71,"column":10,"nodeType":"896","messageId":"897","endLine":71,"endColumn":18},{"ruleId":"894","severity":1,"message":"928","line":5,"column":8,"nodeType":"896","messageId":"897","endLine":5,"endColumn":20},{"ruleId":"894","severity":1,"message":"978","line":9,"column":10,"nodeType":"896","messageId":"897","endLine":9,"endColumn":21},{"ruleId":"894","severity":1,"message":"908","line":9,"column":34,"nodeType":"896","messageId":"897","endLine":9,"endColumn":48},{"ruleId":"894","severity":1,"message":"909","line":9,"column":50,"nodeType":"896","messageId":"897","endLine":9,"endColumn":57},{"ruleId":"894","severity":1,"message":"950","line":10,"column":24,"nodeType":"896","messageId":"897","endLine":10,"endColumn":33},{"ruleId":"894","severity":1,"message":"910","line":10,"column":53,"nodeType":"896","messageId":"897","endLine":10,"endColumn":76},{"ruleId":"894","severity":1,"message":"918","line":22,"column":21,"nodeType":"896","messageId":"897","endLine":22,"endColumn":32},{"ruleId":"894","severity":1,"message":"925","line":24,"column":17,"nodeType":"896","messageId":"897","endLine":24,"endColumn":24},{"ruleId":"894","severity":1,"message":"926","line":25,"column":18,"nodeType":"896","messageId":"897","endLine":25,"endColumn":26},{"ruleId":"894","severity":1,"message":"916","line":26,"column":19,"nodeType":"896","messageId":"897","endLine":26,"endColumn":28},{"ruleId":"894","severity":1,"message":"1025","line":27,"column":11,"nodeType":"896","messageId":"897","endLine":27,"endColumn":20},{"ruleId":"894","severity":1,"message":"1032","line":28,"column":18,"nodeType":"896","messageId":"897","endLine":28,"endColumn":26},{"ruleId":"894","severity":1,"message":"953","line":83,"column":10,"nodeType":"896","messageId":"897","endLine":83,"endColumn":27},{"ruleId":"894","severity":1,"message":"1033","line":87,"column":10,"nodeType":"896","messageId":"897","endLine":87,"endColumn":22},{"ruleId":"894","severity":1,"message":"1034","line":5,"column":8,"nodeType":"896","messageId":"897","endLine":5,"endColumn":15},{"ruleId":"894","severity":1,"message":"925","line":20,"column":17,"nodeType":"896","messageId":"897","endLine":20,"endColumn":24},{"ruleId":"894","severity":1,"message":"926","line":21,"column":18,"nodeType":"896","messageId":"897","endLine":21,"endColumn":26},{"ruleId":"894","severity":1,"message":"1004","line":3,"column":10,"nodeType":"896","messageId":"897","endLine":3,"endColumn":14},{"ruleId":"933","severity":1,"message":"934","line":6,"column":15,"nodeType":"904","messageId":"935","endLine":6,"endColumn":28},{"ruleId":"894","severity":1,"message":"1035","line":4,"column":8,"nodeType":"896","messageId":"897","endLine":4,"endColumn":24},{"ruleId":"894","severity":1,"message":"1036","line":7,"column":8,"nodeType":"896","messageId":"897","endLine":7,"endColumn":12},{"ruleId":"894","severity":1,"message":"1037","line":8,"column":8,"nodeType":"896","messageId":"897","endLine":8,"endColumn":16},{"ruleId":"894","severity":1,"message":"1038","line":22,"column":19,"nodeType":"896","messageId":"897","endLine":22,"endColumn":25},{"ruleId":"894","severity":1,"message":"1039","line":22,"column":55,"nodeType":"896","messageId":"897","endLine":22,"endColumn":69},{"ruleId":"894","severity":1,"message":"1040","line":22,"column":71,"nodeType":"896","messageId":"897","endLine":22,"endColumn":76},{"ruleId":"894","severity":1,"message":"1041","line":26,"column":10,"nodeType":"896","messageId":"897","endLine":26,"endColumn":18},{"ruleId":"920","severity":1,"message":"1042","line":41,"column":7,"nodeType":"922","endLine":41,"endColumn":9,"suggestions":"1043"},{"ruleId":"894","severity":1,"message":"987","line":96,"column":26,"nodeType":"896","messageId":"897","endLine":96,"endColumn":31},{"ruleId":"902","severity":1,"message":"903","line":30,"column":17,"nodeType":"904","messageId":"905","endLine":30,"endColumn":36},{"ruleId":"902","severity":1,"message":"903","line":55,"column":33,"nodeType":"904","messageId":"905","endLine":55,"endColumn":43},{"ruleId":"902","severity":1,"message":"903","line":87,"column":39,"nodeType":"904","messageId":"905","endLine":87,"endColumn":49},{"ruleId":"933","severity":1,"message":"934","line":9,"column":7,"nodeType":"904","messageId":"935","endLine":9,"endColumn":18},{"ruleId":"902","severity":1,"message":"903","line":9,"column":19,"nodeType":"904","messageId":"905","endLine":9,"endColumn":40},{"ruleId":"902","severity":1,"message":"903","line":30,"column":58,"nodeType":"904","messageId":"905","endLine":30,"endColumn":79},{"ruleId":"902","severity":1,"message":"903","line":46,"column":20,"nodeType":"904","messageId":"905","endLine":46,"endColumn":36},{"ruleId":"902","severity":1,"message":"903","line":47,"column":22,"nodeType":"904","messageId":"905","endLine":47,"endColumn":38},{"ruleId":"902","severity":1,"message":"903","line":68,"column":40,"nodeType":"904","messageId":"905","endLine":68,"endColumn":56},{"ruleId":"902","severity":1,"message":"903","line":76,"column":40,"nodeType":"904","messageId":"905","endLine":76,"endColumn":56},{"ruleId":"902","severity":1,"message":"903","line":84,"column":40,"nodeType":"904","messageId":"905","endLine":84,"endColumn":56},{"ruleId":"902","severity":1,"message":"903","line":105,"column":44,"nodeType":"904","messageId":"905","endLine":105,"endColumn":63},{"ruleId":"902","severity":1,"message":"903","line":110,"column":22,"nodeType":"904","messageId":"905","endLine":110,"endColumn":37},{"ruleId":"902","severity":1,"message":"903","line":111,"column":28,"nodeType":"904","messageId":"905","endLine":111,"endColumn":49},{"ruleId":"884","replacedBy":"1044"},{"ruleId":"886","replacedBy":"1045"},{"ruleId":"888","replacedBy":"1046"},{"ruleId":"890","replacedBy":"1047"},{"ruleId":"892","replacedBy":"1048"},{"ruleId":"902","severity":1,"message":"903","line":29,"column":58,"nodeType":"904","messageId":"905","endLine":29,"endColumn":79},{"ruleId":"902","severity":1,"message":"903","line":46,"column":20,"nodeType":"904","messageId":"905","endLine":46,"endColumn":36},{"ruleId":"902","severity":1,"message":"903","line":47,"column":22,"nodeType":"904","messageId":"905","endLine":47,"endColumn":38},{"ruleId":"902","severity":1,"message":"903","line":69,"column":40,"nodeType":"904","messageId":"905","endLine":69,"endColumn":56},{"ruleId":"902","severity":1,"message":"903","line":77,"column":40,"nodeType":"904","messageId":"905","endLine":77,"endColumn":56},{"ruleId":"902","severity":1,"message":"903","line":85,"column":40,"nodeType":"904","messageId":"905","endLine":85,"endColumn":56},{"ruleId":"902","severity":1,"message":"903","line":106,"column":44,"nodeType":"904","messageId":"905","endLine":106,"endColumn":63},{"ruleId":"902","severity":1,"message":"903","line":111,"column":22,"nodeType":"904","messageId":"905","endLine":111,"endColumn":37},{"ruleId":"902","severity":1,"message":"903","line":112,"column":28,"nodeType":"904","messageId":"905","endLine":112,"endColumn":49},{"ruleId":"894","severity":1,"message":"1049","line":3,"column":8,"nodeType":"896","messageId":"897","endLine":3,"endColumn":14},{"ruleId":"894","severity":1,"message":"992","line":4,"column":8,"nodeType":"896","messageId":"897","endLine":4,"endColumn":22},{"ruleId":"894","severity":1,"message":"941","line":5,"column":10,"nodeType":"896","messageId":"897","endLine":5,"endColumn":13},{"ruleId":"894","severity":1,"message":"975","line":6,"column":13,"nodeType":"896","messageId":"897","endLine":6,"endColumn":20},{"ruleId":"894","severity":1,"message":"1050","line":8,"column":15,"nodeType":"896","messageId":"897","endLine":8,"endColumn":19},{"ruleId":"894","severity":1,"message":"1004","line":9,"column":10,"nodeType":"896","messageId":"897","endLine":9,"endColumn":14},{"ruleId":"894","severity":1,"message":"1051","line":11,"column":10,"nodeType":"896","messageId":"897","endLine":11,"endColumn":20},{"ruleId":"933","severity":1,"message":"934","line":94,"column":10,"nodeType":"904","messageId":"935","endLine":94,"endColumn":21},{"ruleId":"920","severity":1,"message":"1052","line":97,"column":7,"nodeType":"922","endLine":97,"endColumn":23,"suggestions":"1053"},{"ruleId":"894","severity":1,"message":"1054","line":1,"column":10,"nodeType":"896","messageId":"897","endLine":1,"endColumn":18},{"ruleId":"894","severity":1,"message":"1049","line":2,"column":8,"nodeType":"896","messageId":"897","endLine":2,"endColumn":14},{"ruleId":"894","severity":1,"message":"941","line":4,"column":10,"nodeType":"896","messageId":"897","endLine":4,"endColumn":13},{"ruleId":"894","severity":1,"message":"1055","line":4,"column":21,"nodeType":"896","messageId":"897","endLine":4,"endColumn":24},{"ruleId":"894","severity":1,"message":"996","line":4,"column":36,"nodeType":"896","messageId":"897","endLine":4,"endColumn":44},{"ruleId":"894","severity":1,"message":"975","line":5,"column":10,"nodeType":"896","messageId":"897","endLine":5,"endColumn":17},{"ruleId":"894","severity":1,"message":"1049","line":2,"column":8,"nodeType":"896","messageId":"897","endLine":2,"endColumn":14},{"ruleId":"894","severity":1,"message":"975","line":5,"column":10,"nodeType":"896","messageId":"897","endLine":5,"endColumn":17},{"ruleId":"894","severity":1,"message":"1051","line":10,"column":10,"nodeType":"896","messageId":"897","endLine":10,"endColumn":20},{"ruleId":"894","severity":1,"message":"1056","line":12,"column":7,"nodeType":"896","messageId":"897","endLine":12,"endColumn":20},{"ruleId":"894","severity":1,"message":"1057","line":19,"column":20,"nodeType":"896","messageId":"897","endLine":19,"endColumn":30},{"ruleId":"933","severity":1,"message":"934","line":34,"column":7,"nodeType":"904","messageId":"935","endLine":34,"endColumn":18},{"ruleId":"933","severity":1,"message":"934","line":35,"column":7,"nodeType":"904","messageId":"935","endLine":35,"endColumn":18},{"ruleId":"920","severity":1,"message":"1058","line":59,"column":7,"nodeType":"922","endLine":59,"endColumn":19,"suggestions":"1059"},{"ruleId":"894","severity":1,"message":"941","line":5,"column":10,"nodeType":"896","messageId":"897","endLine":5,"endColumn":13},{"ruleId":"894","severity":1,"message":"1049","line":6,"column":8,"nodeType":"896","messageId":"897","endLine":6,"endColumn":14},{"ruleId":"894","severity":1,"message":"1060","line":16,"column":10,"nodeType":"896","messageId":"897","endLine":16,"endColumn":21},{"ruleId":"920","severity":1,"message":"1061","line":59,"column":7,"nodeType":"922","endLine":59,"endColumn":22,"suggestions":"1062"},{"ruleId":"894","severity":1,"message":"1024","line":4,"column":8,"nodeType":"896","messageId":"897","endLine":4,"endColumn":23},{"ruleId":"894","severity":1,"message":"941","line":5,"column":10,"nodeType":"896","messageId":"897","endLine":5,"endColumn":13},{"ruleId":"894","severity":1,"message":"994","line":5,"column":15,"nodeType":"896","messageId":"897","endLine":5,"endColumn":20},{"ruleId":"894","severity":1,"message":"996","line":5,"column":38,"nodeType":"896","messageId":"897","endLine":5,"endColumn":46},{"ruleId":"894","severity":1,"message":"1049","line":6,"column":8,"nodeType":"896","messageId":"897","endLine":6,"endColumn":14},{"ruleId":"920","severity":1,"message":"1063","line":44,"column":7,"nodeType":"922","endLine":44,"endColumn":22,"suggestions":"1064"},{"ruleId":"894","severity":1,"message":"941","line":5,"column":10,"nodeType":"896","messageId":"897","endLine":5,"endColumn":13},{"ruleId":"894","severity":1,"message":"1049","line":6,"column":8,"nodeType":"896","messageId":"897","endLine":6,"endColumn":14},{"ruleId":"920","severity":1,"message":"1065","line":50,"column":7,"nodeType":"922","endLine":50,"endColumn":22,"suggestions":"1066"},{"ruleId":"894","severity":1,"message":"1024","line":4,"column":8,"nodeType":"896","messageId":"897","endLine":4,"endColumn":23},{"ruleId":"894","severity":1,"message":"941","line":5,"column":10,"nodeType":"896","messageId":"897","endLine":5,"endColumn":13},{"ruleId":"894","severity":1,"message":"994","line":5,"column":15,"nodeType":"896","messageId":"897","endLine":5,"endColumn":20},{"ruleId":"894","severity":1,"message":"996","line":5,"column":45,"nodeType":"896","messageId":"897","endLine":5,"endColumn":53},{"ruleId":"894","severity":1,"message":"1049","line":6,"column":8,"nodeType":"896","messageId":"897","endLine":6,"endColumn":14},{"ruleId":"894","severity":1,"message":"1067","line":8,"column":4,"nodeType":"896","messageId":"897","endLine":8,"endColumn":16},{"ruleId":"894","severity":1,"message":"1068","line":9,"column":4,"nodeType":"896","messageId":"897","endLine":9,"endColumn":9},{"ruleId":"894","severity":1,"message":"1069","line":10,"column":4,"nodeType":"896","messageId":"897","endLine":10,"endColumn":43},{"ruleId":"920","severity":1,"message":"1070","line":69,"column":7,"nodeType":"922","endLine":69,"endColumn":22,"suggestions":"1071"},{"ruleId":"894","severity":1,"message":"1049","line":2,"column":8,"nodeType":"896","messageId":"897","endLine":2,"endColumn":14},{"ruleId":"894","severity":1,"message":"941","line":4,"column":10,"nodeType":"896","messageId":"897","endLine":4,"endColumn":13},{"ruleId":"894","severity":1,"message":"1055","line":4,"column":21,"nodeType":"896","messageId":"897","endLine":4,"endColumn":24},{"ruleId":"894","severity":1,"message":"996","line":4,"column":36,"nodeType":"896","messageId":"897","endLine":4,"endColumn":44},{"ruleId":"894","severity":1,"message":"975","line":5,"column":10,"nodeType":"896","messageId":"897","endLine":5,"endColumn":17},{"ruleId":"894","severity":1,"message":"1024","line":4,"column":8,"nodeType":"896","messageId":"897","endLine":4,"endColumn":23},{"ruleId":"894","severity":1,"message":"941","line":5,"column":10,"nodeType":"896","messageId":"897","endLine":5,"endColumn":13},{"ruleId":"894","severity":1,"message":"994","line":5,"column":15,"nodeType":"896","messageId":"897","endLine":5,"endColumn":20},{"ruleId":"894","severity":1,"message":"996","line":5,"column":45,"nodeType":"896","messageId":"897","endLine":5,"endColumn":53},{"ruleId":"894","severity":1,"message":"1049","line":6,"column":8,"nodeType":"896","messageId":"897","endLine":6,"endColumn":14},{"ruleId":"920","severity":1,"message":"1072","line":61,"column":7,"nodeType":"922","endLine":61,"endColumn":22,"suggestions":"1073"},{"ruleId":"894","severity":1,"message":"941","line":4,"column":15,"nodeType":"896","messageId":"897","endLine":4,"endColumn":18},{"ruleId":"894","severity":1,"message":"909","line":8,"column":46,"nodeType":"896","messageId":"897","endLine":8,"endColumn":53},{"ruleId":"894","severity":1,"message":"908","line":8,"column":55,"nodeType":"896","messageId":"897","endLine":8,"endColumn":69},{"ruleId":"894","severity":1,"message":"950","line":9,"column":36,"nodeType":"896","messageId":"897","endLine":9,"endColumn":45},{"ruleId":"894","severity":1,"message":"951","line":9,"column":47,"nodeType":"896","messageId":"897","endLine":9,"endColumn":63},{"ruleId":"894","severity":1,"message":"910","line":9,"column":65,"nodeType":"896","messageId":"897","endLine":9,"endColumn":88},{"ruleId":"894","severity":1,"message":"911","line":16,"column":10,"nodeType":"896","messageId":"897","endLine":16,"endColumn":16},{"ruleId":"894","severity":1,"message":"912","line":16,"column":18,"nodeType":"896","messageId":"897","endLine":16,"endColumn":28},{"ruleId":"894","severity":1,"message":"913","line":16,"column":30,"nodeType":"896","messageId":"897","endLine":16,"endColumn":38},{"ruleId":"894","severity":1,"message":"956","line":19,"column":10,"nodeType":"896","messageId":"897","endLine":19,"endColumn":19},{"ruleId":"894","severity":1,"message":"1074","line":20,"column":8,"nodeType":"896","messageId":"897","endLine":20,"endColumn":11},{"ruleId":"894","severity":1,"message":"1007","line":22,"column":8,"nodeType":"896","messageId":"897","endLine":22,"endColumn":17},{"ruleId":"894","severity":1,"message":"973","line":26,"column":10,"nodeType":"896","messageId":"897","endLine":26,"endColumn":17},{"ruleId":"894","severity":1,"message":"927","line":29,"column":17,"nodeType":"896","messageId":"897","endLine":29,"endColumn":24},{"ruleId":"933","severity":1,"message":"934","line":83,"column":7,"nodeType":"904","messageId":"935","endLine":83,"endColumn":18},{"ruleId":"902","severity":1,"message":"1075","line":158,"column":44,"nodeType":"904","messageId":"905","endLine":158,"endColumn":54},{"ruleId":"894","severity":1,"message":"969","line":2,"column":8,"nodeType":"896","messageId":"897","endLine":2,"endColumn":20},{"ruleId":"894","severity":1,"message":"990","line":3,"column":8,"nodeType":"896","messageId":"897","endLine":3,"endColumn":15},{"ruleId":"894","severity":1,"message":"941","line":7,"column":15,"nodeType":"896","messageId":"897","endLine":7,"endColumn":18},{"ruleId":"894","severity":1,"message":"1022","line":10,"column":8,"nodeType":"896","messageId":"897","endLine":10,"endColumn":17},{"ruleId":"894","severity":1,"message":"975","line":11,"column":13,"nodeType":"896","messageId":"897","endLine":11,"endColumn":20},{"ruleId":"894","severity":1,"message":"950","line":14,"column":36,"nodeType":"896","messageId":"897","endLine":14,"endColumn":45},{"ruleId":"894","severity":1,"message":"951","line":14,"column":47,"nodeType":"896","messageId":"897","endLine":14,"endColumn":63},{"ruleId":"894","severity":1,"message":"911","line":15,"column":10,"nodeType":"896","messageId":"897","endLine":15,"endColumn":16},{"ruleId":"894","severity":1,"message":"912","line":15,"column":18,"nodeType":"896","messageId":"897","endLine":15,"endColumn":28},{"ruleId":"894","severity":1,"message":"913","line":15,"column":30,"nodeType":"896","messageId":"897","endLine":15,"endColumn":38},{"ruleId":"894","severity":1,"message":"929","line":2,"column":28,"nodeType":"896","messageId":"897","endLine":2,"endColumn":34},{"ruleId":"894","severity":1,"message":"941","line":5,"column":10,"nodeType":"896","messageId":"897","endLine":5,"endColumn":13},{"ruleId":"894","severity":1,"message":"1049","line":6,"column":8,"nodeType":"896","messageId":"897","endLine":6,"endColumn":14},{"ruleId":"894","severity":1,"message":"1060","line":9,"column":10,"nodeType":"896","messageId":"897","endLine":9,"endColumn":21},{"ruleId":"920","severity":1,"message":"1076","line":49,"column":7,"nodeType":"922","endLine":49,"endColumn":22,"suggestions":"1077"},{"ruleId":"894","severity":1,"message":"1024","line":4,"column":8,"nodeType":"896","messageId":"897","endLine":4,"endColumn":23},{"ruleId":"894","severity":1,"message":"941","line":5,"column":10,"nodeType":"896","messageId":"897","endLine":5,"endColumn":13},{"ruleId":"894","severity":1,"message":"994","line":5,"column":15,"nodeType":"896","messageId":"897","endLine":5,"endColumn":20},{"ruleId":"894","severity":1,"message":"996","line":5,"column":45,"nodeType":"896","messageId":"897","endLine":5,"endColumn":53},{"ruleId":"894","severity":1,"message":"1049","line":6,"column":8,"nodeType":"896","messageId":"897","endLine":6,"endColumn":14},{"ruleId":"920","severity":1,"message":"1078","line":67,"column":7,"nodeType":"922","endLine":67,"endColumn":22,"suggestions":"1079"},{"ruleId":"894","severity":1,"message":"990","line":3,"column":8,"nodeType":"896","messageId":"897","endLine":3,"endColumn":15},{"ruleId":"894","severity":1,"message":"941","line":7,"column":15,"nodeType":"896","messageId":"897","endLine":7,"endColumn":18},{"ruleId":"894","severity":1,"message":"1022","line":10,"column":8,"nodeType":"896","messageId":"897","endLine":10,"endColumn":17},{"ruleId":"894","severity":1,"message":"975","line":11,"column":13,"nodeType":"896","messageId":"897","endLine":11,"endColumn":20},{"ruleId":"894","severity":1,"message":"1011","line":13,"column":29,"nodeType":"896","messageId":"897","endLine":13,"endColumn":32},{"ruleId":"894","severity":1,"message":"1012","line":13,"column":59,"nodeType":"896","messageId":"897","endLine":13,"endColumn":62},{"ruleId":"894","severity":1,"message":"976","line":14,"column":8,"nodeType":"896","messageId":"897","endLine":14,"endColumn":23},{"ruleId":"894","severity":1,"message":"950","line":15,"column":36,"nodeType":"896","messageId":"897","endLine":15,"endColumn":45},{"ruleId":"894","severity":1,"message":"951","line":15,"column":47,"nodeType":"896","messageId":"897","endLine":15,"endColumn":63},{"ruleId":"894","severity":1,"message":"911","line":16,"column":10,"nodeType":"896","messageId":"897","endLine":16,"endColumn":16},{"ruleId":"894","severity":1,"message":"912","line":16,"column":18,"nodeType":"896","messageId":"897","endLine":16,"endColumn":28},{"ruleId":"894","severity":1,"message":"913","line":16,"column":30,"nodeType":"896","messageId":"897","endLine":16,"endColumn":38},{"ruleId":"894","severity":1,"message":"979","line":19,"column":10,"nodeType":"896","messageId":"897","endLine":19,"endColumn":17},{"ruleId":"894","severity":1,"message":"940","line":134,"column":54,"nodeType":"896","messageId":"897","endLine":134,"endColumn":59},{"ruleId":"894","severity":1,"message":"929","line":2,"column":37,"nodeType":"896","messageId":"897","endLine":2,"endColumn":43},{"ruleId":"894","severity":1,"message":"941","line":5,"column":10,"nodeType":"896","messageId":"897","endLine":5,"endColumn":13},{"ruleId":"894","severity":1,"message":"1049","line":6,"column":8,"nodeType":"896","messageId":"897","endLine":6,"endColumn":14},{"ruleId":"894","severity":1,"message":"1060","line":9,"column":10,"nodeType":"896","messageId":"897","endLine":9,"endColumn":21},{"ruleId":"920","severity":1,"message":"1080","line":87,"column":7,"nodeType":"922","endLine":87,"endColumn":22,"suggestions":"1081"},{"ruleId":"894","severity":1,"message":"1024","line":4,"column":8,"nodeType":"896","messageId":"897","endLine":4,"endColumn":23},{"ruleId":"894","severity":1,"message":"941","line":5,"column":10,"nodeType":"896","messageId":"897","endLine":5,"endColumn":13},{"ruleId":"894","severity":1,"message":"994","line":5,"column":15,"nodeType":"896","messageId":"897","endLine":5,"endColumn":20},{"ruleId":"894","severity":1,"message":"996","line":5,"column":38,"nodeType":"896","messageId":"897","endLine":5,"endColumn":46},{"ruleId":"894","severity":1,"message":"1049","line":6,"column":8,"nodeType":"896","messageId":"897","endLine":6,"endColumn":14},{"ruleId":"920","severity":1,"message":"1082","line":46,"column":7,"nodeType":"922","endLine":46,"endColumn":22,"suggestions":"1083"},"lines-around-directive",["1084"],"global-require",[],"no-buffer-constructor",[],"no-new-require",[],"no-path-concat",[],"no-unused-vars","'Khaata' is defined but never used.","Identifier","unusedVar","react/display-name","Component definition is missing display name","ArrowFunctionExpression","noDisplayName","react/destructuring-assignment","Must use destructuring props assignment","MemberExpression","useDestructAssignment","'getComponent' is assigned a value but never used.","'Table' is defined but never used.","'OverlayTrigger' is defined but never used.","'Popover' is defined but never used.","'AiOutlineQuestionCircle' is defined but never used.","'FaSort' is defined but never used.","'FaSortDown' is defined but never used.","'FaSortUp' is defined but never used.","'setEmployee' is assigned a value but never used.","'sort' is assigned a value but never used.","'setSearch' is assigned a value but never used.","'debouncedSearchValue' is assigned a value but never used.","'setUrlState' is assigned a value but never used.","'handleSort' is assigned a value but never used.","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'formik'. Either include it or remove the dependency array.","ArrayExpression",["1085"],"'res' is assigned a value but never used.","'setPage' is assigned a value but never used.","'setLimit' is assigned a value but never used.","'setSort' is assigned a value but never used.","'ModalWrapper' is defined but never used.","'useRef' is defined but never used.","'FaMinusCircle' is defined but never used.","'FaPlusCircle' is defined but never used.","'QueryString' is defined but never used.","no-console","Unexpected console statement.","unexpected","React Hook useEffect has a missing dependency: 'location.state?.purchaseId'. Either include it or remove the dependency array.",["1086"],"React Hook useEffect has a missing dependency: 'existingPurchase'. Either include it or remove the dependency array.",["1087"],"'index' is defined but never used. Allowed unused args must match /res|next|^err/u.","'get' is defined but never used.","'setSuppliersData' is defined but never used.","'setSuppliersVisibility' is defined but never used.","React Hook useEffect has a missing dependency: 'location.state?.saleId'. Either include it or remove the dependency array.",["1088"],"React Hook useEffect has a missing dependency: 'existingSale'. Either include it or remove the dependency array.",["1089"],"'AiFillDelete' is defined but never used.","'AiFillEdit' is defined but never used.","'AiFillEye' is defined but never used.","'AiFillPlusCircle' is defined but never used.","'handleOnClickEdit' is assigned a value but never used.","'handleOnClickView' is assigned a value but never used.","'handleOnClickAdd' is assigned a value but never used.","'post' is defined but never used.","'userRoles' is defined but never used.","React Hook useEffect has missing dependencies: 'alert', 'history', and 'props'. Either include them or remove the dependency array. However, 'props' will change when *any* prop changes, so the preferred fix is to destructure the 'props' object outside of the useEffect call and refer to those specific props inside useEffect.",["1090"],"'auth' is defined but never used. Allowed unused args must match /res|next|^err/u.","'setCustomer' is assigned a value but never used.","React Hook useMemo has a missing dependency: 'props.user?.role'. Either include it or remove the dependency array.",["1091"],["1092"],"'setSalePage' is assigned a value but never used.","'setSaleLimit' is assigned a value but never used.","'setSaleSort' is assigned a value but never used.",["1093"],["1094"],"'relativeTime' is defined but never used.",["1095"],"'limit' is assigned a value but never used.",["1096"],"'history' is assigned a value but never used.","'dayjs' is defined but never used.","'isArray' is defined but never used.","'ReactDatePicker' is defined but never used.","'Dropdown' is defined but never used.","'ButtonGroup' is defined but never used.","'connect' is defined but never used.","'getActiveElement' is defined but never used.","'Button' is defined but never used.","'AiOutlineClear' is defined but never used.","'props' is defined but never used. Allowed unused args must match /res|next|^err/u.","'queryClient' is assigned a value but never used.","React Hook useEffect has a missing dependency: 'getUserProfile'. Either include it or remove the dependency array.",["1097"],"'state' is defined but never used. Allowed unused args must match /res|next|^err/u.","'ExpenseTypes' is defined but never used.","'useSelector' is defined but never used.","'produce' is defined but never used.","'Pagination' is defined but never used.","'SpinnerOverlay' is defined but never used.","'del' is defined but never used.","'getV2' is defined but never used.","'useMutation' is defined but never used.","'useQuery' is defined but never used.","'getSortingIcon' is defined but never used.","'_' is defined but never used.","'useEffect' is defined but never used.","'Card' is defined but never used.","'Else' is defined but never used.","'If' is defined but never used.","'Then' is defined but never used.","'When' is defined but never used.","'useQueryClient' is defined but never used.","'swal' is defined but never used.","'ClearSale' is defined but never used.","'RefundSale' is defined but never used.","'useAlert' is defined but never used.","'getQuantity' is defined but never used.","'Col' is defined but never used.","'Row' is defined but never used.","'ClearPurchase' is defined but never used.","'RefundPurchase' is defined but never used.","'EllipsisPage' is assigned a value but never used.","'hasPrevPage' is defined but never used. Allowed unused args must match /res|next|^err/u.",["1084"],[],[],[],[],"'PageTItle' is defined but never used.","'useFormik' is defined but never used.","'CreatableSelect' is defined but never used.","'showModal' is assigned a value but never used.","'selectedRow' is assigned a value but never used.","'setSelectedRow' is assigned a value but never used.","'getTypes' is assigned a value but never used.","'postTypeMutation' is assigned a value but never used.","'isAdd' is assigned a value but never used.","'mutation' is assigned a value but never used.","'setTitle' is assigned a value but never used.","'handleSubmit' is assigned a value but never used.","'ChatBox' is defined but never used.","'PerfectScrollbar' is defined but never used.","'logo' is defined but never used.","'logoText' is defined but never used.","'onNote' is defined but never used. Allowed unused args must match /res|next|^err/u.","'onNotification' is defined but never used. Allowed unused args must match /res|next|^err/u.","'onBox' is defined but never used. Allowed unused args must match /res|next|^err/u.","'dispatch' is assigned a value but never used.","React Hook React.useEffect has missing dependencies: 'history' and 'logout'. Either include them or remove the dependency array. If 'logout' changes too often, find the parent component that defines it and wrap that definition in useCallback.",["1098"],["1084"],[],[],[],[],"'Select' is defined but never used.","'Form' is defined but never used.","'useHistory' is defined but never used.","React Hook useEffect has a missing dependency: 'purchase'. Either include it or remove the dependency array.",["1099"],"'Fragment' is defined but never used.","'put' is defined but never used.","'initialValues' is assigned a value but never used.","'setIsError' is assigned a value but never used.","React Hook useEffect has a missing dependency: 'inventory'. Either include it or remove the dependency array.",["1100"],"'QueryClient' is defined but never used.","React Hook useEffect has missing dependencies: 'formik' and 'state.data.modelNumber'. Either include them or remove the dependency array.",["1101"],"React Hook useEffect has missing dependencies: 'formik' and 'state.data.title'. Either include them or remove the dependency array.",["1102"],"React Hook useEffect has missing dependencies: 'formik', 'state.data.title', 'state.data.type', and 'state.data.value'. Either include them or remove the dependency array.",["1103"],"'setTypesData' is defined but never used.","'setSu' is defined but never used.","'setSuppliersVisibilityppliersVisibility' is defined but never used.","React Hook useEffect has missing dependencies: 'formik', 'state.data.company', 'state.data.name', and 'state.data.phone'. Either include them or remove the dependency array.",["1104"],"React Hook useEffect has missing dependencies: 'formik', 'state.data.name', and 'state.data.phone'. Either include them or remove the dependency array.",["1105"],"'cls' is defined but never used.","Must use destructuring p assignment","React Hook useEffect has missing dependencies: 'formik' and 'state.data.amount'. Either include them or remove the dependency array.",["1106"],"React Hook useEffect has missing dependencies: 'formik', 'state.data.address', 'state.data.cnic', 'state.data.name', 'state.data.phone', and 'state.data.salary'. Either include them or remove the dependency array.",["1107"],"React Hook useEffect has missing dependencies: 'formik', 'state.data.product', 'state.data.quantity', and 'state.data.variants'. Either include them or remove the dependency array.",["1108"],"React Hook useEffect has missing dependencies: 'formik', 'state.data.amount', and 'state.data.title'. Either include them or remove the dependency array.",["1109"],"padding-line-between-statements",{"desc":"1110","fix":"1111"},{"desc":"1112","fix":"1113"},{"desc":"1114","fix":"1115"},{"desc":"1116","fix":"1117"},{"desc":"1118","fix":"1119"},{"desc":"1120","fix":"1121"},{"desc":"1122","fix":"1123"},{"desc":"1110","fix":"1124"},{"desc":"1122","fix":"1125"},{"desc":"1126","fix":"1127"},{"desc":"1122","fix":"1128"},{"desc":"1110","fix":"1129"},{"desc":"1130","fix":"1131"},{"desc":"1132","fix":"1133"},{"desc":"1134","fix":"1135"},{"desc":"1136","fix":"1137"},{"desc":"1138","fix":"1139"},{"desc":"1140","fix":"1141"},{"desc":"1142","fix":"1143"},{"desc":"1144","fix":"1145"},{"desc":"1146","fix":"1147"},{"desc":"1148","fix":"1149"},{"desc":"1150","fix":"1151"},{"desc":"1152","fix":"1153"},{"desc":"1154","fix":"1155"},"Update the dependencies array to be: [formik, isEditing, query.data]",{"range":"1156","text":"1157"},"Update the dependencies array to be: [location.state?.purchaseId]",{"range":"1158","text":"1159"},"Update the dependencies array to be: [existingPurchase, purchaseId]",{"range":"1160","text":"1161"},"Update the dependencies array to be: [location.state?.saleId]",{"range":"1162","text":"1163"},"Update the dependencies array to be: [existingSale, saleId]",{"range":"1164","text":"1165"},"Update the dependencies array to be: [alert, history, props]",{"range":"1166","text":"1167"},"Update the dependencies array to be: [props.user?.role, urlState?.type]",{"range":"1168","text":"1169"},{"range":"1170","text":"1157"},{"range":"1171","text":"1169"},"Update the dependencies array to be: [formik, isEditing, query.data?.product]",{"range":"1172","text":"1173"},{"range":"1174","text":"1169"},{"range":"1175","text":"1157"},"Update the dependencies array to be: [getUserProfile, token]",{"range":"1176","text":"1177"},"Update the dependencies array to be: [history, logout]",{"range":"1178","text":"1179"},"Update the dependencies array to be: [purchase, refundPurchase]",{"range":"1180","text":"1181"},"Update the dependencies array to be: [inventory, refundSale]",{"range":"1182","text":"1183"},"Update the dependencies array to be: [formik, state.data.modelNumber, state.visible]",{"range":"1184","text":"1185"},"Update the dependencies array to be: [formik, state.data.title, state.visible]",{"range":"1186","text":"1187"},"Update the dependencies array to be: [formik, state.data.title, state.data.type, state.data.value, state.visible]",{"range":"1188","text":"1189"},"Update the dependencies array to be: [formik, state.data.company, state.data.name, state.data.phone, state.visible]",{"range":"1190","text":"1191"},"Update the dependencies array to be: [formik, state.data.name, state.data.phone, state.visible]",{"range":"1192","text":"1193"},"Update the dependencies array to be: [formik, state.data.amount, state.visible]",{"range":"1194","text":"1195"},"Update the dependencies array to be: [formik, state.data.address, state.data.cnic, state.data.name, state.data.phone, state.data.salary, state.visible]",{"range":"1196","text":"1197"},"Update the dependencies array to be: [formik, state.data.product, state.data.quantity, state.data.variants, state.visible]",{"range":"1198","text":"1199"},"Update the dependencies array to be: [formik, state.data.amount, state.data.title, state.visible]",{"range":"1200","text":"1201"},[3874,3897],"[formik, isEditing, query.data]",[3334,3336],"[location.state?.purchaseId]",[3465,3477],"[existingPurchase, purchaseId]",[3328,3330],"[location.state?.saleId]",[3403,3411],"[existingSale, saleId]",[1973,1975],"[alert, history, props]",[1697,1712],"[props.user?.role, urlState?.type]",[3903,3926],[2016,2031],[5390,5422],"[formik, isEditing, query.data?.product]",[1291,1306],[3390,3413],[918,925],"[getUserProfile, token]",[1283,1285],"[history, logout]",[2969,2985],"[purchase, refundPurchase]",[1832,1844],"[inventory, refundSale]",[2001,2016],"[formik, state.data.modelNumber, state.visible]",[1534,1549],"[formik, state.data.title, state.visible]",[1817,1832],"[formik, state.data.title, state.data.type, state.data.value, state.visible]",[2426,2441],"[formik, state.data.company, state.data.name, state.data.phone, state.visible]",[2221,2236],"[formik, state.data.name, state.data.phone, state.visible]",[1807,1822],"[formik, state.data.amount, state.visible]",[2581,2596],"[formik, state.data.address, state.data.cnic, state.data.name, state.data.phone, state.data.salary, state.visible]",[3226,3241],"[formik, state.data.product, state.data.quantity, state.data.variants, state.visible]",[1683,1698],"[formik, state.data.amount, state.data.title, state.visible]"]